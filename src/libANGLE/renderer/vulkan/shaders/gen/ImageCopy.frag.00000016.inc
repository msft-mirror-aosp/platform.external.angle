// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000016.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000016[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4f,0x96,0x65,
    0x14,0xc7,0xef,0xe7,0x85,0xe7,0x41,0x08,0x90,0x17,0x25,0x5c,0x5a,0xa6,0x6c,0x35,
    0x0c,0x9e,0x16,0x19,0x41,0xba,0xc8,0xc8,0x32,0x4a,0xc1,0x97,0x0a,0xb6,0x0a,0x27,
    0x94,0x30,0x09,0x66,0xe9,0x72,0x0d,0x4d,0xd8,0x5a,0x5a,0xc1,0xe6,0x98,0xb5,0x82,
    0xcd,0x82,0x1f,0x12,0xd2,0x1f,0xda,0xfa,0xa9,0xb5,0x56,0x3a,0xd3,0xca,0xff,0xc6,
    0xf5,0xb2,0xb5,0x75,0x9d,0x8b,0xcf,0x71,0xdf,0x3d,0xab,0xc9,0x76,0xed,0xbe,0xaf,
    0xef,0x39,0xe7,0x3a,0xdf,0xef,0x39,0xe7,0xbe,0x1e,0x32,0xe9,0x4d,0xf9,0x24,0x49,
    0x25,0x65,0x49,0x69,0x72,0x33,0x59,0xf9,0xab,0x4e,0xd2,0x01,0x49,0x92,0xf2,0x24,
    0x17,0x9f,0x3b,0xbb,0xf7,0x76,0x37,0x1f,0x7d,0xfb,0x50,0x73,0xeb,0xa3,0x05,0xb3,
    0x57,0x26,0x99,0xe8,0x67,0xb6,0xaa,0x24,0x9f,0x64,0xc3,0xd3,0xd6,0x91,0x81,0xc3,
    0xa3,0x86,0x57,0x84,0x75,0x39,0xac,0xd5,0xc1,0xcf,0xf0,0xbc,0x9d,0x11,0xde,0x2a,
    0xe2,0x99,0x16,0x93,0x24,0xcf,0x26,0x25,0x49,0x2d,0xf9,0x36,0xf1,0x74,0x2c,0x05,
    0x56,0x2a,0x58,0x1a,0x6c,0xb5,0x60,0x19,0xb0,0x3a,0xc1,0xb2,0x60,0x77,0x0b,0x56,
    0x02,0x76,0x8f,0x60,0x39,0xb0,0xfb,0x04,0xcb,0x83,0x6d,0x16,0xac,0x14,0xec,0x01,
    0xc1,0x56,0x81,0x6d,0x11,0xac,0x0c,0xac,0x20,0x58,0x39,0x58,0xab,0x60,0x77,0x81,
    0xb5,0x09,0x56,0x01,0xf6,0x84,0x60,0x95,0x60,0x4f,0xc6,0xda,0x65,0x6e,0xd7,0xc0,
    0xea,0xb8,0x23,0x3c,0xef,0xa7,0x66,0xbe,0xdf,0x28,0x7b,0xab,0xfd,0x06,0xf6,0xb5,
    0x21,0x2a,0x1d,0xed,0x99,0x58,0x2f,0x7b,0x5f,0x13,0x7c,0x72,0x68,0xb7,0x5a,0xd7,
    0x87,0x7d,0x9e,0x9a,0x98,0x7d,0x6d,0xf0,0x2c,0xc3,0x6e,0xb6,0x72,0xf4,0x65,0x23,
    0x96,0x8d,0x1a,0x52,0xe8,0xeb,0x60,0x5f,0x21,0x67,0x55,0xe2,0xef,0xb9,0x6a,0x38,
    0x2b,0x89,0xbc,0xaa,0x6f,0xd7,0xda,0x73,0xfa,0xaa,0xb9,0xc3,0x72,0x1f,0xe3,0x50,
    0x47,0x1f,0x6a,0xe1,0x50,0x17,0x73,0xad,0x60,0x4d,0xe8,0x5b,0x0b,0x27,0xf3,0xaf,
    0xc7,0x96,0x17,0xfb,0x7a,0x66,0xc3,0xec,0x1b,0xb0,0xd7,0xc4,0x79,0x4a,0xc7,0x7a,
    0x36,0xc1,0xdd,0x6b,0xed,0x71,0x4d,0x70,0x71,0xfb,0xc3,0xe4,0x71,0xfb,0x56,0xfa,
    0x67,0xb5,0xd8,0x8e,0xaf,0xd5,0xae,0x21,0x64,0xe8,0x64,0x9f,0xe2,0xcc,0xe2,0xa7,
    0x71,0x79,0x8a,0xf7,0x4e,0xb4,0xd9,0x7e,0x47,0x11,0x87,0xae,0xa2,0xfd,0x2e,0xbe,
    0x07,0x8b,0x7f,0x1e,0x2d,0x39,0x38,0xbc,0xc8,0x7b,0x46,0xfc,0x7b,0xe9,0x8f,0xef,
    0x0f,0x14,0xd5,0x66,0x88,0xd9,0xb7,0xf8,0x13,0xd4,0x25,0x2b,0xf6,0x93,0x45,0xb5,
    0x3e,0x4b,0xcf,0x7d,0x7f,0x9e,0x99,0xf0,0xfd,0x05,0x99,0x9f,0x4b,0x70,0x39,0x81,
    0xbe,0x4b,0xdc,0x17,0x99,0x58,0xbb,0x92,0xc8,0x2b,0x8b,0x3e,0xc3,0xfe,0x0c,0x88,
    0xf5,0x69,0x1b,0xb3,0x58,0xc5,0xd9,0xbb,0x03,0xe3,0x4a,0xee,0x84,0x2a,0x96,0xd7,
    0x72,0x94,0x99,0xae,0xc6,0xde,0x19,0x4e,0xa8,0xe7,0x5e,0x58,0xc3,0x6c,0x6c,0xc3,
    0xa7,0x01,0xfc,0x74,0xf0,0xb1,0xfd,0x3a,0xe2,0x1a,0x88,0xb3,0xd9,0xb8,0x97,0xb8,
    0xf5,0xc4,0xf9,0x4c,0x1b,0xbe,0x14,0x7c,0x36,0xca,0x7d,0x62,0xf3,0xf2,0x47,0x60,
    0xde,0x08,0x9f,0xbf,0x83,0xbf,0xdf,0x2b,0x8d,0xe8,0xb1,0xf7,0x9e,0x10,0x97,0xe3,
    0x6e,0x59,0x87,0xef,0x04,0xf5,0x7a,0x10,0xbc,0x37,0xec,0x8c,0xd3,0xb7,0x60,0xee,
    0xf7,0x57,0x38,0xc3,0xcf,0xb2,0xe7,0xad,0xe0,0x65,0x7e,0x3f,0xe3,0x53,0x42,0xcc,
    0x66,0xd1,0xb0,0x05,0x0d,0x4d,0xa2,0xe1,0x21,0x70,0xd7,0xd0,0x0c,0xe6,0x1a,0x0a,
    0xa2,0xc1,0x6c,0x2d,0xdc,0x71,0x96,0xb7,0x45,0x34,0x3c,0x42,0xee,0x94,0x68,0x68,
    0x05,0x77,0x0d,0xdf,0x81,0xb9,0x9f,0x69,0xf0,0xb3,0x0a,0xa2,0xe1,0x0a,0x3e,0x8d,
    0xc4,0xb4,0x88,0x86,0xc7,0xd0,0xb0,0x55,0x34,0xb4,0x81,0xbb,0x86,0xc7,0xc1,0x5c,
    0x43,0x87,0x68,0x30,0x5b,0x7b,0x9c,0xbb,0x95,0xbc,0xed,0xcc,0x51,0x3e,0x9e,0xb7,
    0x92,0xfb,0x8a,0x7c,0x8f,0xc6,0xd1,0x7d,0x3b,0x84,0xe3,0x55,0xfc,0x0a,0xc4,0xb5,
    0xc3,0xc7,0xbe,0xd9,0xa7,0xf9,0x5e,0x7d,0xe6,0x9e,0x81,0x73,0x97,0xcc,0xdc,0x4e,
    0xf0,0x53,0xcc,0xdc,0x73,0x60,0x57,0x89,0xb3,0x6f,0xb8,0x9b,0xb8,0x5d,0xc4,0x59,
    0x4d,0x5f,0x00,0xf7,0xba,0xef,0x26,0x36,0x11,0x6c,0x0f,0x58,0x2a,0xbe,0xe7,0xe2,
    0xf7,0xdf,0x83,0xef,0x1e,0xce,0xf0,0x1c,0x7b,0xc9,0xd1,0x2b,0x39,0xf6,0x81,0xbf,
    0x16,0x98,0xd9,0xfd,0xb5,0x1f,0x4d,0x3d,0xdc,0x19,0xfb,0xa4,0x1f,0x2f,0x11,0x7f,
    0x40,0xfa,0xf1,0x32,0xb8,0xf7,0xe3,0x15,0x30,0xef,0x47,0xbf,0xf4,0xc3,0x6c,0x7d,
    0x61,0x0d,0x52,0xe3,0x3e,0xd1,0xf1,0x2a,0xb9,0x33,0x91,0x7b,0x69,0xd4,0xf1,0x3a,
    0xd8,0x7e,0xf9,0xd6,0xd3,0xa2,0x73,0x80,0x38,0x5f,0x53,0xe1,0x2c,0xc3,0x0f,0x12,
    0x3b,0x10,0xcf,0x5a,0x15,0x75,0x1d,0xe2,0x9c,0x83,0xdc,0x37,0x25,0x72,0x4f,0x5a,
    0xdf,0xfb,0xe1,0x34,0x28,0x7a,0xdf,0x40,0xef,0x90,0xe8,0x7d,0x13,0xdc,0xf5,0x1e,
    0x06,0x73,0xbd,0x23,0xa2,0xd7,0x6c,0xc3,0x61,0x8d,0x70,0xf6,0xb0,0xe8,0x3d,0x22,
    0x7a,0xbf,0xe1,0xac,0x51,0xf0,0x2e,0x38,0x79,0xdc,0x08,0xb3,0x68,0x3e,0x6f,0x91,
    0x73,0x10,0xff,0x61,0xf2,0x8e,0x4b,0x5e,0xf3,0x19,0x0b,0x6b,0x9c,0xf8,0x31,0xc9,
    0x7b,0xf4,0x3f,0xea,0xfc,0xce,0x1d,0xea,0x7c,0x8c,0x38,0x5f,0x1f,0x50,0xe7,0xe3,
    0xc4,0x1e,0x93,0x3a,0xbf,0xcb,0x39,0xc7,0xff,0xa7,0xce,0xce,0x69,0x1c,0x4d,0x16,
    0xf3,0x0b,0x31,0x23,0xc4,0x8f,0x15,0xf5,0xa4,0x5f,0x7c,0xaf,0xd1,0xcb,0x3e,0xe2,
    0xec,0x9c,0xf7,0xf8,0xdd,0x9a,0xc0,0xee,0xfd,0x3b,0x45,0xff,0x4e,0x4a,0xff,0xde,
    0x07,0xf7,0xfe,0x9d,0x06,0xf3,0xfe,0x4d,0x49,0x1d,0xcd,0x36,0x19,0xd6,0x19,0x78,
    0x4c,0xa2,0xd3,0x72,0x7d,0x48,0xbe,0x09,0x74,0xe6,0xa9,0x99,0xeb,0x9c,0x22,0xe6,
    0x8c,0xf0,0xf9,0x08,0x3e,0x67,0x85,0xcf,0xc7,0xe0,0xce,0xe7,0x13,0x30,0xe7,0x33,
    0x23,0x7c,0xcc,0x36,0x1d,0xd6,0x2c,0x67,0x4f,0xd3,0x57,0x3b,0xe7,0x1c,0x5c,0x32,
    0xdc,0xc1,0xc6,0xf1,0x7b,0xc1,0xfd,0x7e,0x9b,0x21,0x76,0x56,0xee,0x85,0x4f,0xe1,
    0x75,0x5e,0xee,0x85,0xcf,0xc0,0xaf,0x31,0x37,0x9f,0x83,0xf5,0x0a,0xd7,0x2f,0xc0,
    0xbb,0xe0,0x3a,0x2f,0x5c,0xcd,0x36,0x17,0xd6,0x3c,0xf9,0xe6,0x84,0xd7,0x0f,0xe8,
    0x9b,0x90,0xdf,0x06,0xf7,0x9b,0xa7,0xd7,0xe6,0x77,0x1d,0x9f,0x59,0x62,0xe6,0x84,
    0xcf,0x97,0xf0,0xb9,0x20,0x7c,0xbe,0x02,0x77,0x3e,0x8b,0xc2,0xc7,0x6c,0x0b,0x61,
    0x2d,0x92,0x67,0x41,0xf8,0xfc,0x08,0x9f,0xeb,0xf4,0xd0,0xf8,0xb8,0xdf,0xa2,0xf0,
    0xb9,0x81,0xcf,0x3c,0x31,0x0b,0xc2,0xe7,0x6b,0xf8,0x0c,0x09,0x9f,0x8b,0xe0,0xce,
    0x67,0x59,0xf8,0x5c,0x8c,0x7e,0x49,0xc4,0x2c,0xcf,0x92,0xf0,0xf9,0x89,0xff,0x33,
    0x6f,0xc8,0x3c,0xb9,0xdf,0xb2,0xf0,0xf9,0x1d,0x9f,0x45,0x62,0x96,0x8a,0x7a,0x3c,
    0x23,0xbe,0xbf,0x31,0x0f,0xd3,0xc4,0x2d,0x17,0xcd,0xe9,0x94,0xf8,0xfe,0xca,0x7c,
    0x4f,0x12,0x67,0xe7,0x6c,0x0f,0x4c,0x2e,0x63,0xfb,0x27,0x74,0xad,0x2d,0xac,0x7f,
    0x01,0x46,0x41,0x4d,0x44,0x50,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
