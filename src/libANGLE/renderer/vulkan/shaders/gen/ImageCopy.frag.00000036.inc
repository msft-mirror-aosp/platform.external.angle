// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000036.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000036[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xdb,0x6f,0x54,0x55,
    0x14,0xc6,0xcf,0xcc,0x99,0x4b,0x69,0x6d,0x4b,0x2f,0x50,0xab,0x02,0x22,0x6d,0x82,
    0x29,0xb6,0xa3,0x56,0xac,0xad,0x10,0x8b,0x30,0x10,0x45,0x4b,0x41,0xa8,0xda,0x26,
    0xa2,0x34,0xb6,0x68,0x0b,0xda,0xd1,0x08,0x91,0x98,0x82,0xb4,0x9a,0x08,0x6a,0x9b,
    0x98,0x06,0x8d,0xb6,0x09,0xda,0x3e,0x40,0x1b,0x78,0x30,0xe1,0x89,0x18,0xc3,0x25,
    0x0a,0x5e,0xfe,0x19,0xe3,0x25,0x31,0x71,0xad,0x3d,0xbf,0x45,0x96,0x13,0x0d,0x93,
    0xec,0x9c,0xd9,0xdf,0xba,0x7d,0xdf,0x5a,0xfb,0xec,0x99,0x38,0xb9,0x2e,0x1b,0x45,
    0x89,0xa8,0x3c,0x2a,0x8b,0x7e,0x8d,0x8a,0x9f,0x9a,0x28,0x29,0x48,0xf1,0xf9,0x90,
    0x3c,0x2b,0xa2,0x4c,0xd8,0x6f,0xdf,0xb9,0x67,0x67,0x6b,0xe1,0xad,0xc1,0xd6,0xf6,
    0x47,0x72,0xea,0x57,0x15,0xc5,0xc1,0x5f,0x6d,0xd5,0x51,0x36,0x4a,0xc9,0x53,0xd7,
    0xe8,0xcb,0x07,0x0f,0x29,0x5e,0x29,0xeb,0xa2,0xac,0xe5,0xe2,0xa7,0x78,0x56,0x73,
    0xc8,0xb7,0xca,0x90,0x53,0x63,0xa2,0x68,0x47,0x94,0x8e,0xea,0xa8,0xbb,0x8e,0xa7,
    0x61,0x09,0xb0,0x32,0x87,0x25,0xc1,0x96,0x3b,0x2c,0x06,0xab,0x77,0x58,0x0a,0xec,
    0x4e,0x87,0xa5,0xc1,0xee,0x71,0x58,0x06,0xec,0x5e,0x87,0x65,0xc1,0x9a,0x1c,0x56,
    0x06,0xb6,0xde,0x61,0xcb,0xc0,0x36,0x38,0xac,0x1c,0x2c,0xe7,0xb0,0x0a,0xb0,0x76,
    0x87,0xdd,0x01,0xd6,0xe1,0xb0,0x4a,0xb0,0xc7,0x1d,0x56,0x05,0xf6,0x44,0xe8,0x5d,
    0x7c,0xab,0x07,0xda,0xc7,0xad,0xf2,0xbc,0x8f,0x9e,0xd9,0x7e,0xad,0xdb,0x6b,0xef,
    0x57,0xb3,0xaf,0x93,0xa8,0x64,0xb0,0xc7,0xa1,0x5f,0xfa,0x7d,0x85,0xf8,0x64,0xd0,
    0xae,0xbd,0x6e,0x90,0x7d,0x96,0x9e,0xa8,0x7d,0xa5,0x78,0x96,0x63,0x57,0x5b,0x05,
    0xfa,0x52,0x01,0x4b,0x05,0x0d,0x09,0xf4,0x75,0xb1,0xaf,0x74,0xb9,0xaa,0xf0,0xb7,
    0x5a,0xb5,0xe4,0x8a,0x02,0xaf,0x9a,0x5b,0xbd,0xb6,0x9a,0xb6,0x6a,0x6f,0xb3,0xcc,
    0x47,0x39,0xd4,0x33,0x87,0x3a,0x38,0xd4,0x87,0x5a,0x45,0xac,0x05,0x7d,0x2b,0xe1,
    0xa4,0xfe,0x0d,0xd8,0xb2,0xce,0xbe,0x8a,0xb3,0xa1,0xf6,0xd5,0xd8,0x6b,0xc3,0x79,
    0x4a,0x86,0x7e,0xb6,0xc0,0xdd,0x7a,0x6d,0x71,0x2d,0x70,0x31,0xfb,0x83,0xd4,0x31,
    0xfb,0x46,0xe6,0xa7,0xbd,0xd8,0x8c,0xaf,0xf6,0xae,0x51,0x2a,0x74,0xb3,0x4f,0x44,
    0xff,0xfe,0xd8,0xfe,0x6e,0xe9,0xfd,0x16,0x79,0x76,0xc3,0xeb,0x49,0xf0,0x2d,0xe8,
    0xd4,0xfd,0xd6,0x12,0x3e,0xf9,0x92,0x7d,0x2f,0xbd,0xd7,0xf8,0xdd,0xe8,0xca,0x38,
    0x7b,0x1f,0x7d,0x50,0x7e,0xfb,0xb1,0xc5,0xce,0x3e,0xcc,0xb9,0x57,0xfb,0x31,0x7a,
    0x92,0x72,0xf6,0xe3,0x25,0x7d,0x3e,0xcd,0xbc,0x6d,0x7f,0x86,0xf3,0x60,0xfb,0xb3,
    0xee,0xec,0x5c,0xa0,0xd6,0x31,0xf4,0x5c,0xe0,0xae,0x88,0x43,0xdf,0xd2,0x81,0x77,
    0x0a,0x3d,0x8a,0xfd,0x21,0x88,0xce,0x68,0x13,0xe7,0xb0,0x9a,0xdc,0x3d,0xa2,0xa0,
    0x8a,0xfb,0xa0,0x9a,0x65,0x7d,0x3c,0xc4,0x79,0xae,0xc1,0xde,0x2d,0x19,0x1a,0xb8,
    0x13,0x56,0x70,0x2e,0x36,0xe1,0xd3,0x08,0x7e,0x42,0x7c,0x74,0x7f,0x17,0x71,0x8d,
    0xc4,0xe9,0xb9,0x58,0x43,0xdc,0x2a,0xe2,0xec,0x3c,0x2b,0x7e,0x4e,0x7c,0xd6,0xba,
    0xbb,0x44,0xcf,0xca,0xef,0xc2,0xbc,0x19,0x3e,0x7f,0x89,0xbf,0xdd,0x29,0xcd,0xe8,
    0x69,0x0a,0x33,0x4a,0x87,0xde,0xac,0xa7,0xa6,0x7e,0xde,0xa3,0x5f,0xf7,0x83,0xef,
    0x96,0x9d,0x72,0xfa,0x16,0xcc,0xfc,0xfe,0x94,0x1c,0x96,0x4b,0x9f,0xbf,0x89,0x97,
    0xfa,0x5d,0xc5,0x27,0x4d,0x4c,0x93,0xd3,0xb0,0x01,0x0d,0x2d,0x4e,0xc3,0x03,0xe0,
    0xa6,0xa1,0x15,0xcc,0x34,0xe4,0x9c,0x06,0xb5,0xb5,0x71,0xbf,0x69,0xdd,0x36,0xa7,
    0xe1,0x61,0x6a,0x27,0x9c,0x86,0x76,0x70,0xd3,0x70,0x09,0xcc,0xfc,0x54,0x83,0xe5,
    0xca,0x39,0x0d,0xd7,0xf0,0x69,0x26,0xa6,0xcd,0x69,0x78,0x14,0x0d,0x1b,0x9d,0x86,
    0x0e,0x70,0xd3,0xf0,0x18,0x98,0x69,0xe8,0x72,0x1a,0xd4,0xd6,0x19,0xce,0x5d,0xb1,
    0x6e,0x27,0xe7,0x28,0x1b,0xf2,0x15,0x6b,0x5f,0x73,0xef,0xa2,0x72,0x34,0xdf,0x2e,
    0xc7,0xf1,0x3a,0x7e,0x39,0xe2,0x3a,0xe1,0xa3,0xef,0xe8,0x36,0xde,0x4f,0x3b,0x73,
    0xdb,0xe1,0x9c,0x77,0x67,0x6e,0x07,0xf8,0x38,0x67,0xee,0x29,0x30,0xcd,0x7b,0x98,
    0xfb,0xf3,0x69,0xf0,0x41,0xd9,0xeb,0x5d,0xf0,0x0c,0xb9,0x87,0x88,0x79,0x16,0x2c,
    0xef,0x62,0x7a,0xc0,0x3f,0x14,0x1f,0xdd,0xef,0x22,0x4f,0x0f,0x7c,0xf4,0x2e,0xd8,
    0x03,0x9f,0x5e,0xf8,0xe8,0xac,0x9e,0x03,0xd7,0x3c,0xfa,0x1e,0xef,0x05,0xeb,0x93,
    0x4a,0x7a,0x7f,0xed,0xa3,0xf6,0x2e,0x7a,0xb3,0xd7,0xcd,0xe4,0x79,0xf2,0xf5,0xb9,
    0x99,0xbc,0x00,0x6e,0x33,0x79,0x11,0xcc,0x66,0x32,0xe0,0x66,0xa2,0xb6,0xfe,0xa0,
    0xab,0xd8,0xe7,0x7e,0x77,0xae,0x5e,0xa2,0x76,0x1c,0x34,0x94,0x85,0xbb,0xea,0x15,
    0xb0,0x7d,0xee,0x7d,0x4f,0x06,0x6e,0x99,0x60,0x3f,0x40,0x9c,0xad,0x93,0x92,0x6b,
    0x7f,0xe8,0x63,0x31,0xf6,0x40,0xc8,0xb5,0x2c,0xe8,0x7a,0x95,0x3c,0x83,0xdc,0x39,
    0x69,0x77,0x17,0xea,0xec,0x07,0xe0,0x34,0xe4,0xf4,0x1e,0x44,0xef,0xb0,0xd3,0xfb,
    0x1a,0xb8,0xe9,0x7d,0x1d,0xcc,0xf4,0x8e,0x3a,0xbd,0x6a,0x1b,0xd1,0xff,0x4a,0xe4,
    0x1e,0x71,0x7a,0x0f,0x3b,0xbd,0x8b,0xe4,0x7a,0x03,0x3c,0x0f,0x27,0x8b,0x1b,0xe5,
    0x3c,0xaa,0xcf,0x9b,0xd4,0x1c,0xc2,0x7f,0x84,0xba,0x05,0x57,0x57,0x7d,0xc6,0x64,
    0x15,0x88,0x1f,0x73,0x75,0xdf,0xfe,0x8f,0x3e,0xbf,0x73,0x9b,0x3e,0x1f,0x21,0xce,
    0xd6,0x07,0xf4,0xf9,0x28,0xb1,0x47,0x5c,0x9f,0xdf,0x25,0xcf,0xd1,0xff,0xe9,0xb3,
    0x71,0x2a,0xa0,0x49,0x63,0x7e,0x24,0x66,0x94,0xf8,0xb1,0x92,0x99,0x0c,0x38,0xdf,
    0x1f,0x98,0x65,0x3f,0x71,0x85,0xf0,0xfb,0x52,0xfc,0xed,0x1a,0xc7,0x6e,0xf3,0x3b,
    0xc1,0xfc,0x8e,0xbb,0xf9,0xbd,0x0f,0x6e,0xf3,0x3b,0x09,0x66,0xf3,0x9b,0x74,0x7d,
    0x54,0xdb,0x84,0xac,0x53,0xf0,0x98,0x40,0xa7,0xd6,0xfa,0x88,0x7a,0xe3,0xe8,0xcc,
    0xd2,0x33,0xd3,0x39,0x49,0xcc,0x29,0xc7,0xe7,0x63,0xf8,0x9c,0x76,0x7c,0x3e,0x01,
    0x37,0x3e,0x9f,0x82,0x19,0x9f,0x69,0xc7,0x47,0x6d,0x53,0xb2,0x66,0xc8,0x3d,0xc5,
    0x5c,0x35,0xcf,0x67,0x70,0x89,0xb9,0x87,0x95,0xe3,0x65,0x87,0xdb,0x1d,0x37,0x4d,
    0xec,0x8c,0xbb,0x27,0x3e,0x87,0xd7,0x19,0x77,0x4f,0x7c,0x01,0x7e,0x9d,0x73,0xf3,
    0x25,0x58,0xaf,0xe3,0xfa,0x15,0x78,0x1e,0xae,0x73,0x8e,0xab,0xda,0x66,0x65,0xcd,
    0x51,0x6f,0xd6,0xf1,0xfa,0x0e,0x7d,0xe3,0xee,0xf7,0xc1,0xfc,0xe6,0x98,0xb5,0xfa,
    0xdd,0xc0,0x67,0x86,0x98,0x59,0xc7,0xe7,0x6b,0xf8,0x9c,0x75,0x7c,0xbe,0x01,0x37,
    0x3e,0x0b,0x8e,0x8f,0xda,0xe6,0x65,0x2d,0x50,0x67,0xde,0xf1,0xf9,0x1e,0x3e,0x37,
    0x98,0xa1,0xf2,0x31,0xbf,0x05,0xc7,0xe7,0x26,0x3e,0x73,0xc4,0xcc,0x3b,0x3e,0xe7,
    0xe0,0x33,0xec,0xf8,0x9c,0x07,0x37,0x3e,0x4b,0x8e,0xcf,0xf9,0xf0,0xde,0x47,0x01,
    0xd3,0x3a,0x8b,0x8e,0xcf,0x15,0xfe,0x67,0xde,0x74,0xe7,0xc9,0xfc,0x96,0x1c,0x9f,
    0x5f,0xf0,0x59,0x20,0x66,0xb1,0x64,0xc6,0xd3,0xce,0xf7,0x67,0xce,0xc3,0x14,0x71,
    0x4b,0x25,0xe7,0x74,0xd2,0xf9,0xfe,0xc4,0xf9,0x9e,0x20,0x4e,0xf3,0x6c,0x16,0x26,
    0x17,0xb1,0xfd,0x2d,0x53,0xeb,0x90,0xf5,0x0f,0x84,0xbb,0x50,0xed,0x58,0x0e,0x00,
    0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform isampler2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
