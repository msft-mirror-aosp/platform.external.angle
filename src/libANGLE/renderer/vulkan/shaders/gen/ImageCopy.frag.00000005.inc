// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000005.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000005[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x6b,0xd5,0x65,
    0x18,0xc6,0xbf,0xe7,0x7c,0xcf,0xcb,0xdc,0xda,0xe6,0x5e,0x74,0x4d,0xd2,0x32,0x1d,
    0x14,0xb3,0xed,0x40,0xcb,0xd6,0x96,0xd2,0xb2,0xa5,0xae,0xe9,0xd2,0x0d,0x8a,0x94,
    0x36,0x6b,0xa3,0xdc,0xd0,0x14,0xfb,0xcd,0x72,0x23,0x7c,0xa9,0x8d,0x18,0x16,0xb5,
    0x81,0xb6,0xfd,0x90,0x1b,0x46,0x08,0xfd,0x14,0x11,0xa5,0x2c,0x2d,0xfb,0x87,0xa2,
    0x17,0x08,0x7a,0xee,0xe7,0x7c,0x6e,0xb9,0x3a,0x14,0x1e,0x78,0x38,0xe7,0xb9,0xee,
    0xb7,0xeb,0xba,0xef,0xe7,0x79,0x38,0x69,0x76,0x5b,0x31,0x49,0x32,0x49,0x75,0x52,
    0x95,0xfc,0x9a,0x94,0x3f,0x0d,0x49,0x36,0x20,0x49,0x52,0x93,0x14,0xe2,0xf7,0xde,
    0xc1,0xe1,0xc1,0x8e,0x33,0xef,0x8e,0x77,0x74,0x3d,0x55,0x32,0x7b,0x5d,0x92,0x46,
    0x3f,0xb3,0xd5,0x27,0xc5,0x24,0x17,0xbe,0x6d,0x9d,0x38,0x76,0xfc,0xa4,0xe1,0xb5,
    0x61,0x7d,0x15,0xd6,0xfa,0xe0,0x67,0x78,0xd1,0x72,0x84,0x5f,0xb5,0x31,0xa7,0xc5,
    0x24,0xc9,0xbe,0x24,0x9f,0x34,0x51,0x6f,0x1b,0xdf,0x8e,0x65,0xc0,0xaa,0x04,0xcb,
    0x82,0xad,0x17,0x2c,0x05,0x6b,0x16,0x2c,0x07,0xf6,0xa0,0x60,0x79,0xb0,0x87,0x04,
    0x2b,0x80,0x3d,0x22,0x58,0x11,0x6c,0xbb,0x60,0x55,0x60,0x8f,0x09,0xb6,0x0e,0x6c,
    0x87,0x60,0xd5,0x60,0x25,0xc1,0x6a,0xc0,0xba,0x04,0x7b,0x00,0xac,0x5b,0xb0,0x5a,
    0xb0,0x67,0x05,0xab,0x03,0x7b,0x2e,0xf6,0x2e,0xbd,0xd7,0x03,0xeb,0xe3,0x9e,0xf0,
    0xfd,0x28,0x3d,0xf3,0xfd,0x56,0xd9,0x5b,0xef,0xb7,0xb0,0x6f,0x0a,0x51,0xd9,0x68,
    0x4f,0x63,0xbf,0xec,0xf7,0x86,0xe0,0x53,0x40,0xbb,0xf5,0xba,0x25,0xec,0x8b,0xf4,
    0xc4,0xec,0x1b,0x83,0x67,0x35,0x76,0xb3,0xd5,0xa0,0x2f,0x17,0xb1,0x5c,0xd4,0x90,
    0x41,0x5f,0x2f,0xfb,0x5a,0xc9,0x55,0x87,0xbf,0xd7,0x6a,0x24,0x57,0x12,0x79,0x35,
    0xdc,0xeb,0xb5,0xd7,0xf4,0xd5,0x78,0x9f,0xe5,0x3e,0xc6,0xa1,0x99,0x39,0x34,0xc1,
    0xa1,0x39,0xd6,0x2a,0x63,0xed,0xe8,0xdb,0x08,0x27,0xf3,0x6f,0xc1,0x56,0x14,0xfb,
    0x66,0xce,0x86,0xd9,0xb7,0x60,0x6f,0x8c,0xe7,0x29,0x1b,0xfb,0xd9,0x0e,0x77,0xef,
    0xb5,0xc7,0xb5,0xc3,0xc5,0xf7,0x3b,0x99,0x97,0x69,0xdf,0x8d,0xcd,0x7a,0xd5,0x1a,
    0x32,0xf6,0xb1,0xcf,0x24,0xff,0xfe,0xf8,0xde,0x6a,0x3f,0xcf,0xef,0x3e,0xb4,0xd8,
    0x7e,0x4f,0x45,0xcd,0xfe,0x8a,0xfd,0x00,0xfd,0xb5,0xf8,0x97,0xe0,0xae,0x9c,0x86,
    0xd0,0x6a,0x9c,0x5e,0xc5,0x96,0x8a,0x7d,0x8c,0xb3,0xed,0xfb,0xb3,0x15,0xbd,0xbb,
    0xc8,0x0c,0x7d,0x7f,0x99,0x19,0xfb,0xfe,0x8a,0x9c,0x87,0xeb,0xe4,0xde,0x0d,0xff,
    0xeb,0xdc,0xff,0x34,0xf6,0x26,0x1f,0x79,0xe6,0xe0,0x6f,0xd8,0x1f,0x01,0xb1,0xbe,
    0xef,0xe2,0x6c,0xd5,0x93,0x7b,0x28,0x30,0xae,0xe3,0x8e,0xd7,0xb3,0xbc,0x57,0x27,
    0x39,0xa3,0x0d,0xd8,0xfb,0x42,0x86,0x16,0xee,0xf9,0x06,0x66,0xbd,0x0b,0x9f,0x56,
    0xf0,0x0f,0x82,0x8f,0xed,0x37,0x11,0xd7,0x4a,0x9c,0xcd,0xfa,0x61,0xe2,0x36,0x13,
    0xe7,0x67,0xd4,0xf0,0xaf,0x83,0xcf,0x56,0x79,0x1f,0x6c,0xfe,0xbf,0x07,0xe6,0x6d,
    0xf0,0xf9,0x2b,0xf8,0xfb,0x3b,0xd1,0x86,0x1e,0xfb,0x7d,0x28,0xc4,0x15,0x78,0x2b,
    0x36,0xe1,0x7b,0x8e,0x7e,0x3d,0x0e,0x7e,0x38,0xec,0x8c,0xd3,0x0d,0x30,0xf7,0xfb,
    0x33,0xe4,0xf0,0x5c,0xf6,0xfd,0x5b,0xf0,0x32,0xbf,0x1f,0xf1,0xc9,0x13,0xb3,0x5d,
    0x34,0xec,0x40,0x43,0xbb,0x68,0x78,0x02,0xdc,0x35,0x74,0x80,0xb9,0x86,0x92,0x68,
    0x30,0x5b,0x27,0x6f,0x96,0xd5,0xed,0x14,0x0d,0x4f,0x52,0x3b,0x23,0x1a,0xba,0xc0,
    0x5d,0xc3,0x37,0x60,0xee,0x67,0x1a,0x3c,0x57,0x49,0x34,0xdc,0xc4,0xa7,0x8d,0x98,
    0x4e,0xd1,0xf0,0x34,0x1a,0x76,0x8a,0x86,0x6e,0x70,0xd7,0xf0,0x0c,0x98,0x6b,0xe8,
    0x15,0x0d,0x66,0xeb,0x89,0xe7,0xae,0x5c,0xb7,0x87,0x73,0x54,0x8c,0xf9,0xca,0xb5,
    0x6f,0xca,0x7d,0x33,0x8e,0xee,0xdb,0x2b,0x1c,0x6f,0xe1,0x57,0x22,0xae,0x07,0x3e,
    0x76,0x27,0x5f,0xe0,0x3e,0xfa,0x99,0x7b,0x11,0xce,0xfd,0x72,0xe6,0xf6,0x82,0xcf,
    0x70,0xe6,0xf6,0x83,0xdd,0x22,0xce,0xee,0xe8,0x20,0x71,0x03,0xc4,0x59,0x4f,0x0f,
    0x80,0x8f,0x86,0x28,0xbb,0x3f,0x07,0xa9,0xb7,0x9f,0xfb,0x7d,0x40,0x7a,0xf5,0x32,
    0xf1,0x43,0xd2,0xab,0x43,0xe0,0xde,0xab,0xc3,0x60,0xde,0xab,0x11,0xe9,0x95,0xd9,
    0x86,0x63,0xad,0xb2,0xfe,0x61,0x99,0xf7,0x2b,0xd4,0x4e,0x63,0xfe,0xaa,0xf8,0x66,
    0xbc,0x06,0x76,0x50,0xee,0x61,0x36,0xd6,0x2b,0x44,0xfb,0x11,0xe2,0x7c,0x9d,0x0f,
    0xb9,0x0c,0x3f,0x4a,0xec,0x91,0x98,0x6b,0x5d,0xd4,0xf5,0x3a,0x79,0x8e,0xf2,0x16,
    0xe4,0xe5,0x4d,0xb2,0x99,0x8c,0xc0,0x69,0x54,0xf4,0x1e,0x43,0xef,0x98,0xe8,0x7d,
    0x03,0xdc,0xf5,0xbe,0x09,0xe6,0x7a,0x27,0x44,0xaf,0xd9,0xc6,0xc3,0x9a,0x20,0xf7,
    0xb8,0xe8,0x7d,0x4b,0xf4,0xde,0x20,0xd7,0xdb,0xe0,0xfd,0x70,0xf2,0xb8,0x09,0xce,
    0x89,0xf9,0x1c,0xa7,0xe6,0x28,0xfe,0xe3,0xd4,0x9d,0x92,0xba,0xe6,0x33,0x19,0xd6,
    0x14,0xf1,0x93,0x52,0xf7,0xc4,0x7f,0xf4,0xf9,0x9d,0xfb,0xf4,0xf9,0x14,0x71,0xbe,
    0x2e,0xd1,0xe7,0xd3,0xc4,0x9e,0x92,0x3e,0x9f,0x21,0xcf,0xe9,0xff,0xe9,0xb3,0x73,
    0x9a,0x42,0x93,0xc5,0xfc,0x44,0xcc,0x04,0xf1,0x93,0x15,0x33,0x19,0x11,0xdf,0x35,
    0x66,0x39,0x4c,0xdc,0x94,0xcc,0xeb,0x3d,0xe6,0x75,0x56,0xe6,0xf5,0x3e,0xb8,0xcf,
    0xeb,0x1c,0x98,0xcf,0x6b,0x46,0xfa,0x66,0xb6,0xe9,0xb0,0x2e,0x50,0x77,0x5a,0x74,
    0x9d,0xa7,0xf6,0x1a,0xba,0x8a,0xf4,0xc8,0x75,0xcd,0x10,0x73,0x41,0xf8,0x5c,0x82,
    0xcf,0x45,0xe1,0xf3,0x21,0xb8,0xf3,0xf9,0x08,0xcc,0xf9,0xcc,0x09,0x1f,0xb3,0xcd,
    0x86,0x35,0x4f,0xee,0x59,0x99,0xe3,0xc7,0x70,0x49,0x79,0x0f,0x8d,0xe3,0xb7,0x82,
    0xfb,0x5b,0x33,0x47,0xec,0xbc,0xbc,0x03,0x9f,0xc0,0xeb,0xb2,0xbc,0x03,0x9f,0x82,
    0xdf,0x25,0xff,0x67,0x60,0x03,0xc2,0xf5,0x73,0xf0,0x7e,0xb8,0x2e,0x0a,0x57,0xb3,
    0x2d,0x84,0xb5,0x48,0xbd,0x05,0xe1,0xf5,0x1d,0x31,0x6b,0xf2,0x4e,0xbb,0xdf,0xa2,
    0xcc,0xf6,0x36,0x3e,0xf3,0xc4,0x2c,0x08,0x9f,0xab,0xf0,0xb9,0x22,0x7c,0xbe,0x00,
    0x77,0x3e,0xcb,0xc2,0xc7,0x6c,0x4b,0x61,0x2d,0x53,0x67,0x49,0xf8,0x7c,0x4f,0xcc,
    0x6d,0x66,0x68,0x7c,0xdc,0x6f,0x59,0xf8,0xdc,0xc1,0x67,0x91,0x98,0x25,0xe1,0xf3,
    0x25,0x7c,0xc6,0x84,0xcf,0x35,0x70,0xe7,0xb3,0x2a,0x7c,0xcc,0xb6,0x12,0xd6,0x2a,
    0x75,0x56,0x84,0xcf,0x0f,0xfc,0x7f,0xb8,0x23,0xe7,0xc9,0xfd,0x56,0x85,0xcf,0x5d,
    0x7c,0x96,0x89,0x59,0xa9,0x98,0xf1,0x9c,0xf8,0xfe,0xc2,0x79,0x98,0x25,0x6e,0xb5,
    0xe2,0x9c,0xce,0x88,0xef,0xcf,0x9c,0xef,0x69,0xe2,0xe6,0xe2,0x7f,0xa9,0x34,0xfe,
    0x87,0x32,0xdb,0xdf,0x61,0x6a,0xdd,0x61,0xfd,0x03,0x30,0xfe,0x17,0x7d,0xac,0x0d,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
