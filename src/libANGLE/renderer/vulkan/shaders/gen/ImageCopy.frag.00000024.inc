// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000024.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000024[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x5b,0x6c,0x55,0x45,
    0x14,0x86,0x67,0xce,0xe9,0x0d,0x0a,0x15,0x42,0xe5,0x66,0x6b,0x5a,0xb9,0x88,0xb4,
    0x94,0xca,0x1d,0xdb,0x03,0x6d,0xb8,0xb4,0x86,0x4a,0x29,0x44,0x13,0xc4,0x4a,0x40,
    0x54,0x40,0x28,0xda,0x1a,0x23,0x44,0x6a,0xa1,0xa2,0x34,0x46,0x08,0x0f,0x3e,0x80,
    0x0a,0x89,0x2f,0x3c,0x18,0x08,0x2a,0x3c,0x08,0x28,0x8d,0x21,0x60,0x94,0x9a,0xa0,
    0x34,0x51,0x6a,0xe0,0xcd,0x37,0x23,0x91,0xa0,0xa0,0x31,0x38,0x6b,0xcf,0xb7,0xe8,
    0xb2,0xd1,0xd0,0x64,0xb2,0xf7,0xfc,0xb3,0x2e,0xff,0xfa,0x67,0xcd,0xec,0xb6,0xe9,
    0xd4,0xb8,0x5c,0xe7,0xbc,0x1b,0xec,0xf2,0x5c,0x93,0x77,0xc9,0xcf,0x70,0x97,0x72,
    0xf2,0x9a,0xef,0x72,0x92,0x67,0x5d,0xc3,0x8a,0x86,0x8a,0xb6,0x97,0xd7,0x55,0xcc,
    0x98,0x59,0x29,0xeb,0x05,0x2e,0x9d,0xd8,0xc9,0xda,0x3d,0x2e,0xd7,0x65,0x85,0xa7,
    0x8c,0xcd,0x6b,0x36,0xb4,0x08,0x3e,0x31,0x8c,0xab,0x61,0x0c,0x0b,0x76,0x82,0xe7,
    0x4a,0x8c,0xf0,0x36,0x31,0x89,0x29,0x3e,0xce,0xd5,0xbb,0x6c,0x57,0x1e,0xd3,0xb9,
    0x71,0x3c,0x15,0xf3,0x60,0x79,0x06,0x4b,0x81,0x0d,0x33,0x58,0x1a,0xac,0xd0,0x60,
    0x59,0x60,0xa3,0x0d,0x96,0x0d,0x56,0x64,0xb0,0x1c,0xb0,0x12,0x83,0xe5,0x82,0x8d,
    0x37,0x58,0x1e,0xd8,0x24,0x83,0x0d,0x02,0x2b,0x37,0xd8,0x60,0xb0,0x4a,0x83,0xe5,
    0x83,0xcd,0x30,0xd8,0x10,0xb0,0x39,0x06,0x1b,0x0a,0x56,0x6d,0xb0,0x02,0xb0,0x9a,
    0x44,0xbb,0xf4,0x1d,0x0d,0x44,0xc7,0x55,0xe1,0xf9,0x00,0x9a,0xe9,0xbc,0xd4,0xcc,
    0x45,0xfb,0xfb,0x99,0x8f,0x08,0x5e,0xa9,0x64,0x3d,0x9d,0xe8,0x25,0xef,0x23,0xc3,
    0x5b,0x0e,0xb5,0x97,0x05,0xfb,0x1c,0x38,0xfc,0x7c,0x74,0x42,0xa6,0x30,0x58,0x14,
    0x18,0x5c,0x74,0x3c,0x5a,0xb7,0x26,0xa3,0x73,0xd1,0xf0,0xc0,0xfe,0x31,0x35,0xf7,
    0x86,0x79,0x09,0x31,0x64,0xbf,0x46,0x85,0x79,0x29,0xf3,0x14,0xf3,0xf1,0xe8,0x9c,
    0x95,0xe0,0x59,0x6e,0x02,0xb6,0x82,0x57,0x31,0x9f,0x68,0xfc,0x1f,0xc4,0x5e,0xfc,
    0x25,0x7e,0x19,0xf1,0x5c,0x52,0xcf,0xf0,0x44,0x83,0x52,0x46,0x89,0x19,0x65,0x77,
    0x19,0x25,0x77,0x9e,0x59,0x6e,0x0a,0xfb,0x57,0x0e,0x07,0x99,0x57,0x80,0x95,0x51,
    0xd3,0x54,0x38,0x89,0x7d,0x25,0x6b,0xa5,0x66,0x7d,0x16,0x3d,0x25,0xeb,0xb3,0xef,
    0xf8,0xc6,0x75,0x79,0x3e,0x02,0x67,0xb5,0x5f,0x40,0x5d,0x3a,0x5f,0xca,0xfe,0x4a,
    0xcd,0x4f,0xc0,0x4f,0x34,0x1a,0x13,0x22,0xad,0x34,0x1a,0xda,0x1f,0x8e,0x66,0x92,
    0xf3,0x49,0xde,0x57,0x52,0x83,0xcc,0x57,0x0d,0xc8,0xd9,0x3c,0x60,0xbe,0x96,0xf3,
    0x22,0xfe,0xcf,0xc0,0xb9,0x04,0x0e,0xcf,0xf1,0x9e,0x36,0xf6,0x1b,0xe1,0xa0,0xf3,
    0x16,0xce,0x87,0xce,0xdb,0x39,0x1b,0x3a,0x3f,0x40,0x6f,0xeb,0xfc,0xd8,0x00,0x4d,
    0x4f,0x71,0x46,0x74,0x7e,0x8e,0x9e,0xd3,0xbe,0xfa,0x76,0x00,0xdf,0x8b,0x68,0xa2,
    0xeb,0x3f,0x25,0xab,0x1d,0xf3,0x85,0xff,0x15,0xb8,0x6a,0x1f,0x5d,0xe1,0xbe,0x49,
    0x1b,0xfb,0xaa,0x20,0xd8,0x8e,0x8e,0x8e,0xaa,0xf2,0xc0,0x5a,0xec,0xaa,0x7d,0xc4,
    0xec,0x50,0xdb,0x4c,0x78,0xdf,0x72,0xb8,0x75,0xbe,0xce,0xe7,0x85,0xf9,0xbe,0xce,
    0x83,0x99,0x59,0x61,0x97,0x53,0xf0,0x70,0xc4,0xbf,0x19,0x10,0xd9,0xfb,0x0c,0xfd,
    0x3d,0x89,0x1e,0x6e,0x0c,0x79,0xa4,0x7f,0x1f,0x02,0x9b,0x64,0xf6,0xad,0x85,0xb3,
    0x31,0x99,0xf5,0xda,0x10,0x41,0xfa,0xea,0x61,0x7a,0x6f,0x2a,0xf1,0xc4,0x66,0x1a,
    0xf8,0xce,0x60,0x23,0xf3,0xe9,0xf8,0x4d,0xc3,0x6f,0x36,0x77,0x47,0x05,0x7d,0x98,
    0xa1,0xe7,0xe6,0x82,0x7f,0x14,0x6c,0x0a,0x12,0x5d,0x22,0x26,0xbd,0xf8,0x47,0x60,
    0x9e,0x81,0xcf,0x9f,0xc1,0xbe,0x8a,0xbb,0x26,0x43,0x3d,0xf2,0xde,0x14,0xfc,0x4a,
    0xb8,0x6f,0xa6,0x63,0xdb,0xce,0x5e,0xd4,0x82,0x2f,0x0f,0xea,0x24,0xe7,0xcf,0x47,
    0x4c,0xed,0x6e,0x85,0x18,0x1a,0x4b,0x9e,0x37,0x82,0x16,0x62,0x37,0xdf,0x47,0x9b,
    0x6c,0x7c,0xaa,0x4d,0x0d,0x0b,0xa9,0x61,0x81,0xa9,0x61,0x11,0xb8,0xd6,0xb0,0x18,
    0x4c,0x6b,0xa8,0x37,0x35,0x2c,0x4e,0xee,0x3a,0x97,0x60,0x92,0xb7,0xce,0xd4,0xb0,
    0x84,0xdc,0xde,0xd4,0xd0,0x00,0xae,0x35,0x8c,0xf7,0x11,0x53,0x3b,0xa9,0x41,0x63,
    0xd5,0x9b,0x1a,0x6a,0x7c,0xb4,0xc9,0xe0,0x53,0x67,0x6a,0x68,0xa4,0x86,0xa5,0xa6,
    0x86,0x65,0xe0,0x5a,0x43,0x13,0x98,0xd6,0xb0,0xc2,0xd4,0xd0,0x94,0xf0,0x71,0x09,
    0x26,0x79,0x97,0xd3,0x47,0x92,0xf7,0x71,0x72,0xd7,0xf8,0xfe,0xb3,0x2f,0x1c,0xd5,
    0x76,0x85,0xe1,0x58,0x8b,0x5d,0x3d,0x7e,0xcb,0xe1,0x23,0xf7,0xc3,0x53,0xdc,0x0d,
    0xda,0x73,0x4f,0xc3,0xb9,0xd9,0xf4,0xdc,0x6a,0xf0,0x0e,0x7a,0x6e,0x0d,0x58,0xad,
    0x8f,0x7e,0x72,0x5f,0xac,0xc3,0x6f,0x2d,0x7e,0xa2,0xe9,0xb3,0xe0,0xaa,0xfb,0xf3,
    0xf8,0x3a,0x83,0xad,0x07,0xf3,0x89,0x0e,0x39,0xc9,0x5d,0xb3,0x01,0xdb,0xf5,0xc4,
    0xd0,0x1c,0x2f,0x90,0x63,0xa3,0xc9,0xb1,0x09,0x7c,0x75,0xa8,0x55,0xee,0xca,0xcd,
    0xd4,0xb4,0x81,0xfb,0x69,0x93,0xd9,0x8f,0x2d,0xf8,0xb7,0x98,0xfd,0x78,0x11,0x5c,
    0xf7,0xe3,0x25,0x30,0xdd,0x8f,0x36,0xb3,0x1f,0xb2,0xd6,0x1a,0xc6,0x76,0x34,0xde,
    0x6e,0x62,0xbf,0x4e,0xec,0x76,0x13,0xbb,0x03,0x5c,0x63,0xef,0x00,0xd3,0xd8,0x9d,
    0x26,0xf6,0x8e,0xe4,0x4c,0xbb,0x04,0x93,0xd8,0x3b,0x8d,0x46,0xbb,0xa8,0x4b,0xee,
    0x97,0x23,0xc4,0x7a,0x13,0xbc,0x99,0x7d,0x57,0xbf,0x4e,0xf6,0x5d,0x6c,0xde,0x22,
    0xe7,0x76,0xec,0x77,0x92,0xb7,0xcb,0xe4,0x15,0x9b,0xdd,0x61,0x74,0xe1,0xbf,0xdb,
    0xe4,0x7d,0xdb,0xe4,0x6d,0x0c,0xb7,0xb9,0xec,0xcd,0x3b,0x60,0x9b,0xcd,0xfd,0x95,
    0x32,0x7b,0xb7,0x07,0x3f,0x1d,0x6f,0x85,0x58,0x82,0xef,0xc5,0x77,0x4f,0x12,0x6b,
    0x50,0xb2,0x57,0xfb,0x88,0xb3,0x97,0x3b,0x34,0x9b,0xef,0x60,0x9a,0x9a,0x94,0x53,
    0x17,0x35,0x89,0xcf,0x42,0x1f,0x7d,0x3a,0xf1,0xdf,0x8d,0x6d,0x1b,0xb6,0xad,0x86,
    0xff,0x2b,0xff,0xc1,0xff,0xd5,0xbb,0xf0,0xdf,0x8a,0x9f,0x8e,0x37,0xe0,0xbf,0x0d,
    0xdf,0xad,0x86,0xff,0x6b,0xc4,0xd9,0xf6,0x3f,0xfc,0x95,0x53,0x9b,0xe1,0xbf,0xc0,
    0xc7,0x1a,0xba,0xf0,0x6f,0x4d,0xfa,0x2f,0x7e,0x2b,0xde,0x65,0x7d,0x57,0x88,0x24,
    0xf3,0xfd,0x60,0xd5,0xbe,0xbf,0xcf,0xde,0xa3,0xcf,0x0e,0x98,0x3e,0x7b,0x1f,0x5c,
    0xfb,0xec,0x03,0x30,0xed,0xb3,0x43,0x66,0xbf,0x65,0xed,0x60,0x18,0x87,0xe0,0x76,
    0x10,0xbd,0x84,0xf7,0x87,0xe4,0x74,0xf8,0xdd,0xe2,0xfd,0xaf,0xf0,0x2e,0xb1,0x7e,
    0xc1,0x47,0x9e,0xa7,0xc9,0xf5,0x2b,0x7e,0x43,0xf1,0xb9,0x69,0x72,0xc9,0xda,0xb5,
    0x30,0xae,0xe3,0x77,0x3d,0xe9,0xc7,0x98,0xeb,0x06,0x7e,0xa3,0x5d,0xac,0x57,0xb0,
    0xdf,0xc1,0xe5,0x7b,0x3b,0x24,0xe8,0x95,0x93,0xc4,0x8c,0x7b,0x34,0x96,0xf5,0x22,
    0xb4,0xbd,0x45,0xcc,0x6b,0xc6,0xff,0x37,0x62,0xca,0xf7,0xd9,0xda,0x08,0xa7,0xdb,
    0x21,0xca,0x4d,0xb0,0x1b,0xc4,0x5e,0xe4,0x63,0xfc,0xeb,0xf8,0x5e,0xe3,0xfe,0x17,
    0xed,0x27,0xfb,0xb8,0xbe,0xdf,0xdc,0x57,0xe2,0x73,0x18,0x8d,0x3c,0xf5,0xe6,0xfb,
    0x7f,0x6b,0x74,0x9b,0x9c,0xb7,0x8d,0x46,0xde,0x47,0x3f,0xd5,0x68,0xb0,0xef,0xd7,
    0x48,0xd6,0x52,0x61,0x64,0x7b,0x7e,0x77,0xf0,0xfd,0x1a,0xe5,0xe2,0x67,0x35,0xca,
    0xf3,0x11,0xb7,0x1a,0x0d,0xf2,0xfd,0x1a,0xc9,0xba,0x6a,0x94,0x4f,0xcc,0x94,0xef,
    0xf7,0xcf,0x22,0xa6,0x6a,0xa4,0x36,0xc2,0x49,0x35,0x12,0x4c,0x35,0xaa,0xf3,0x31,
    0xbe,0xf0,0xca,0x82,0xab,0x6a,0x34,0xc5,0xc7,0xf5,0xc9,0xe4,0x57,0x8d,0x8e,0xa0,
    0x51,0x8a,0x7a,0x8b,0x07,0x68,0x34,0x9c,0x9c,0xf2,0x54,0x8d,0x46,0xf8,0xe8,0xa7,
    0x1a,0x15,0x19,0x8d,0x64,0xad,0x30,0x8c,0x51,0xf8,0x8d,0x32,0x1a,0x8d,0xc1,0xcf,
    0x6a,0x34,0xd6,0x47,0xdc,0x6a,0x74,0x9f,0xd1,0x68,0xac,0xd1,0xa8,0x98,0x98,0x85,
    0x46,0xa3,0x91,0xc4,0x54,0x8d,0xd4,0xa6,0xc8,0x68,0x54,0x6c,0x34,0x7a,0xd4,0xc7,
    0xf8,0xc2,0x6b,0x24,0x5c,0x55,0xa3,0x4a,0x1f,0xd7,0x45,0xab,0x14,0x39,0xf5,0xec,
    0x1d,0xa2,0x17,0xc5,0x6e,0x09,0xbd,0xd6,0x86,0x4f,0xb1,0x39,0xf3,0x1f,0x73,0xe6,
    0x8f,0x99,0x33,0xff,0x09,0xb8,0x9e,0xf9,0x4f,0xc1,0xf4,0xcc,0x9f,0x30,0xe7,0x50,
    0xd6,0x8e,0x87,0x71,0x92,0xbc,0x27,0xcd,0x77,0xeb,0x34,0xb1,0x4f,0x99,0xd8,0x9f,
    0x83,0x6b,0xec,0x2f,0xc0,0x34,0x76,0xb7,0x89,0x2d,0x6b,0x67,0xc2,0x38,0x4b,0xec,
    0xb3,0xe6,0x7b,0x7d,0x9e,0xd8,0xe7,0xcc,0xf7,0xfa,0x2b,0xf0,0xf3,0xdc,0xd1,0x5f,
    0x83,0x6d,0x34,0xf9,0xbe,0x01,0x6f,0x26,0x5f,0x8f,0xc9,0x27,0x6b,0x17,0xc2,0xe8,
    0x21,0xdf,0x05,0x73,0x66,0x67,0xfa,0xf8,0x77,0xc2,0x12,0xf3,0x3b,0x9b,0xda,0xf5,
    0x18,0xad,0x1b,0x7c,0xb4,0x39,0x8b,0xcf,0x05,0xc3,0xe7,0x3b,0xf8,0x5c,0x34,0x7c,
    0xbe,0x07,0x57,0x3e,0xbd,0x86,0x8f,0xac,0x5d,0x0a,0xa3,0x97,0x3c,0x97,0x0c,0x9f,
    0xd9,0xf0,0x69,0x30,0x7b,0xaf,0x76,0xbd,0x86,0xcf,0x63,0x3e,0xda,0xf4,0xe0,0x73,
    0xc9,0xf0,0xf9,0x01,0x3e,0xed,0x86,0xcf,0x8f,0xe0,0xca,0xa7,0xcf,0xf0,0x91,0xb5,
    0xcb,0x61,0xf4,0x91,0xe7,0xb2,0xe1,0x33,0xd7,0xc7,0xbf,0x93,0x24,0x9f,0x7e,0xa3,
    0xd4,0xae,0xcf,0xf0,0x59,0xe6,0xa3,0x4d,0x2f,0x3e,0x97,0xb1,0xed,0xc6,0xf6,0x8c,
    0x39,0xeb,0x5f,0xa2,0x77,0xda,0xe4,0x99,0xee,0xfb,0x71,0x37,0xc0,0xb7,0xdb,0xe4,
    0x69,0xf4,0x31,0x57,0x1f,0x3e,0x67,0xb0,0x3d,0x81,0xed,0x71,0xbe,0xb5,0x62,0xfb,
    0x19,0xf1,0x64,0xe8,0xff,0x8c,0x52,0xe6,0x5b,0xab,0x3e,0x27,0x4c,0xfc,0xa5,0x3e,
    0xe6,0xe8,0xc6,0x5f,0xe2,0xcd,0x0b,0x1e,0x57,0x59,0xfb,0x3b,0x74,0xc9,0x9c,0x30,
    0xfe,0x01,0x0b,0xa2,0xef,0xf7,0xe4,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture3D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
