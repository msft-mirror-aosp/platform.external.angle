// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000049.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000049[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x95,0xef,0x4f,0x95,0x65,
    0x18,0xc7,0xef,0x73,0x9e,0x73,0x78,0x10,0x02,0xe4,0x87,0x20,0x2d,0xb5,0x14,0x36,
    0x1b,0x0a,0x67,0x0b,0x0d,0x21,0x59,0x0e,0xb5,0x46,0x24,0x9a,0xcd,0x37,0xad,0xb9,
    0x1a,0x5a,0xc2,0xb2,0x16,0x2c,0x28,0xa1,0x10,0xca,0x74,0xf9,0x02,0x2b,0x78,0x91,
    0x56,0xb0,0xc6,0xac,0x69,0xb0,0x0a,0x5e,0x14,0x4c,0x5f,0xb4,0xd5,0x9b,0xd6,0x5a,
    0xa9,0x2b,0xcd,0x66,0x7f,0x44,0x69,0x6d,0x6d,0xdd,0xd7,0x7d,0x3e,0x97,0x5d,0x3b,
    0xcb,0x79,0xb6,0x7b,0xcf,0xb9,0xbf,0xd7,0xaf,0xef,0xf7,0xba,0xaf,0xe7,0x7e,0xa2,
    0xe4,0x9a,0xd8,0xb9,0x84,0x2b,0x70,0xf9,0xee,0x77,0x97,0xfd,0x95,0xba,0xa4,0x47,
    0x9c,0x2b,0x74,0x79,0xe1,0xf9,0x50,0xc7,0xee,0x8e,0xfa,0xde,0xbe,0xae,0xfa,0xc6,
    0x0d,0x19,0xb1,0x17,0xbb,0x28,0xf8,0x89,0xad,0xc4,0xc5,0x2e,0xe5,0x9f,0xb2,0x9e,
    0x7b,0xea,0xc0,0x41,0xc1,0x8b,0xfc,0x3a,0xef,0xd7,0x52,0xef,0x27,0x78,0x2c,0x39,
    0xfc,0xbf,0xa2,0x90,0x53,0x62,0x9c,0x7b,0xd8,0xa5,0x5d,0x39,0xf5,0xd6,0xf0,0x54,
    0x2c,0x01,0x96,0x6f,0xb0,0x24,0xd8,0x52,0x83,0x45,0x60,0x15,0x06,0x4b,0x81,0x2d,
    0x37,0x58,0x1a,0xec,0x2e,0x83,0xe5,0x81,0xdd,0x6d,0xb0,0x18,0xac,0xc6,0x60,0xf9,
    0x60,0x6b,0x0d,0xb6,0x04,0x6c,0x9d,0xc1,0x0a,0xc0,0x32,0x06,0x2b,0x04,0x6b,0x34,
    0xd8,0x1d,0x60,0x4d,0x06,0x2b,0x02,0x7b,0xc0,0x60,0xc5,0x60,0x0f,0x86,0xde,0x45,
    0x37,0x7b,0x20,0x7d,0xdc,0xe5,0x9f,0xab,0xe9,0x99,0xee,0xef,0x31,0x7b,0xe9,0xfd,
    0x4a,0xf6,0xe5,0x3e,0x2a,0x19,0xec,0x51,0xe8,0x97,0xfc,0x5f,0xe6,0x7d,0xf2,0xd0,
    0x2e,0xbd,0xae,0xf2,0xfb,0x98,0x9e,0x88,0xbd,0xd2,0x7b,0x16,0x60,0x17,0x5b,0x21,
    0xfa,0x52,0x01,0x4b,0x05,0x0d,0x09,0xf4,0xb5,0xb0,0x2f,0x32,0xb9,0x8a,0xf1,0xd7,
    0x5a,0x65,0xe4,0x72,0x81,0x57,0xe9,0xcd,0x5e,0x6b,0x4d,0x5d,0x65,0xb7,0x59,0xea,
    0x23,0x1c,0x2a,0x38,0x87,0x72,0x38,0x54,0x84,0x5a,0x59,0xac,0x0e,0x7d,0x95,0x70,
    0x12,0xff,0x2a,0x6c,0xb1,0xb1,0xaf,0x60,0x36,0xc4,0xbe,0x12,0x7b,0x59,0x98,0xa7,
    0x64,0xe8,0x67,0x1d,0xdc,0xb5,0xd7,0x1a,0x57,0x07,0x17,0xdd,0x6f,0xe4,0xbc,0x44,
    0x7b,0x2b,0x39,0x52,0x61,0x3e,0xe2,0xb0,0xdf,0x42,0x0e,0xbb,0x34,0xb6,0x2d,0x27,
    0x77,0xbb,0xe9,0xf3,0x23,0x70,0x12,0xbc,0xda,0xff,0xeb,0x24,0x77,0xc2,0xfd,0xf7,
    0x4b,0x98,0xbd,0xc4,0xec,0xe4,0x7f,0x27,0x7d,0x91,0xfd,0xae,0x9c,0x1a,0xfb,0xe9,
    0x83,0xf0,0x7d,0x81,0x9c,0x91,0xb1,0x0f,0x30,0xf7,0x62,0x3f,0x4e,0xfd,0x94,0xb1,
    0x9f,0xc8,0xe9,0xf3,0x29,0xce,0x5b,0xf7,0xa7,0x99,0x07,0xdd,0x9f,0x61,0x16,0x84,
    0xdf,0x39,0x6a,0x1d,0x87,0xdf,0x39,0xee,0x8a,0x28,0xf4,0x31,0x1d,0xfc,0x52,0xf0,
    0x15,0xec,0x86,0x47,0xe4,0x8c,0x36,0x33,0x87,0x25,0xe4,0xee,0xf4,0x0a,0x8a,0xb9,
    0x0f,0x4a,0x58,0xda,0x8f,0x83,0xcc,0x73,0x29,0xf6,0x2d,0x3e,0x43,0x15,0x77,0xc2,
    0x32,0xe6,0x62,0x33,0x3e,0xd5,0xe0,0x23,0xde,0x47,0xf6,0x77,0x12,0x57,0x4d,0x9c,
    0xcc,0xc5,0x2a,0xe2,0x56,0x10,0xa7,0xf3,0xbc,0x2a,0x68,0x4b,0x87,0x59,0xd1,0xbb,
    0x44,0xce,0xf6,0xba,0x67,0x5e,0x0b,0x9f,0xbf,0xbd,0xbf,0xde,0x29,0xb5,0xe8,0xa9,
    0x09,0x67,0x92,0x0e,0xbd,0x59,0x4b,0x4d,0xf9,0xbd,0x4a,0xbf,0xee,0x05,0x7f,0xcc,
    0xef,0x84,0xd3,0xd7,0x60,0xea,0xf7,0x97,0xcf,0xa1,0xb9,0xe4,0xf9,0x87,0xf7,0x12,
    0xbf,0x9f,0xf0,0x49,0x13,0x53,0x63,0x34,0xac,0x43,0x43,0x9d,0xd1,0xb0,0x1e,0x5c,
    0x35,0xd4,0x83,0xa9,0x86,0x8c,0xd1,0x20,0xb6,0x06,0xee,0x37,0xa9,0xdb,0x60,0x34,
    0xdc,0x47,0xed,0x84,0xd1,0xd0,0x08,0xae,0x1a,0xbe,0x01,0x53,0x3f,0xd1,0xa0,0xb9,
    0x32,0x46,0xc3,0x05,0x7c,0x6a,0x89,0x69,0x30,0x1a,0xee,0x47,0xc3,0x46,0xa3,0xa1,
    0x09,0x5c,0x35,0x6c,0x02,0x53,0x0d,0x2d,0x46,0x83,0xd8,0x9a,0xc3,0xdc,0x65,0xeb,
    0x36,0x33,0x47,0x71,0xc8,0x97,0xad,0x7d,0xc1,0xbc,0x4f,0xc2,0x51,0x7d,0x5b,0x0c,
    0xc7,0x6b,0xf8,0x65,0x88,0x6b,0xc6,0x77,0x2b,0xbe,0x5b,0xf1,0x95,0x77,0xff,0x12,
    0xef,0xbf,0xc4,0x3f,0xe9,0xd7,0x36,0x6c,0xd2,0xa3,0x8b,0xbc,0xff,0x62,0xdb,0x8b,
    0x4d,0xb4,0xca,0x7b,0xdf,0x81,0xd6,0x76,0xb4,0x8a,0xff,0xa3,0xe0,0x9f,0xa1,0x75,
    0x07,0x39,0x04,0xff,0xd3,0xfb,0x6c,0x27,0x87,0xea,0xdd,0xc1,0x7e,0x3b,0xbc,0xb6,
    0x91,0xab,0x33,0x9c,0x4b,0xf6,0x5e,0xd0,0x77,0x63,0x37,0xf5,0xda,0xcc,0xbb,0xf1,
    0x38,0xf8,0x30,0xef,0xc6,0x1e,0xb0,0x6b,0x81,0x6f,0x56,0xdf,0x13,0xe4,0xda,0xc3,
    0xb7,0xea,0x22,0xfe,0xad,0xe8,0xbd,0x84,0xcf,0x30,0xb3,0xb2,0x17,0x9f,0xca,0x9c,
    0x9e,0x09,0xc7,0x41,0xce,0xf4,0x69,0x34,0xed,0xa4,0x46,0x17,0x98,0x5d,0x47,0xa8,
    0xb1,0x8f,0x1a,0x5d,0x66,0x4e,0x9e,0x41,0xcb,0x7e,0x33,0x27,0xcf,0x82,0xeb,0x9c,
    0x1c,0x00,0xd3,0x39,0xe9,0x31,0x7d,0x13,0x5b,0xb7,0x5f,0xfd,0x70,0xeb,0x66,0xd6,
    0x25,0xcf,0xf3,0xd4,0x8c,0xc2,0xec,0xe4,0x87,0xfb,0xf3,0x45,0xb0,0x7d,0xe6,0x0e,
    0x4a,0x06,0xfe,0x79,0xc1,0xde,0x4b,0x9c,0xae,0xd7,0x7d,0x2e,0xc1,0xfb,0x88,0xed,
    0x0d,0xb9,0x96,0x04,0x3d,0x2f,0x91,0xa7,0x8f,0x7b,0x30,0xcd,0xfd,0x1b,0xd1,0xaf,
    0x1e,0x38,0xf5,0x1b,0xbd,0x2f,0xa3,0x77,0xc0,0xe8,0x7d,0x05,0x5c,0xf5,0x1e,0x02,
    0x53,0xbd,0x43,0x46,0xef,0xa1,0xd0,0x7b,0x17,0x30,0xc9,0x3d,0x68,0xf4,0xbe,0x66,
    0xf4,0x9e,0x25,0xd7,0x30,0xf8,0x6a,0x38,0x69,0xdc,0x10,0xb3,0x2d,0x3e,0x87,0xa9,
    0xd9,0x8f,0xff,0x20,0x75,0x47,0x4d,0xdd,0xc3,0xe1,0xde,0x75,0x01,0x93,0xf8,0x11,
    0x53,0xf7,0x8d,0xff,0xe9,0xf3,0x9b,0xb7,0xe9,0xf3,0x51,0xe2,0x74,0x1d,0xa1,0xcf,
    0xc7,0x88,0x3d,0x6a,0xfa,0xfc,0x16,0x79,0x8e,0xdd,0xa2,0xcf,0xca,0x69,0xd4,0xbc,
    0xcb,0xbf,0x10,0x33,0x44,0xfc,0x48,0xce,0x99,0xf4,0x18,0xdf,0x9f,0x39,0xcb,0x6e,
    0xe2,0x46,0x99,0x6f,0xf9,0xee,0x8d,0x61,0xd7,0xf3,0x7b,0x9b,0xf3,0x3b,0x61,0xce,
    0xef,0x1d,0x70,0x3d,0xbf,0x77,0xc1,0xf4,0xfc,0x26,0x4c,0x1f,0xc5,0x36,0xee,0xd7,
    0x49,0x78,0x8c,0xa3,0x53,0x6a,0xbd,0x47,0xbd,0x31,0x74,0xc6,0xf4,0x4c,0x75,0x4e,
    0x10,0x73,0xd2,0xf0,0x79,0x1f,0x3e,0xa7,0x0c,0x9f,0x0f,0xc0,0x95,0xcf,0x87,0x60,
    0xca,0x67,0xca,0xf0,0x11,0xdb,0xa4,0x5f,0xd3,0xe4,0x9e,0x34,0xdf,0x8a,0x8f,0xe0,
    0x12,0xf1,0x6d,0x10,0x8e,0xdf,0x19,0x5c,0xef,0xdd,0x29,0x62,0xa7,0xcd,0x9d,0xf8,
    0x31,0xbc,0x4e,0x9b,0x3b,0xf1,0x13,0xf0,0x6f,0xc9,0x7f,0x16,0xec,0x8c,0xe1,0xfa,
    0x29,0x78,0x1b,0x5c,0x67,0x0d,0x57,0xb1,0xcd,0xf8,0x35,0x4b,0xbd,0x19,0xc3,0xeb,
    0x7b,0x62,0xc6,0xcc,0x37,0x4b,0xfd,0x66,0x39,0x6b,0xf1,0xbb,0x8c,0xcf,0x34,0x31,
    0x33,0x86,0xcf,0xe7,0xf0,0x69,0x37,0x7c,0xbe,0x00,0x57,0x3e,0xf3,0x86,0x8f,0xd8,
    0xe6,0xfc,0x9a,0xa7,0xce,0x9c,0xe1,0xf3,0x03,0x31,0x97,0x39,0x43,0xe1,0xa3,0x7e,
    0xf3,0x86,0xcf,0x15,0x7c,0x66,0x89,0x99,0x33,0x7c,0xbe,0x84,0xcf,0x80,0xe1,0xf3,
    0x15,0xb8,0xf2,0x59,0x34,0x7c,0xc4,0xb6,0xe0,0xd7,0x22,0x75,0x16,0x0c,0x9f,0x1f,
    0xb9,0xc7,0xaf,0x98,0x79,0x52,0xbf,0x45,0xc3,0xe7,0x37,0x7c,0xe6,0x89,0x59,0xc8,
    0x39,0xe3,0x29,0xe3,0x7b,0x95,0x79,0x98,0x24,0x6e,0x31,0x67,0x4e,0x27,0x8c,0xef,
    0xaf,0xcc,0xf7,0x38,0x71,0x92,0xa7,0xd5,0x33,0x39,0x8f,0xed,0x1f,0x7f,0x6a,0x4d,
    0x7e,0xfd,0x0b,0xb5,0x47,0xfa,0x2d,0xe4,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DMS src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = uvec4(0);
//     for(int i = 0;i < params . srcSampleCount;i ++)
//     {
//         srcValue += texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), i);
//     }
//     srcValue /= params . srcSampleCount;
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
