// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000000A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000000A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xff,0x4f,0xd5,0x55,
    0x18,0xc7,0x0f,0xf7,0xc3,0xbd,0x17,0x21,0x40,0xbe,0x28,0xe1,0x52,0x4b,0x65,0xab,
    0x61,0x40,0x8b,0x8c,0x20,0x5d,0x64,0x64,0x1a,0x4a,0x0a,0x3f,0xd4,0xd2,0x09,0x25,
    0x2c,0x83,0x58,0x9a,0x3f,0x9a,0x42,0x6b,0x6a,0x05,0x6b,0xcc,0x5a,0xc1,0xa6,0xc1,
    0x0f,0x05,0xb3,0xb6,0xb6,0x7e,0x6a,0xad,0x95,0x8e,0xd4,0xea,0xff,0x69,0x7d,0xd9,
    0xda,0x3a,0xcf,0xe1,0xf5,0xb8,0x77,0x77,0x35,0xef,0x76,0x76,0xef,0x79,0x3f,0xdf,
    0xde,0xef,0xe7,0x39,0xe7,0xec,0x66,0xb9,0xed,0xc5,0x10,0xca,0x42,0x65,0xa8,0x08,
    0xbf,0x86,0xb5,0x4f,0x5d,0xc8,0x45,0x24,0x84,0xaa,0x50,0x48,0xdf,0xfb,0xfa,0x07,
    0xfb,0xdb,0xde,0x3a,0x73,0xa2,0xad,0xf3,0xb1,0x0e,0xb3,0xd7,0x84,0x2c,0xf9,0x99,
    0xad,0x36,0x14,0x43,0x79,0xfc,0xb6,0xf5,0xc6,0xc8,0xc9,0x49,0xc3,0xab,0xe3,0xfa,
    0x32,0xae,0xf5,0xd1,0xcf,0xf0,0xa2,0xe5,0x88,0xbf,0xaa,0x53,0x4e,0x8b,0x09,0xe1,
    0xb9,0x90,0x0f,0x0d,0xd4,0xdb,0xce,0xb7,0x63,0x65,0x60,0x15,0x82,0xe5,0xc0,0xd6,
    0x0b,0x96,0x81,0x35,0x0a,0x56,0x0e,0x76,0xaf,0x60,0x79,0xb0,0xfb,0x04,0x2b,0x80,
    0xdd,0x2f,0x58,0x11,0x6c,0x87,0x60,0x15,0x60,0x0f,0x0a,0xb6,0x0e,0x6c,0xa7,0x60,
    0x95,0x60,0x1d,0x82,0x55,0x81,0x75,0x0a,0x76,0x0f,0x58,0x97,0x60,0xd5,0x60,0x4f,
    0x0a,0x56,0x03,0xf6,0x54,0xea,0x5d,0x76,0xa7,0x07,0xd6,0xc7,0xbd,0xf1,0x7b,0x1b,
    0x3d,0xf3,0xfd,0x03,0xb2,0xb7,0xde,0x6f,0x61,0xdf,0x10,0xa3,0x72,0xc9,0x9e,0xa5,
    0x7e,0xd9,0xef,0x0d,0xd1,0xa7,0x80,0x76,0xeb,0x75,0x53,0xdc,0x17,0xe9,0x89,0xd9,
    0x37,0x46,0xcf,0x4a,0xec,0x66,0xab,0x42,0x5f,0x79,0xc2,0xca,0x93,0x86,0x32,0xf4,
    0xf5,0xb0,0xaf,0x96,0x5c,0x35,0xf8,0x7b,0xad,0x7a,0x72,0x85,0xc4,0xab,0xee,0x4e,
    0xaf,0xbd,0xa6,0xaf,0xfa,0xbb,0x2c,0xf7,0x31,0x0e,0x8d,0xcc,0xa1,0x01,0x0e,0x8d,
    0xa9,0xd6,0x1a,0xd6,0x8a,0xbe,0x8d,0x70,0x32,0xff,0x26,0x6c,0x45,0xb1,0x6f,0xe6,
    0x6c,0x98,0x7d,0x0b,0xf6,0xfa,0x74,0x9e,0x72,0xa9,0x9f,0xad,0x70,0xf7,0x5e,0x7b,
    0x5c,0x2b,0x5c,0xdc,0xfe,0x08,0x75,0xdc,0xbe,0x8b,0xf9,0x59,0x2f,0xf6,0x90,0xd3,
    0x7a,0xd7,0x1c,0x2b,0xf4,0xb2,0x2f,0x0b,0xff,0xfe,0xf8,0xde,0xb8,0x3c,0xcd,0xef,
    0x5e,0xb4,0xd9,0x7e,0x6f,0x09,0x87,0xbe,0x92,0xfd,0x01,0xfa,0x6d,0xf1,0xcf,0xa3,
    0xa5,0x20,0xf6,0x01,0xb4,0x1b,0xa7,0x97,0xe0,0x90,0x89,0x7d,0x84,0xb3,0xee,0xfb,
    0xb3,0x25,0xbd,0xbc,0xc4,0x4c,0x7d,0x7f,0x99,0x99,0xfb,0xfe,0x8a,0x9c,0x8f,0x6b,
    0xe4,0xde,0x03,0xff,0x6b,0xbc,0x07,0x59,0xea,0x4d,0x3e,0xf1,0x2c,0x87,0xbf,0x61,
    0x7f,0x44,0xc4,0xe6,0xb0,0x9b,0xb3,0x56,0x4b,0xee,0x81,0xc8,0xb8,0x86,0x3b,0x5f,
    0xcb,0xf2,0x5e,0x4d,0x72,0x66,0xeb,0xb0,0xf7,0xc6,0x0c,0x4d,0xdc,0xfb,0x0d,0xcc,
    0x7e,0x37,0x3e,0xcd,0xe0,0xef,0x44,0x1f,0xdb,0x6f,0x22,0xae,0x99,0x38,0x9b,0xfd,
    0x56,0xe2,0x36,0x13,0xe7,0x67,0x76,0x6b,0xe2,0x9e,0x4f,0xe7,0xc1,0xdf,0x0b,0x3b,
    0x0f,0xbf,0x47,0xe6,0x2d,0xf0,0xf9,0x2b,0xfa,0xfb,0xbb,0xd1,0x82,0x1e,0xfb,0x7d,
    0x38,0xc6,0x15,0x78,0x3b,0x36,0xe1,0x7b,0x8e,0x7e,0x3d,0x04,0x7e,0x24,0xee,0x8c,
    0xd3,0xd7,0x60,0xee,0xf7,0x67,0xcc,0xe1,0xb9,0xec,0xfb,0xb7,0xe8,0x65,0x7e,0x3f,
    0xe2,0x93,0x27,0x66,0x87,0x68,0xd8,0x89,0x86,0x56,0xd1,0xf0,0x30,0xb8,0x6b,0x68,
    0x03,0x73,0x0d,0x1d,0xa2,0xc1,0x6c,0xed,0xbc,0x61,0x56,0xb7,0x5d,0x34,0x3c,0x4a,
    0xed,0x32,0xd1,0xd0,0x09,0xee,0x1a,0xbe,0x01,0x73,0x3f,0xd3,0xe0,0xb9,0x3a,0x44,
    0xc3,0x75,0x7c,0x5a,0x88,0x69,0x17,0x0d,0x8f,0xa3,0x61,0x97,0x68,0xe8,0x02,0x77,
    0x0d,0x4f,0x80,0xb9,0x86,0x1e,0xd1,0x60,0xb6,0xee,0x74,0xee,0xd6,0xea,0x76,0x73,
    0x8e,0x8a,0x29,0xdf,0x5a,0xed,0xeb,0x72,0xdf,0x8c,0xa3,0xfb,0xf6,0x08,0xc7,0x1b,
    0xf8,0x75,0x10,0xd7,0x0d,0x1f,0xbb,0x93,0xcf,0x70,0x1f,0xfd,0xcc,0x3d,0x0b,0xe7,
    0x3e,0x39,0x73,0xfb,0xc0,0xa7,0x38,0x73,0xfb,0xc1,0x6e,0x10,0x67,0x77,0xb4,0x9f,
    0xb8,0x03,0xc4,0x59,0x4f,0x0f,0x82,0x1f,0x8f,0x51,0x76,0x7f,0x0e,0x51,0x6f,0x3f,
    0xf7,0xfb,0xa0,0xf4,0xea,0x05,0xe2,0x07,0xa4,0x57,0x87,0xc1,0xbd,0x57,0x47,0xc0,
    0xbc,0x57,0x43,0xd2,0x2b,0xb3,0x0d,0xc6,0x35,0x8c,0xfe,0x41,0xe6,0x6d,0x79,0x5e,
    0xa4,0x76,0x96,0xf2,0x57,0xa4,0x37,0xe3,0x65,0xb0,0x43,0x72,0x0f,0x73,0xa9,0x5e,
    0x21,0xd9,0x8f,0x12,0xe7,0xeb,0xdd,0x98,0xcb,0xf0,0x63,0xc4,0x1e,0x4d,0xb9,0xd6,
    0x25,0x5d,0xc7,0xc9,0x73,0x8c,0xb7,0x20,0xcf,0x7b,0x95,0x31,0x93,0x21,0x38,0x0d,
    0x8b,0xde,0x57,0xd0,0x3b,0x22,0x7a,0x5f,0x05,0x77,0xbd,0x27,0xc0,0x5c,0xef,0x98,
    0xe8,0x35,0xdb,0x68,0x5c,0x63,0xe4,0x1e,0x15,0xbd,0xaf,0x89,0xde,0xaf,0xc8,0x75,
    0x12,0x7c,0x1b,0x9c,0x3c,0x6e,0x8c,0x73,0x62,0x3e,0xaf,0x53,0x73,0x18,0xff,0x51,
    0xea,0x4e,0x48,0x5d,0xf3,0x19,0x8f,0x6b,0x82,0xf8,0x71,0xa9,0x3b,0xf9,0x1f,0x7d,
    0x7e,0xf3,0x2e,0x7d,0x3e,0x45,0x9c,0xaf,0x0b,0xf4,0xf9,0x34,0xb1,0xa7,0xa4,0xcf,
    0x67,0xc8,0x73,0xfa,0x7f,0xfa,0xec,0x9c,0x26,0xd0,0x64,0x31,0x3f,0x11,0x33,0x46,
    0xfc,0x78,0xc9,0x4c,0x86,0xc4,0x77,0x95,0x59,0x0e,0x12,0x37,0x21,0xf3,0x7a,0x9b,
    0x79,0x9d,0x95,0x79,0x9d,0x03,0xf7,0x79,0x9d,0x07,0xf3,0x79,0x4d,0x4b,0xdf,0xce,
    0xa7,0xfb,0x13,0xc2,0x45,0xea,0x4e,0x89,0xae,0x0b,0xd4,0x5e,0x45,0x57,0x91,0x1e,
    0xb9,0xae,0x69,0x62,0x2e,0x0a,0x9f,0xf7,0xe0,0x73,0x49,0xf8,0xbc,0x0f,0xee,0x7c,
    0x3e,0x00,0x73,0x3e,0xb3,0xc2,0xc7,0x6c,0x33,0x71,0xcd,0x91,0x7b,0x46,0xe6,0xf8,
    0x21,0x5c,0x32,0xde,0x43,0xe3,0xf8,0xad,0xe0,0xfe,0xd6,0xcc,0x12,0x3b,0x27,0xef,
    0xc0,0x47,0xf0,0xba,0x2c,0xef,0xc0,0xc7,0xe0,0xb7,0x79,0x7f,0x3f,0x01,0x3b,0x20,
    0x5c,0x3f,0x05,0xef,0x83,0xeb,0x82,0x70,0x35,0xdb,0x7c,0x5c,0x0b,0xd4,0x9b,0x17,
    0x5e,0xdf,0xa1,0x6f,0x55,0xde,0x69,0xf7,0x5b,0x90,0xd9,0xde,0xc4,0x67,0x8e,0x98,
    0x79,0xe1,0x73,0x15,0x3e,0x57,0x84,0xcf,0x67,0xe0,0xce,0x67,0x49,0xf8,0x98,0x6d,
    0x31,0xae,0x25,0xea,0x2c,0x0a,0x9f,0xef,0xe1,0x73,0x93,0x19,0x1a,0x1f,0xf7,0x5b,
    0x12,0x3e,0xb7,0xf0,0x59,0x20,0x66,0x51,0xf8,0x7c,0x0e,0x9f,0x11,0xe1,0xf3,0x05,
    0xb8,0xf3,0x59,0x11,0x3e,0x66,0x5b,0x8e,0x6b,0x85,0x3a,0xcb,0xc2,0xe7,0x07,0xfe,
    0xd3,0xdd,0x92,0xf3,0xe4,0x7e,0x2b,0xc2,0xe7,0x17,0x7c,0x96,0x88,0x59,0x2e,0x99,
    0xf1,0xac,0xf8,0xfe,0xcc,0x79,0x98,0x21,0x6e,0xa5,0xe4,0x9c,0x4e,0x8b,0xef,0x6d,
    0xce,0xf7,0x14,0x71,0xb3,0xe9,0xbf,0x54,0x96,0xfe,0x43,0x99,0xed,0xef,0x38,0xb5,
    0xae,0xb8,0xfe,0x01,0xec,0x3a,0xba,0x9d,0xbc,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
