// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000045.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000045[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd5,0x65,
    0x18,0xc7,0x7f,0x87,0xc3,0xe1,0x20,0x04,0xc8,0x83,0x10,0x2d,0xb5,0x12,0x36,0x1b,
    0x04,0x6c,0x91,0x11,0x24,0x8b,0xa6,0xd6,0x88,0x44,0xb3,0xf9,0xa6,0x35,0xd7,0xc4,
    0x0a,0x36,0x59,0x9a,0x50,0xc1,0x52,0xe8,0x41,0xd6,0x4b,0x2b,0x78,0x91,0x56,0xb0,
    0xc6,0xac,0x99,0xb0,0x0a,0x5e,0x94,0xcc,0x5e,0xb4,0xd5,0x9b,0xd6,0x5a,0xa9,0x23,
    0xad,0x66,0x7f,0x44,0x8f,0x5b,0x5b,0xf7,0x75,0x9f,0xcf,0x65,0xdf,0x9d,0xd5,0x3c,
    0xdb,0xbd,0xdf,0xef,0xfe,0x5e,0x4f,0xdf,0xef,0x75,0x5f,0xbf,0x1b,0xd2,0x05,0x9b,
    0xb2,0x49,0x92,0x4a,0x4a,0x92,0xe2,0xe4,0x97,0x24,0xf7,0xab,0x4c,0x0a,0x02,0x92,
    0x24,0xa5,0x49,0x51,0x7c,0x3e,0xd0,0xb7,0xa7,0xaf,0xe5,0xd9,0x23,0x03,0x2d,0xed,
    0x77,0xb5,0x99,0xbd,0x3c,0x49,0x47,0x3f,0xb3,0x55,0x24,0xd9,0xa4,0x30,0x3c,0x6d,
    0x1d,0x7c,0x62,0x70,0xd8,0xf0,0xb2,0xb0,0x3e,0x0f,0x6b,0x6d,0xf0,0x33,0x3c,0x6b,
    0x39,0xc2,0x5b,0x59,0xcc,0x69,0x31,0x49,0xf2,0x60,0x92,0x49,0xaa,0xa9,0xb7,0x89,
    0xa7,0x63,0x29,0xb0,0x62,0xc1,0x0a,0xc0,0xd6,0x0a,0x96,0x06,0xab,0x11,0xac,0x10,
    0xec,0x46,0xc1,0x32,0x60,0x37,0x0b,0x56,0x04,0x76,0x8b,0x60,0x59,0xb0,0x06,0xc1,
    0x8a,0xc1,0x36,0x0b,0xb6,0x06,0xac,0x59,0xb0,0x12,0xb0,0x36,0xc1,0x4a,0xc1,0xda,
    0x05,0xbb,0x01,0xac,0x43,0xb0,0x32,0xb0,0x7b,0x05,0x2b,0x07,0xbb,0x2f,0xf6,0x2e,
    0x7d,0xad,0x07,0xd6,0xc7,0xdd,0xe1,0x79,0x1b,0x3d,0xf3,0xfd,0xad,0xb2,0xb7,0xde,
    0x6f,0x60,0x5f,0x1d,0xa2,0x0a,0xa2,0x3d,0x1d,0xfb,0x65,0xef,0xeb,0x82,0x4f,0x11,
    0xda,0xad,0xd7,0x75,0x61,0x9f,0xa5,0x27,0x66,0xaf,0x0d,0x9e,0x25,0xd8,0xcd,0x56,
    0x8a,0xbe,0xc2,0x88,0x15,0x46,0x0d,0x29,0xf4,0x75,0xb1,0x2f,0x93,0x5c,0xe5,0xf8,
    0x7b,0xad,0x2a,0x72,0x25,0x91,0x57,0xe5,0xb5,0x5e,0x7b,0x4d,0x5f,0x55,0xd7,0x59,
    0xee,0x63,0x1c,0x6a,0x38,0x87,0x6a,0x38,0xd4,0xc4,0x5a,0x39,0xac,0x09,0x7d,0xb5,
    0x70,0x32,0xff,0x3a,0x6c,0x59,0xb1,0xaf,0x67,0x36,0xcc,0xbe,0x01,0x7b,0x55,0x9c,
    0xa7,0x82,0xd8,0xcf,0x26,0xb8,0x7b,0xaf,0x3d,0xae,0x09,0x2e,0xbe,0xdf,0xc2,0x79,
    0x99,0xf6,0x6e,0x6c,0x85,0x62,0xef,0x21,0xbe,0x39,0x54,0x37,0xfb,0xfd,0x60,0xba,
    0xdc,0xb7,0x57,0xfa,0xfc,0x10,0x9c,0x0c,0xaf,0x0f,0x6f,0xfd,0xbc,0xa7,0x92,0x7f,
    0x7f,0x29,0xd9,0x5b,0xcc,0x2e,0xde,0xfb,0xe9,0x8b,0xed,0x77,0xe7,0xf1,0x3f,0x40,
    0x1f,0x8c,0xef,0x30,0x39,0xd3,0x62,0x1f,0x65,0xee,0x7d,0x7f,0x22,0xaf,0xaf,0xa7,
    0x38,0x5f,0xdf,0x9f,0xe6,0xfc,0x7d,0x7f,0x86,0xb3,0x37,0x3e,0xe7,0xc9,0xdd,0x0d,
    0x9f,0xf3,0xdc,0x0d,0xe9,0xd8,0xb7,0x4c,0xf4,0x2b,0x84,0x9f,0x61,0x7f,0x04,0xc4,
    0xce,0x64,0x2b,0x73,0x57,0x41,0xee,0xfe,0xc0,0xb8,0x9c,0xef,0xbf,0x82,0xe5,0xfa,
    0x87,0x99,0xdf,0x4a,0xec,0x3d,0x21,0x43,0x1d,0x77,0xc0,0x3a,0xe6,0x60,0x2b,0x3e,
    0xf5,0xe0,0x2f,0x05,0x1f,0xdb,0xdf,0x44,0x5c,0x3d,0x71,0x36,0x07,0x1b,0x89,0x5b,
    0x4f,0x9c,0xcf,0xef,0xc6,0xa8,0x2d,0x13,0x67,0xc3,0xef,0x0e,0x9b,0x8d,0xdf,0x03,
    0xf3,0x46,0xf8,0xfc,0x15,0xfc,0xfd,0x0e,0x69,0x44,0x4f,0x43,0x3c,0x83,0x4c,0xec,
    0xcd,0x66,0x6a,0xda,0xef,0x28,0xfd,0xba,0x1d,0xfc,0x91,0xb0,0x33,0x4e,0x5f,0x80,
    0xb9,0xdf,0x9f,0x21,0x87,0xe7,0xb2,0xe7,0xaf,0xc1,0xcb,0xfc,0xbe,0xc7,0x27,0x43,
    0x4c,0x83,0x68,0x68,0x46,0x43,0x93,0x68,0xb8,0x03,0xdc,0x35,0xb4,0x80,0xb9,0x86,
    0x36,0xd1,0x60,0xb6,0x56,0xee,0x33,0xab,0xdb,0x2a,0x1a,0xee,0xa4,0x76,0x4a,0x34,
    0xb4,0x83,0xbb,0x86,0x2f,0xc1,0xdc,0xcf,0x34,0x78,0xae,0x36,0xd1,0x70,0x01,0x9f,
    0x46,0x62,0x5a,0x45,0xc3,0xdd,0x68,0xd8,0x22,0x1a,0x3a,0xc0,0x5d,0xc3,0x3d,0x60,
    0xae,0xa1,0x4b,0x34,0x98,0xad,0x33,0xce,0x5d,0xae,0x6e,0x27,0x73,0x94,0x8d,0xf9,
    0x72,0xb5,0x2f,0xc8,0xf7,0x63,0x1c,0xdd,0xb7,0x4b,0x38,0x5e,0xc5,0xaf,0x8d,0xb8,
    0x4e,0x7c,0xb7,0xe1,0xbb,0x0d,0x5f,0x9b,0xf1,0x4b,0x7c,0xdf,0x16,0xff,0x78,0x58,
    0xdb,0xb1,0x59,0x8f,0x2e,0xf2,0xad,0x9b,0x6d,0x1f,0x36,0xd3,0x6a,0xdf,0x79,0x1f,
    0x5a,0x7b,0xd1,0x6a,0xfe,0x0f,0x83,0x7f,0x84,0xd6,0x9d,0xe4,0x30,0xfc,0xb7,0xe0,
    0xb3,0x83,0x1c,0xae,0x77,0x27,0xfb,0x1d,0xf0,0xda,0x4e,0xae,0xfe,0x78,0x2e,0xb9,
    0x7b,0xc0,0xbf,0x8d,0x3d,0xd4,0xeb,0x91,0x6f,0xe3,0x51,0xf0,0x09,0xbe,0x8d,0xbd,
    0x60,0x57,0x23,0xdf,0x9c,0xbe,0xc7,0xc8,0xb5,0x97,0xbf,0x4d,0x17,0xf1,0xef,0x46,
    0xef,0x25,0x7c,0x26,0x98,0x95,0x7d,0xf8,0xd4,0xe6,0xf5,0xcc,0x38,0xee,0x22,0xe7,
    0x7e,0x34,0xe9,0x9a,0x22,0xe7,0x00,0x39,0xf7,0xcb,0x5c,0x3c,0x09,0xf7,0x03,0x32,
    0x17,0x4f,0x81,0xfb,0x5c,0x3c,0x0d,0xe6,0x73,0x31,0x24,0x7d,0x32,0xdb,0x60,0x58,
    0x23,0x70,0x19,0x94,0xd9,0x3e,0x48,0xcd,0x74,0x9c,0x95,0xe2,0x78,0x3f,0x3e,0x03,
    0x36,0x20,0x77,0x4e,0x41,0xe4,0x5f,0x14,0xed,0x87,0x88,0xf3,0xf5,0x4a,0xc8,0x65,
    0xf8,0x61,0x62,0x0f,0xc5,0x5c,0x6b,0xa2,0x9e,0x23,0xe4,0x39,0xcc,0xbd,0x97,0x91,
    0xfb,0xd7,0xfa,0x33,0x04,0xa7,0x11,0xd1,0xfb,0x1c,0x7a,0x47,0x45,0xef,0xf3,0xe0,
    0xae,0xf7,0x05,0x30,0xd7,0x3b,0x2e,0x7a,0xcd,0x36,0x16,0xd6,0x38,0xb9,0xc7,0x44,
    0xef,0x8b,0xa2,0xf7,0x2c,0xb9,0x8e,0x82,0xf7,0xc0,0xc9,0xe3,0xc6,0x99,0x65,0xf3,
    0x39,0x46,0xcd,0x11,0xfc,0xc7,0xa8,0x3b,0x29,0x75,0x8f,0xc5,0x39,0x48,0x22,0x66,
    0xf1,0x13,0x52,0xf7,0xe5,0xff,0xe8,0xf3,0xab,0xd7,0xe9,0xf3,0x71,0xe2,0x7c,0x4d,
    0xd1,0xe7,0x29,0x62,0x8f,0x4b,0x9f,0x5f,0x23,0xcf,0xd4,0xff,0xf4,0xd9,0x39,0x4d,
    0xca,0xb7,0xfb,0x03,0x31,0xe3,0xc4,0x4f,0xe4,0x9d,0xc9,0x90,0xf8,0xae,0x72,0x96,
    0x83,0xc4,0x4d,0xca,0x79,0xbd,0xce,0x79,0x9d,0x90,0xf3,0x7a,0x03,0xdc,0xcf,0xeb,
    0x4d,0x30,0x3f,0xaf,0x19,0xe9,0x9b,0xd9,0xa6,0xc3,0x3a,0x49,0xdd,0x69,0xd1,0xf5,
    0x16,0xb5,0x57,0xd1,0x95,0xa5,0x47,0xae,0x6b,0x86,0x98,0x93,0xc2,0xe7,0x6d,0xf8,
    0x9c,0x12,0x3e,0xef,0x80,0x3b,0x9f,0x77,0xc1,0x9c,0xcf,0x9c,0xf0,0x31,0xdb,0x6c,
    0x58,0xf3,0xe4,0x9e,0x95,0x73,0x7c,0x0f,0x2e,0x69,0xee,0x7e,0xe3,0xf8,0xb5,0xe0,
    0x7e,0xaf,0xce,0x11,0x3b,0x2f,0x77,0xde,0xfb,0xf0,0x3a,0x2d,0x77,0xde,0x07,0xe0,
    0x5f,0x91,0xff,0x43,0xb0,0x33,0xc2,0xf5,0x2c,0x78,0x0f,0x5c,0x17,0x85,0xab,0xd9,
    0x16,0xc2,0x5a,0xa4,0xde,0x82,0xf0,0xfa,0x86,0x98,0x55,0xf9,0x9b,0xe4,0x7e,0x8b,
    0x72,0xb6,0x97,0xf1,0x99,0x27,0x66,0x41,0xf8,0x7c,0x0c,0x9f,0x5e,0xe1,0xf3,0x09,
    0xb8,0xf3,0x59,0x16,0x3e,0x66,0x5b,0x0a,0x6b,0x99,0x3a,0x4b,0xc2,0xe7,0x5b,0x62,
    0x2e,0x73,0x86,0xc6,0xc7,0xfd,0x96,0x85,0xcf,0x15,0x7c,0x16,0x89,0x59,0x12,0x3e,
    0x9f,0xc2,0x67,0x54,0xf8,0x7c,0x06,0xee,0x7c,0x56,0x84,0x8f,0xd9,0xce,0x85,0xb5,
    0x42,0x9d,0x73,0xc2,0xe7,0x3b,0xee,0xe9,0x2b,0x32,0x4f,0xee,0xb7,0x22,0x7c,0x7e,
    0xc6,0x67,0x99,0x98,0x73,0x79,0x67,0x3c,0x27,0xbe,0x3f,0x31,0x0f,0xb3,0xc4,0xad,
    0xe4,0xcd,0xe9,0x8c,0xf8,0xfe,0xc8,0x7c,0x4f,0x13,0x37,0x17,0xff,0x6f,0x4c,0xc7,
    0xff,0x17,0xcd,0xf6,0x77,0x38,0xb5,0x8e,0xb0,0xfe,0x01,0x5a,0xb1,0x23,0x1c,0xb4,
    0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMS src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = ivec4(0);
//     for(int i = 0;i < params . srcSampleCount;i ++)
//     {
//         srcValue += texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), i);
//     }
//     srcValue /= params . srcSampleCount;
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
