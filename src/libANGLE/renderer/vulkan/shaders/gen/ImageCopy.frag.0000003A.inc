// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000003A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000003A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd5,0x65,
    0x18,0xc7,0xef,0x73,0x7e,0xe7,0x70,0x10,0x02,0xe4,0x41,0x89,0x4a,0x4b,0x85,0xcd,
    0x86,0xc1,0xa9,0xc8,0x08,0xd2,0x85,0x1a,0xba,0xb2,0x10,0x4d,0xa9,0xe0,0x45,0x2e,
    0x9c,0x50,0x71,0x7a,0x80,0xb5,0x74,0xad,0xb5,0x46,0x0a,0x6f,0xd2,0x0a,0xd6,0x98,
    0x39,0x83,0xcd,0x82,0xf5,0x00,0xb3,0x17,0x6d,0xbd,0x6a,0xad,0xa5,0x8d,0xb4,0x87,
    0xff,0xa5,0xf5,0xb0,0xb5,0x75,0x5d,0xf7,0xf9,0x5c,0xee,0xea,0xac,0x26,0xdb,0xbd,
    0x1f,0xf7,0xf7,0x7a,0xfa,0x7e,0xaf,0xeb,0xbe,0x6f,0x48,0xd2,0x5b,0x72,0x21,0xa4,
    0x42,0x45,0x28,0x0f,0xbf,0x86,0xe2,0x4f,0x6d,0x48,0x0b,0x52,0xfc,0xde,0x23,0xdf,
    0xca,0x50,0x16,0xf7,0x7b,0xf7,0x1f,0xda,0xdf,0x36,0x3e,0x31,0xdc,0xd6,0x71,0x5f,
    0x5e,0xfd,0xaa,0x43,0x12,0xfd,0xd5,0x56,0x13,0x72,0x21,0x23,0x5f,0x5d,0x63,0x47,
    0x47,0x0b,0x8a,0x57,0xc9,0xfa,0x52,0xd6,0x5a,0xf1,0x53,0x3c,0xa7,0x39,0xe4,0xb7,
    0xaa,0x98,0x53,0x63,0x42,0xd8,0x17,0xb2,0xa1,0x9e,0xba,0x5b,0xf8,0x1a,0x96,0x02,
    0x2b,0x77,0x58,0x1a,0x6c,0xad,0xc3,0x12,0xb0,0x06,0x87,0x65,0xc0,0x6e,0x76,0x58,
    0x16,0xec,0x36,0x87,0x95,0x81,0xdd,0xe1,0xb0,0x1c,0x58,0xb3,0xc3,0xca,0xc1,0xb6,
    0x3a,0x6c,0x0d,0xd8,0x36,0x87,0x55,0x80,0xe5,0x1d,0x56,0x09,0xd6,0xe1,0xb0,0x9b,
    0xc0,0x3a,0x1d,0x56,0x05,0xf6,0xa0,0xc3,0xaa,0xc1,0x1e,0x8a,0xbd,0x4b,0xae,0xf7,
    0x40,0xfb,0xb8,0x47,0xbe,0x9b,0xe9,0x99,0xed,0x37,0xb9,0xbd,0xf6,0x7e,0x23,0xfb,
    0x7a,0x89,0x4a,0x47,0x7b,0x12,0xfb,0xa5,0xbf,0xaf,0x13,0x9f,0x32,0xb4,0x6b,0xaf,
    0x1b,0x65,0x9f,0xa3,0x27,0x6a,0x5f,0x2f,0x9e,0x15,0xd8,0xd5,0x56,0x89,0xbe,0x4c,
    0xc4,0x32,0x51,0x43,0x0a,0x7d,0xdd,0xec,0xab,0x5c,0xae,0x6a,0xfc,0xad,0x56,0x1d,
    0xb9,0x42,0xe4,0x55,0x7b,0xbd,0xd7,0x56,0xd3,0x56,0xdd,0x0d,0x96,0xf9,0x28,0x87,
    0x06,0xe6,0x50,0x0f,0x87,0x86,0x58,0xab,0x88,0xb5,0xa2,0x6f,0x3d,0x9c,0xd4,0xbf,
    0x11,0x5b,0xce,0xd9,0x37,0x70,0x36,0xd4,0xbe,0x11,0x7b,0x5d,0x3c,0x4f,0xe9,0xd8,
    0xcf,0x56,0xb8,0x5b,0xaf,0x2d,0xae,0x15,0x2e,0x66,0xbf,0x9b,0x3a,0x66,0xdf,0xce,
    0xfc,0xb4,0x17,0x3b,0xc9,0xa9,0xbd,0x6b,0x92,0x0a,0x3d,0xec,0x53,0xe1,0xdf,0x3f,
    0xb6,0xbf,0x55,0x7a,0xbf,0x4b,0xbe,0x3d,0xf0,0xda,0x0d,0xbe,0x0b,0x9d,0xba,0xdf,
    0x53,0xc2,0xa7,0xb7,0x64,0xdf,0x4f,0xef,0x35,0xfe,0x20,0xba,0xca,0x9c,0x7d,0x80,
    0x3e,0x28,0xbf,0xa3,0xf0,0x49,0x9c,0x7d,0x94,0x73,0x6f,0xfb,0xc9,0x92,0xbe,0x9e,
    0x65,0xbe,0xb6,0x3f,0xc7,0xfc,0x6d,0x7f,0xd1,0x9d,0x95,0x4b,0xe4,0xde,0x09,0xff,
    0x4b,0xbc,0x0d,0x49,0xec,0x53,0x36,0xf2,0xcc,0xc0,0x5f,0xb1,0x3f,0x04,0xd1,0x99,
    0xec,0xe0,0xdc,0xd5,0x90,0xbb,0x4f,0x18,0x57,0x73,0xff,0x6b,0x58,0xd6,0xb7,0x02,
    0xe7,0xb7,0x16,0x7b,0x8f,0x64,0x68,0xe4,0x0d,0x58,0xc7,0x39,0xd8,0x81,0x4f,0x13,
    0xf8,0x5b,0xe2,0xa3,0xfb,0x5b,0x88,0x6b,0x22,0x4e,0xcf,0xc1,0xed,0xc4,0x6d,0x20,
    0xce,0xce,0xaf,0xe2,0x9f,0x8a,0xcf,0x26,0xf7,0x76,0xe8,0xd9,0xf8,0x5d,0x98,0xb7,
    0xc0,0xe7,0x2f,0xf1,0xb7,0x37,0xa4,0x05,0x3d,0xcd,0x71,0x26,0xd9,0xd8,0x9b,0xad,
    0xd4,0xd4,0x9f,0x37,0xe8,0xd7,0x9d,0xe0,0x07,0x65,0xa7,0x9c,0xbe,0x02,0x33,0xbf,
    0x3f,0x25,0x87,0xe5,0xd2,0xef,0x6f,0xe2,0xa5,0x7e,0x97,0xf1,0xc9,0x12,0xd3,0xec,
    0x34,0x6c,0x43,0x43,0xab,0xd3,0x70,0x17,0xb8,0x69,0x68,0x03,0x33,0x0d,0x79,0xa7,
    0x41,0x6d,0xed,0xbc,0x67,0x5a,0xb7,0xdd,0x69,0xb8,0x97,0xda,0x29,0xa7,0xa1,0x03,
    0xdc,0x34,0x7c,0x0d,0x66,0x7e,0xaa,0xc1,0x72,0xe5,0x9d,0x86,0x2b,0xf8,0xb4,0x10,
    0xd3,0xee,0x34,0xdc,0x8f,0x86,0xed,0x4e,0x43,0x27,0xb8,0x69,0x78,0x00,0xcc,0x34,
    0x74,0x3b,0x0d,0x6a,0xeb,0x8a,0xe7,0xae,0x58,0xb7,0x8b,0x73,0x94,0x8b,0xf9,0x8a,
    0xb5,0xaf,0xb8,0xbb,0xa7,0x1c,0xcd,0xb7,0xdb,0x71,0xfc,0x01,0xbf,0x3c,0x71,0x5d,
    0xf0,0xd1,0x3b,0xf9,0x30,0xf7,0xd1,0xce,0xdc,0x5e,0x38,0xf7,0xba,0x33,0xb7,0x0f,
    0xfc,0x4d,0xce,0xdc,0x23,0x60,0x9a,0xf7,0x45,0xde,0xcb,0x47,0xc1,0x87,0x65,0xaf,
    0x77,0xff,0x31,0x72,0x1f,0x27,0xe6,0x71,0xb0,0x5e,0x17,0xd3,0x07,0x3e,0x25,0x3e,
    0xba,0x3f,0x40,0x9e,0x3e,0xf8,0xe8,0xdd,0x3f,0x04,0x9f,0x7e,0xf8,0xe8,0xac,0x9e,
    0x00,0xd7,0x3c,0x7a,0x8f,0x0f,0x83,0x0d,0x48,0x25,0xbd,0xa7,0x47,0xa8,0x7d,0x80,
    0xde,0x1c,0x76,0x33,0x79,0x92,0x7c,0x03,0x6e,0x26,0x4f,0x81,0xdb,0x4c,0x9e,0x06,
    0xb3,0x99,0x0c,0xb9,0x99,0xa8,0x6d,0x50,0xd6,0x08,0x7d,0x1e,0xe4,0x5c,0x69,0x9e,
    0x67,0xa8,0x9d,0x44,0x0d,0xe5,0xf1,0x6d,0x7a,0x16,0xec,0x88,0xbb,0xef,0xe9,0xc8,
    0xad,0x2c,0xda,0x87,0x89,0xb3,0x35,0x29,0xb9,0x14,0x3f,0x46,0xec,0x70,0xcc,0xb5,
    0x26,0xea,0x3a,0x4e,0x9e,0x63,0xbc,0x39,0x59,0xde,0xc5,0x84,0xd9,0x0f,0xc1,0x69,
    0xc4,0xe9,0x7d,0x0e,0xbd,0xa3,0x4e,0xef,0xf3,0xe0,0xa6,0xf7,0x05,0x30,0xd3,0x5b,
    0x70,0x7a,0xd5,0x36,0x16,0xdf,0xa8,0x62,0xee,0x31,0xa7,0xf7,0x25,0xa7,0xf7,0x33,
    0x72,0xbd,0x0c,0xbe,0x19,0x4e,0x16,0x57,0xe0,0x3c,0xaa,0xcf,0x2b,0xd4,0x1c,0xc1,
    0x7f,0x8c,0xba,0x13,0xae,0xae,0xfa,0x8c,0xcb,0x9a,0x20,0x7e,0xdc,0xd5,0x7d,0xf5,
    0x3f,0xfa,0xfc,0xda,0x0d,0xfa,0x7c,0x82,0x38,0x5b,0xa7,0xe8,0xf3,0x49,0x62,0x4f,
    0xb8,0x3e,0xbf,0x4e,0x9e,0x93,0xff,0xd3,0x67,0xe3,0x34,0x81,0x26,0x8d,0xf9,0x91,
    0x98,0x02,0xf1,0xe3,0x25,0x33,0x19,0x72,0xbe,0xab,0xcc,0x72,0x90,0xb8,0x09,0x37,
    0xaf,0xb7,0x99,0xd7,0xa4,0x9b,0xd7,0x29,0x70,0x9b,0xd7,0x69,0x30,0x9b,0xd7,0xb4,
    0xeb,0xdb,0xe9,0x78,0x9f,0x42,0x38,0x43,0xdd,0x29,0xa7,0xeb,0x1d,0x6a,0xaf,0xa2,
    0x2b,0x47,0x8f,0x4c,0xd7,0x34,0x31,0x67,0x1c,0x9f,0x77,0xe1,0x73,0xd6,0xf1,0x79,
    0x0f,0xdc,0xf8,0xbc,0x0f,0x66,0x7c,0x66,0x1d,0x1f,0xb5,0xcd,0xc8,0x9a,0x23,0xf7,
    0x8c,0x9b,0xe3,0x07,0x70,0x49,0x78,0x77,0x95,0xe3,0x37,0x0e,0xb7,0x37,0x6d,0x96,
    0xd8,0x39,0xf7,0x2e,0x7c,0x08,0xaf,0x73,0xee,0x5d,0x38,0x0f,0x7e,0x99,0x77,0xfe,
    0x02,0x58,0xbf,0xe3,0xfa,0x11,0x78,0x2f,0x5c,0x17,0x1c,0x57,0xb5,0xcd,0xcb,0x5a,
    0xa0,0xde,0xbc,0xe3,0xf5,0x2d,0xfa,0x56,0xdd,0xdf,0x03,0xf3,0x5b,0x70,0xb3,0xbd,
    0x8a,0xcf,0x1c,0x31,0xf3,0x8e,0xcf,0xc7,0xf0,0xb9,0xe8,0xf8,0x7c,0x02,0x6e,0x7c,
    0x96,0x1c,0x1f,0xb5,0x2d,0xca,0x5a,0xa2,0xce,0xa2,0xe3,0xf3,0x1d,0x7c,0xae,0x32,
    0x43,0xe5,0x63,0x7e,0x4b,0x8e,0xcf,0x35,0x7c,0x16,0x88,0x59,0x74,0x7c,0x3e,0x87,
    0xcf,0xa8,0xe3,0xf3,0x05,0xb8,0xf1,0x59,0x71,0x7c,0xd4,0xb6,0x2c,0x6b,0x85,0x3a,
    0xcb,0x8e,0xcf,0xf7,0xfc,0x1f,0x79,0xcd,0x9d,0x27,0xf3,0x5b,0x71,0x7c,0x7e,0xc1,
    0x67,0x89,0x98,0xe5,0x92,0x19,0xcf,0x3a,0xdf,0x9f,0x39,0x0f,0x33,0xc4,0xad,0x94,
    0x9c,0xd3,0x69,0xe7,0xfb,0x13,0xe7,0x7b,0x8a,0xb8,0xd9,0xf8,0x3f,0x5b,0x12,0xff,
    0x57,0x53,0xdb,0xdf,0x32,0xb5,0x4e,0x59,0xff,0x00,0x2f,0x5c,0xf5,0xf7,0x38,0x0e,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform usampler2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
