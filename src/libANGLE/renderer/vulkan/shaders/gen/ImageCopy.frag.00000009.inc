// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000009.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000009[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4f,0x96,0x65,
    0x14,0xc7,0xaf,0xe7,0xb9,0x9f,0x17,0x84,0x00,0x79,0x51,0xc2,0xa5,0xe5,0x0b,0x9b,
    0x0d,0x83,0x67,0x8b,0x8c,0x20,0x9d,0x64,0x64,0x22,0x4a,0x0a,0x3f,0xd4,0xd2,0x09,
    0x26,0x2c,0x83,0x58,0x9a,0xfe,0x80,0x29,0xb4,0xf2,0x25,0x58,0x63,0xd6,0x12,0x36,
    0x0b,0x7e,0x48,0x98,0x6e,0xb9,0xf5,0x53,0x6b,0xad,0x74,0xa5,0x96,0x7f,0x51,0xab,
    0xdc,0xdc,0x3a,0xe7,0x7a,0x3e,0xc7,0x1d,0x9f,0xd5,0x7c,0xb6,0x6b,0xf7,0x7d,0x7d,
    0xcf,0xdb,0xf7,0x7b,0xce,0x75,0x5f,0x90,0xa4,0x37,0xe6,0x43,0x48,0x85,0xf2,0x50,
    0x16,0xee,0x85,0xe2,0xaf,0x26,0xa4,0x05,0x09,0xa1,0x22,0xe4,0xe2,0x73,0x57,0x6f,
    0x7f,0x6f,0xcb,0x87,0x27,0x8f,0xb6,0xb4,0xbd,0x50,0x50,0x7b,0x55,0x48,0xa2,0x9f,
    0xda,0xaa,0x43,0x3e,0x64,0xe4,0xa9,0xeb,0xfd,0xa1,0x63,0xe3,0x8a,0x57,0xca,0xba,
    0x2e,0x6b,0xa5,0xf8,0x29,0x9e,0xd7,0x1c,0xf2,0x56,0x19,0x73,0x6a,0x4c,0x08,0xaf,
    0x87,0x6c,0xa8,0xa3,0xde,0x46,0x9e,0x86,0xa5,0xc0,0xca,0x1c,0x96,0x06,0x5b,0xe9,
    0xb0,0x04,0xac,0xde,0x61,0x19,0xb0,0x27,0x1d,0x96,0x05,0x7b,0xca,0x61,0x39,0xb0,
    0x67,0x1c,0x96,0x07,0xdb,0xe4,0xb0,0x32,0xb0,0xcd,0x0e,0x5b,0x01,0xb6,0xc5,0x61,
    0xe5,0x60,0x05,0x87,0x55,0x80,0xb5,0x39,0xec,0x09,0xb0,0x76,0x87,0x55,0x82,0xbd,
    0xec,0xb0,0x2a,0xb0,0x1d,0xb1,0x77,0xc9,0xc3,0x1e,0x68,0x1f,0x77,0xca,0x73,0x03,
    0x3d,0xb3,0xfd,0x7a,0xb7,0xd7,0xde,0xaf,0x63,0x5f,0x27,0x51,0xe9,0x68,0x4f,0x62,
    0xbf,0xf4,0x7d,0x95,0xf8,0xe4,0xd0,0xae,0xbd,0x6e,0x90,0x7d,0x9e,0x9e,0xa8,0x7d,
    0xb5,0x78,0x96,0x63,0x57,0x5b,0x05,0xfa,0x32,0x11,0xcb,0x44,0x0d,0x29,0xf4,0x75,
    0xb2,0xaf,0x74,0xb9,0xaa,0xf0,0xb7,0x5a,0xb5,0xe4,0x0a,0x91,0x57,0xcd,0xc3,0x5e,
    0x5b,0x4d,0x5b,0xb5,0x8f,0x59,0xe6,0xa3,0x1c,0xea,0x99,0x43,0x1d,0x1c,0xea,0x63,
    0xad,0x22,0xd6,0x8c,0xbe,0xd5,0x70,0x52,0xff,0x06,0x6c,0x79,0x67,0x5f,0xcb,0xd9,
    0x50,0xfb,0x3a,0xec,0xb5,0xf1,0x3c,0xa5,0x63,0x3f,0x9b,0xe1,0x6e,0xbd,0xb6,0xb8,
    0x66,0xb8,0xd8,0x7e,0x2b,0xf3,0x52,0xed,0xdb,0xc9,0xa1,0xbd,0x6a,0x94,0x8c,0x5d,
    0xec,0x53,0xe1,0xd1,0x9f,0xed,0xb5,0xf6,0x2b,0xbc,0x77,0xa1,0x45,0xf7,0x3b,0x4b,
    0x6a,0x76,0x97,0xec,0x7b,0xe8,0xaf,0xc6,0xef,0x81,0xbb,0xe7,0xd4,0x87,0x56,0xe5,
    0xf4,0x16,0x1c,0x12,0x67,0x1f,0xe2,0x6c,0xab,0xfd,0x14,0xb1,0x19,0x67,0x3f,0x5d,
    0xd2,0xcb,0xf3,0xcc,0xd4,0xf6,0x97,0x98,0xb9,0xed,0xaf,0xb8,0xf3,0x71,0x8d,0x5a,
    0xa7,0xd0,0x73,0x8d,0xfb,0x20,0x89,0xbd,0xca,0x46,0xde,0x19,0xf4,0x28,0xf6,0xb7,
    0x20,0x3a,0x87,0x6d,0x9c,0xb5,0x6a,0x72,0xf7,0x89,0x82,0x2a,0xbe,0xf9,0x6a,0x96,
    0xf5,0x6e,0x9c,0x33,0x5b,0x83,0xbd,0x4b,0x32,0x34,0xf0,0xdd,0xaf,0x62,0xf6,0xdb,
    0xf0,0x69,0x04,0xff,0x44,0x7c,0x74,0xbf,0x86,0xb8,0x46,0xe2,0x74,0xf6,0x4f,0x13,
    0xb7,0x96,0x38,0x3b,0xb3,0x8a,0x7f,0x27,0x3e,0xeb,0xdd,0x7d,0xa1,0xe7,0xe1,0x2f,
    0x61,0xde,0x04,0x9f,0xfb,0xe2,0x6f,0xf7,0x46,0x13,0x7a,0xf4,0x7d,0xbf,0xc4,0xe5,
    0xb8,0x3b,0xd6,0xe0,0x3b,0x49,0xbf,0x9e,0x05,0x3f,0x20,0x3b,0xe5,0x74,0x03,0xcc,
    0xfc,0xfe,0x91,0x1c,0x96,0x4b,0x9f,0x7f,0x8a,0x97,0xfa,0xfd,0x82,0x4f,0x96,0x98,
    0x4d,0x4e,0xc3,0x16,0x34,0x34,0x3b,0x0d,0xcf,0x81,0x9b,0x86,0x16,0x30,0xd3,0x50,
    0x70,0x1a,0xd4,0xd6,0xca,0x1d,0xa6,0x75,0x5b,0x9d,0x86,0xe7,0xa9,0x9d,0x72,0x1a,
    0xda,0xc0,0x4d,0xc3,0xf7,0x60,0xe6,0xa7,0x1a,0x2c,0x57,0xc1,0x69,0xb8,0x89,0x4f,
    0x13,0x31,0xad,0x4e,0xc3,0x8b,0x68,0xd8,0xea,0x34,0xb4,0x83,0x9b,0x86,0x97,0xc0,
    0x4c,0x43,0xa7,0xd3,0xa0,0xb6,0x8e,0x78,0xee,0x8a,0x75,0x3b,0x38,0x47,0xf9,0x98,
    0xaf,0x58,0xfb,0xa6,0xfb,0xfe,0x94,0xa3,0xf9,0x76,0x3a,0x8e,0xb7,0xf0,0x2b,0x10,
    0xd7,0x01,0x1f,0xfd,0x46,0x5f,0xe5,0xfb,0xb4,0x33,0xf7,0x1a,0x9c,0xbb,0xdd,0x99,
    0xdb,0x05,0xfe,0x31,0x67,0x6e,0x37,0xd8,0x2d,0xe2,0xf4,0x9b,0xed,0x25,0xae,0x87,
    0x38,0xed,0xe9,0x5e,0xf0,0xc3,0x12,0xa5,0x77,0xc9,0x3e,0xea,0xed,0xe6,0x7b,0xdf,
    0xeb,0x7a,0xf5,0x06,0xf1,0x7d,0xae,0x57,0xfb,0xc1,0xad,0x57,0x07,0xc0,0xac,0x57,
    0x03,0xae,0x57,0x6a,0xeb,0x97,0x35,0x88,0xfe,0x7e,0xe6,0xad,0x79,0xde,0xa4,0x76,
    0x12,0xf3,0x97,0xc5,0x3b,0xe4,0x6d,0xb0,0x7d,0xee,0x3b,0x4c,0xc7,0x7a,0xb9,0x68,
    0x3f,0x48,0x9c,0xad,0x73,0x92,0x4b,0xf1,0x43,0xc4,0x1e,0x8c,0xb9,0x56,0x44,0x5d,
    0x87,0xc9,0x73,0x88,0xbb,0x20,0xcb,0x1d,0x94,0x30,0x93,0x01,0x38,0x0d,0x3a,0xbd,
    0x47,0xd0,0x3b,0xe4,0xf4,0xbe,0x03,0x6e,0x7a,0x8f,0x82,0x99,0xde,0x11,0xa7,0x57,
    0x6d,0xc3,0xb2,0x46,0xc8,0x3d,0xec,0xf4,0xbe,0xeb,0xf4,0xde,0x20,0xd7,0x31,0xf0,
    0x0d,0x70,0xb2,0xb8,0x11,0xce,0x89,0xfa,0xbc,0x47,0xcd,0x41,0xfc,0x87,0xa9,0x3b,
    0xe6,0xea,0xaa,0xcf,0xa8,0xac,0x31,0xe2,0x47,0x5d,0xdd,0xf1,0xff,0xe8,0xf3,0x07,
    0x8f,0xe9,0xf3,0x71,0xe2,0x6c,0x5d,0xa0,0xcf,0x27,0x88,0x3d,0xee,0xfa,0x7c,0x92,
    0x3c,0x27,0xfe,0xa7,0xcf,0xc6,0x69,0x0c,0x4d,0x1a,0xf3,0x1b,0x31,0x23,0xc4,0x8f,
    0x96,0xcc,0x64,0xc0,0xf9,0xfe,0xca,0x2c,0xfb,0x89,0xd3,0x3c,0x67,0xf8,0x9b,0x32,
    0x81,0xdd,0xe6,0xf7,0x11,0xf3,0x3b,0xed,0xe6,0x77,0x06,0xdc,0xe6,0x77,0x16,0xcc,
    0xe6,0x37,0xe5,0xfa,0x78,0x36,0xde,0x3d,0x7a,0xae,0x8a,0x3c,0x26,0xd1,0xa9,0xb5,
    0x3e,0xa5,0xde,0x04,0x3a,0xf3,0xf4,0xcc,0x74,0x4e,0x11,0x73,0xce,0xf1,0xb9,0x00,
    0x9f,0xf3,0x8e,0xcf,0x45,0x70,0xe3,0xf3,0x19,0x98,0xf1,0x99,0x71,0x7c,0xd4,0x36,
    0x2d,0x6b,0x96,0xdc,0xd3,0xee,0xbe,0xfc,0x1c,0x2e,0x09,0xf7,0xa3,0x72,0xfc,0xc1,
    0xe1,0x76,0xf7,0xcc,0x10,0x3b,0xeb,0xee,0x85,0x2f,0xe0,0x75,0xc9,0xdd,0x0b,0x5f,
    0x82,0xdf,0x23,0xff,0x57,0x60,0x3d,0x8e,0xeb,0x65,0xf0,0x6e,0xb8,0xce,0x3b,0xae,
    0x6a,0x9b,0x93,0x35,0x4f,0xbd,0x39,0xc7,0xeb,0x47,0x62,0x26,0xdc,0xbd,0x6d,0x7e,
    0xf3,0xcc,0x5a,0xfd,0x6e,0xe3,0x33,0x4b,0xcc,0x9c,0xe3,0xf3,0x35,0x7c,0xae,0x38,
    0x3e,0xdf,0x80,0x1b,0x9f,0x45,0xc7,0x47,0x6d,0x0b,0xb2,0x16,0xa9,0xb3,0xe0,0xf8,
    0xfc,0x44,0xcc,0x6d,0x66,0xa8,0x7c,0xcc,0x6f,0xd1,0xf1,0xb9,0x83,0xcf,0x3c,0x31,
    0x0b,0x8e,0xcf,0xb7,0xf0,0x19,0x72,0x7c,0xae,0x82,0x1b,0x9f,0x65,0xc7,0x47,0x6d,
    0x4b,0xb2,0x96,0xa9,0xb3,0xe4,0xf8,0xfc,0xcc,0xff,0x13,0x77,0xdc,0x79,0x32,0xbf,
    0x65,0xc7,0xe7,0x0f,0x7c,0x16,0x89,0x59,0x2a,0x99,0xf1,0x8c,0xf3,0xfd,0x9d,0xf3,
    0x30,0x4d,0xdc,0x72,0xc9,0x39,0x9d,0x72,0xbe,0x77,0x39,0xdf,0x93,0xc4,0x69,0x9e,
    0xed,0xc2,0xe4,0x3a,0xb6,0x07,0x32,0xb5,0x76,0x59,0xff,0x02,0xbf,0xa7,0x5f,0xa5,
    0xcc,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
