// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000014.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000014[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x5b,0x6c,0x55,0x45,
    0x14,0x86,0x67,0xce,0xe9,0x0d,0x0a,0x15,0x42,0xe5,0x66,0x6b,0x5a,0xb9,0x88,0xb4,
    0x94,0xca,0x1d,0xdb,0x03,0x6d,0xb8,0xb4,0x86,0x4a,0x29,0x44,0x13,0xc4,0x4a,0x40,
    0x54,0x40,0x28,0xda,0x1a,0x23,0x44,0x6a,0xa1,0x22,0x10,0x23,0x84,0x07,0x1f,0x40,
    0x85,0xc4,0x17,0x1e,0x0c,0x04,0x15,0x1e,0x04,0x94,0xc6,0x10,0x30,0x4a,0x4d,0x50,
    0x9a,0x28,0x35,0xf0,0xe6,0x9b,0x91,0x48,0x50,0xd0,0x18,0x9c,0xb5,0xe7,0x5b,0x74,
    0xd9,0x60,0x68,0x32,0xd9,0x7b,0xfe,0x59,0xff,0xba,0xfc,0xb3,0x66,0x76,0xdb,0x74,
    0x6a,0x4c,0xae,0x73,0xde,0x0d,0x74,0x79,0xae,0xc9,0xbb,0xe4,0x67,0xa8,0x4b,0x39,
    0x79,0xcd,0x77,0x39,0xc9,0xb3,0xae,0x61,0x59,0x43,0x45,0xdb,0xab,0x6b,0x2a,0xa6,
    0x4d,0xaf,0x94,0xf5,0x02,0x97,0x4e,0xec,0x64,0xed,0x3e,0x97,0xeb,0xb2,0xc2,0x53,
    0xc6,0xc6,0x55,0xeb,0x5a,0x04,0x1f,0x1f,0xc6,0xd5,0x30,0x86,0x04,0x3b,0xc1,0x73,
    0xc5,0x47,0x78,0x1b,0x9f,0xf8,0x14,0x8e,0x73,0xf5,0x2e,0xdb,0x95,0xc7,0x70,0x6e,
    0x0c,0x4f,0xc5,0x3c,0x58,0x9e,0xc1,0x52,0x60,0x43,0x0c,0x96,0x06,0x2b,0x34,0x58,
    0x16,0xd8,0x48,0x83,0x65,0x83,0x15,0x19,0x2c,0x07,0xac,0xc4,0x60,0xb9,0x60,0x63,
    0x0d,0x96,0x07,0x36,0xc1,0x60,0x03,0xc0,0xca,0x0d,0x36,0x10,0xac,0xd2,0x60,0xf9,
    0x60,0xd3,0x0c,0x36,0x08,0x6c,0x96,0xc1,0x06,0x83,0x55,0x1b,0xac,0x00,0xac,0x26,
    0xd1,0x2e,0x7d,0x47,0x03,0xd1,0x71,0x45,0x78,0x3e,0x84,0x66,0x3a,0x2f,0x35,0x73,
    0xd1,0xfe,0x41,0xe6,0xc3,0x02,0x2b,0x95,0xac,0xa7,0x13,0xbd,0xe4,0x7d,0x78,0x78,
    0xcb,0xa1,0xf6,0xb2,0x60,0x9f,0x43,0x0e,0xbf,0x1c,0x1d,0x97,0x29,0x0c,0x16,0x05,
    0x06,0x17,0x1d,0x8f,0xd6,0xad,0xca,0xe8,0x5c,0x34,0x3c,0xb0,0x7f,0x54,0xcd,0xfd,
    0x61,0x5e,0x82,0x0f,0xd9,0xaf,0x11,0x61,0x5e,0xca,0x3c,0xc5,0x7c,0x2c,0x3a,0x67,
    0x25,0x78,0x96,0x1b,0x87,0xad,0xe0,0x55,0xcc,0xc7,0x1b,0xfe,0xc3,0xd8,0x0b,0x5f,
    0xfc,0x97,0xe1,0xcf,0x25,0xf5,0x0c,0x4d,0x34,0x28,0x65,0x94,0x98,0x51,0x76,0x8f,
    0x51,0x72,0xe7,0x99,0xe5,0x26,0xb1,0x7f,0xe5,0xe4,0x20,0xf3,0x0a,0xb0,0x32,0x6a,
    0x9a,0x4c,0x4e,0x62,0x5f,0xc9,0x5a,0xa9,0x59,0x9f,0x41,0x4f,0xc9,0xfa,0xcc,0x3b,
    0xdc,0xb8,0x2e,0xcf,0xc7,0xc8,0x59,0xed,0xe7,0x51,0x97,0xce,0x17,0xb3,0xbf,0x52,
    0xf3,0x53,0xe4,0x27,0x1a,0x8d,0x0a,0x9e,0x96,0x1b,0x4d,0xdd,0x5d,0x9e,0x12,0xf3,
    0x69,0xde,0x97,0x53,0x83,0xcc,0x57,0xf4,0x8b,0xd9,0xdc,0x6f,0xbe,0x9a,0xf3,0x22,
    0xfc,0xe7,0xc8,0xb9,0x84,0x1c,0x5e,0xe0,0x3d,0x6d,0xec,0xd7,0xb3,0x0f,0x3a,0x6f,
    0xe1,0x7c,0xe8,0xbc,0x9d,0xb3,0xa1,0xf3,0x03,0xf4,0xb6,0xce,0x8f,0xf5,0xd3,0xf4,
    0x14,0x67,0x44,0xe7,0xe7,0xe8,0x39,0xed,0xab,0xef,0xfa,0xe5,0x7b,0x11,0x4d,0x74,
    0xfd,0xe7,0x64,0xb5,0x63,0xae,0xe4,0x7f,0x85,0x5c,0xb5,0x8f,0xae,0x70,0xdf,0xa4,
    0x8d,0x7d,0x55,0x10,0x6c,0x5b,0x47,0x47,0x55,0x79,0xc8,0x5a,0xec,0xaa,0x7d,0xc4,
    0xec,0x50,0xdb,0x4c,0x78,0xdf,0x74,0xb8,0x75,0xae,0xce,0xe7,0x84,0xf9,0xbe,0xce,
    0x83,0x99,0x19,0x61,0x97,0x53,0xe4,0xe1,0xf0,0x7f,0x33,0x20,0xb2,0xf7,0x19,0xfa,
    0x7b,0x02,0x3d,0xdc,0x18,0xe2,0x48,0xff,0x3e,0x02,0x36,0xc1,0xec,0x5b,0x0b,0x67,
    0x63,0x22,0xeb,0xb5,0xc1,0x83,0xf4,0xd5,0xa3,0xf4,0xde,0x64,0xfc,0x89,0xcd,0x14,
    0xf0,0xed,0xc1,0x46,0xe6,0x53,0xe1,0x4d,0x81,0x37,0x93,0xbb,0xa3,0x82,0x3e,0xcc,
    0xd0,0x73,0xb3,0xc1,0x3f,0x0e,0x36,0x05,0x89,0x2e,0x11,0x93,0x5e,0xfc,0x33,0x64,
    0x9e,0x21,0x9f,0xbf,0x82,0x7d,0x15,0x77,0x4d,0x86,0x7a,0xe4,0xbd,0x29,0xf0,0x4a,
    0xb8,0x6f,0xa6,0x62,0xdb,0xce,0x5e,0xd4,0x82,0x2f,0x0d,0xea,0x24,0xe7,0xcf,0x47,
    0x4c,0xed,0x6e,0x05,0x1f,0xea,0x4b,0x9e,0x37,0x82,0x16,0x62,0x37,0xd7,0x47,0x9b,
    0x6c,0x38,0xd5,0xa6,0x86,0xf9,0xd4,0x30,0xcf,0xd4,0xb0,0x00,0x5c,0x6b,0x58,0x08,
    0xa6,0x35,0xd4,0x9b,0x1a,0x16,0x26,0x77,0x9d,0x4b,0x30,0x89,0x5b,0x67,0x6a,0x58,
    0x44,0x6c,0x6f,0x6a,0x68,0x00,0xd7,0x1a,0xc6,0xfa,0x88,0xa9,0x9d,0xd4,0xa0,0xbe,
    0xea,0x4d,0x0d,0x35,0x3e,0xda,0x64,0xe0,0xd4,0x99,0x1a,0x1a,0xa9,0x61,0xb1,0xa9,
    0x61,0x09,0xb8,0xd6,0xd0,0x04,0xa6,0x35,0x2c,0x33,0x35,0x34,0x25,0xf9,0xb8,0x04,
    0x93,0xb8,0x4b,0xe9,0x23,0x89,0xfb,0x24,0xb1,0x6b,0x7c,0xdf,0xd9,0x97,0x1c,0xd5,
    0x76,0x99,0xc9,0xb1,0x16,0xbb,0x7a,0x78,0x4b,0xc9,0x47,0xee,0x87,0x67,0xb8,0x1b,
    0xb4,0xe7,0x9e,0x25,0xe7,0x66,0xd3,0x73,0x2b,0xc1,0x3b,0xe8,0xb9,0x55,0x60,0xb5,
    0x3e,0xf2,0xe4,0xbe,0x58,0x03,0x6f,0x35,0x3c,0xd1,0xf4,0x79,0x70,0xd5,0xfd,0x45,
    0xb8,0xce,0x60,0x6b,0xc1,0x7c,0xa2,0x43,0x4e,0x72,0xd7,0xac,0xc3,0x76,0x2d,0x3e,
    0x34,0xc6,0x4b,0xc4,0x58,0x6f,0x62,0x6c,0x00,0x5f,0x19,0x6a,0x95,0xbb,0x72,0x23,
    0x35,0xad,0xe3,0x7e,0xda,0x60,0xf6,0x63,0x13,0xfc,0x16,0xb3,0x1f,0x2f,0x83,0xeb,
    0x7e,0xbc,0x02,0xa6,0xfb,0xd1,0x66,0xf6,0x43,0xd6,0x5a,0xc3,0xd8,0x8a,0xc6,0x5b,
    0x8d,0xef,0x37,0xf1,0xdd,0x6e,0x7c,0x77,0x80,0xab,0xef,0x6d,0x60,0xea,0xbb,0xd3,
    0xf8,0xde,0x96,0x9c,0x69,0x97,0x60,0xe2,0x7b,0xbb,0xd1,0x68,0x07,0x75,0xc9,0xfd,
    0x72,0x04,0x5f,0x6f,0x83,0x37,0xb3,0xef,0xca,0xeb,0x64,0xdf,0xc5,0x66,0x27,0x31,
    0xb7,0x62,0xbf,0x9d,0xb8,0xbb,0x4d,0x5c,0xb1,0xd9,0x15,0xc6,0x6e,0xf8,0xbb,0x4c,
    0xdc,0x77,0x4c,0xdc,0xc6,0x70,0x9b,0xcb,0xde,0xbc,0x0b,0xb6,0xd1,0xdc,0x5f,0x29,
    0xb3,0x77,0x7b,0xe0,0xe9,0xd8,0x19,0x7c,0x09,0xbe,0x17,0xee,0x9e,0xc4,0xd7,0x80,
    0x64,0xaf,0xf6,0xe1,0x67,0x2f,0x77,0x68,0x36,0xdf,0xc1,0x34,0x35,0x69,0x4e,0xbb,
    0xa9,0x49,0x38,0xf3,0x7d,0xe4,0x74,0xc2,0xdf,0x85,0x6d,0x1b,0xb6,0xad,0x26,0xff,
    0xd7,0xee,0x92,0xff,0xeb,0xf7,0xc8,0x7f,0x33,0x3c,0x1d,0x6f,0x91,0xff,0x16,0xb8,
    0x9b,0x4d,0xfe,0x6f,0xe0,0x67,0xcb,0xff,0xe4,0xaf,0x39,0xb5,0x99,0xfc,0xe7,0xf9,
    0x58,0xc3,0x6e,0xf8,0xad,0x49,0xff,0xc5,0x6f,0xc5,0x7b,0xac,0xef,0x08,0x9e,0x64,
    0xbe,0x1f,0xac,0xda,0xf7,0xf5,0xd9,0xfb,0xf4,0xd9,0x01,0xd3,0x67,0x1f,0x80,0x6b,
    0x9f,0x7d,0x08,0xa6,0x7d,0x76,0xc8,0xec,0xb7,0xac,0x1d,0x0c,0xe3,0x10,0xb9,0x1d,
    0x44,0x2f,0xc9,0xfb,0x23,0x62,0x3a,0x78,0xb7,0x78,0xff,0x3b,0xbc,0x8b,0xaf,0x5f,
    0xe1,0xc8,0xf3,0x34,0xb1,0x7e,0x83,0x37,0x18,0xce,0x4d,0x13,0x4b,0xd6,0xae,0x85,
    0x71,0x1d,0xde,0xf5,0xa4,0x1f,0x63,0xac,0x1b,0xf0,0x46,0xba,0x58,0xaf,0x60,0x7f,
    0x80,0xcb,0xf7,0x76,0x50,0xd0,0x2b,0x27,0xf1,0x19,0xf7,0x68,0x34,0xeb,0x45,0x68,
    0x7b,0x0b,0x9f,0xd7,0x0c,0xff,0x77,0x7c,0xca,0xf7,0xd9,0xda,0x48,0x4e,0xb7,0x83,
    0x97,0x9b,0x60,0x37,0xf0,0xbd,0xc0,0x47,0xff,0xd7,0xe1,0x5e,0xe3,0xfe,0x17,0xed,
    0x27,0xfa,0xb8,0xbe,0xdf,0xdc,0x57,0xc2,0x39,0x8c,0x46,0x9e,0x7a,0xf3,0xfd,0x7f,
    0x35,0xba,0x4d,0xcc,0xdb,0x46,0x23,0xef,0x23,0x4f,0x35,0x1a,0xe8,0xfb,0x34,0x92,
    0xb5,0x54,0x18,0xd9,0x9e,0xdf,0x1d,0x7c,0x9f,0x46,0xb9,0xf0,0xac,0x46,0x79,0x3e,
    0xe2,0x56,0xa3,0x01,0xbe,0x4f,0x23,0x59,0x57,0x8d,0xf2,0xf1,0x99,0xf2,0x7d,0xfc,
    0x2c,0x7c,0xaa,0x46,0x6a,0x23,0x39,0xa9,0x46,0x82,0xa9,0x46,0x75,0x3e,0xfa,0x97,
    0xbc,0xb2,0xc8,0x55,0x35,0x9a,0xe4,0xe3,0xfa,0x44,0xe2,0xab,0x46,0x47,0xd0,0x28,
    0x45,0xbd,0xc5,0xfd,0x34,0x1a,0x4a,0x4c,0x79,0xaa,0x46,0xc3,0x7c,0xe4,0xa9,0x46,
    0x45,0x46,0x23,0x59,0x2b,0x0c,0x63,0x04,0xbc,0x11,0x46,0xa3,0x51,0xf0,0xac,0x46,
    0xa3,0x7d,0xc4,0xad,0x46,0x0f,0x18,0x8d,0x46,0x1b,0x8d,0x8a,0xf1,0x59,0x68,0x34,
    0x1a,0x8e,0x4f,0xd5,0x48,0x6d,0x8a,0x8c,0x46,0xc5,0x46,0xa3,0xc7,0x7d,0xf4,0x2f,
    0x79,0x0d,0x27,0x57,0xd5,0xa8,0xd2,0xc7,0x75,0xd1,0x2a,0x45,0x4c,0x3d,0x7b,0x87,
    0xe8,0x45,0xb1,0x5b,0x44,0xaf,0xb5,0xc1,0x29,0x36,0x67,0xfe,0x13,0xce,0xfc,0x31,
    0x73,0xe6,0x3f,0x05,0xd7,0x33,0xff,0x19,0x98,0x9e,0xf9,0x13,0xe6,0x1c,0xca,0xda,
    0xf1,0x30,0x4e,0x12,0xf7,0xa4,0xf9,0x6e,0x9d,0xc6,0xf7,0x29,0xe3,0xfb,0x0b,0x70,
    0xf5,0xfd,0x25,0x98,0xfa,0xee,0x32,0xbe,0x65,0xed,0x4c,0x18,0x67,0xf1,0x7d,0xd6,
    0x7c,0xaf,0xcf,0xe3,0xfb,0x9c,0xf9,0x5e,0x7f,0x0d,0x7e,0x9e,0x3b,0xfa,0x1b,0xb0,
    0xf5,0x26,0xde,0xb7,0xe0,0xcd,0xc4,0xeb,0x36,0xf1,0x64,0xed,0x42,0x18,0xdd,0xc4,
    0xbb,0x60,0xce,0xec,0x74,0x1f,0xff,0x4e,0x58,0x64,0x7e,0x67,0x53,0xbb,0x6e,0xa3,
    0x75,0x83,0x8f,0x36,0x67,0xe1,0x5c,0x30,0xf9,0x7c,0x4f,0x3e,0x17,0x4d,0x3e,0x3f,
    0x80,0x6b,0x3e,0x3d,0x26,0x1f,0x59,0xbb,0x14,0x46,0x0f,0x71,0x2e,0x99,0x7c,0x66,
    0x92,0x4f,0x83,0xd9,0x7b,0xb5,0xeb,0x31,0xf9,0x3c,0xe1,0xa3,0x4d,0x37,0x9c,0x4b,
    0x26,0x9f,0x1f,0xc9,0xa7,0xdd,0xe4,0xf3,0x13,0xb8,0xe6,0xd3,0x6b,0xf2,0x91,0xb5,
    0xcb,0x61,0xf4,0x12,0xe7,0xb2,0xc9,0x67,0xb6,0x8f,0x7f,0x27,0x49,0x3c,0xfd,0x46,
    0xa9,0x5d,0xaf,0xc9,0x67,0x89,0x8f,0x36,0x3d,0x70,0x2e,0x63,0xdb,0x85,0xed,0x19,
    0x73,0xd6,0xbf,0x42,0xef,0xb4,0x89,0x33,0xd5,0xf7,0xe1,0xae,0x1f,0xb7,0xcb,0xc4,
    0x69,0xf4,0x31,0x56,0x2f,0x9c,0x33,0xd8,0x9e,0xc0,0xf6,0x38,0xdf,0x5a,0xb1,0xfd,
    0x1c,0x7f,0x32,0xf4,0x7f,0x46,0x29,0xf3,0xad,0x55,0xce,0x09,0xe3,0x7f,0xb1,0x8f,
    0x31,0xba,0xe0,0x8b,0xbf,0x39,0x81,0x71,0x95,0xb5,0x7f,0x42,0x97,0xcc,0x0a,0xe3,
    0x5f,0xd0,0xb7,0x8d,0x29,0xe4,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
