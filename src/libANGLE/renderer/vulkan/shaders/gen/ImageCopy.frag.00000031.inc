// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000031.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000031[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x97,0xff,0x6b,0xd6,0x55,
    0x14,0xc7,0x3f,0xf7,0x79,0x9e,0x7d,0x71,0xe6,0xd2,0xa6,0xe6,0x97,0x11,0x5b,0xda,
    0xd4,0xb6,0xa6,0x4d,0xf3,0xdb,0x9c,0xe5,0xb7,0x6d,0xa5,0x69,0x6e,0x48,0x9a,0x59,
    0x18,0x66,0x5a,0x3a,0x4b,0xa3,0x5f,0x84,0xca,0xd2,0x54,0xb0,0x92,0xb4,0x72,0x64,
    0x39,0x22,0x25,0x49,0x42,0x2b,0x25,0xd2,0xca,0x11,0x62,0x51,0x0e,0x2c,0x07,0xe5,
    0xd0,0xbf,0x40,0x92,0x24,0x73,0x15,0x59,0xf7,0xdc,0xfb,0x3a,0x7b,0x4e,0x0f,0x49,
    0x83,0xcb,0xe7,0x39,0xef,0xf3,0xed,0x7d,0xce,0x3d,0xf7,0x7e,0x3e,0x4b,0xa7,0x86,
    0x15,0x24,0x89,0x4b,0x8a,0x92,0xc2,0x64,0xb6,0x4b,0xc2,0x5f,0xbf,0x24,0x95,0x38,
    0x9e,0x35,0xfe,0xd9,0x3b,0xc9,0x0f,0x72,0xc3,0x9c,0xe6,0x39,0xd5,0xeb,0x9e,0x5e,
    0x56,0x3d,0xee,0x8e,0x31,0x62,0x57,0x9c,0xa4,0x83,0xbd,0xe8,0xae,0x4f,0x0a,0x92,
    0x8c,0x7f,0xca,0x5a,0xbd,0x74,0x65,0x8b,0xe0,0x15,0x7e,0x9d,0xf7,0xab,0xaf,0xb7,
    0x13,0xbc,0x40,0x62,0xf8,0x5f,0x15,0x21,0xa6,0xf8,0x24,0x49,0x63,0x92,0x97,0x54,
    0xc5,0xb4,0xc9,0x30,0x9e,0x8a,0x39,0xb0,0x42,0x83,0xa5,0xc0,0xfa,0x1a,0x2c,0x0d,
    0xd6,0xdf,0x60,0x19,0xb0,0x41,0x06,0xcb,0x03,0x2b,0x35,0x58,0x3e,0x58,0x99,0xc1,
    0x0a,0xc0,0x86,0x1b,0xac,0x10,0x6c,0xa4,0xc1,0x7a,0x81,0x55,0x19,0xac,0x08,0x6c,
    0x8c,0xc1,0x7a,0x83,0x8d,0x33,0xd8,0x75,0x60,0x13,0x0d,0xd6,0x07,0x6c,0x8a,0xc1,
    0x8a,0xc1,0xee,0x0a,0xbd,0x4b,0xf7,0xf4,0x40,0xfa,0xb8,0xd8,0x3f,0x6f,0xa6,0x67,
    0x2a,0x97,0x1b,0x59,0x7a,0x7f,0x13,0x72,0x89,0xf7,0x4a,0x05,0x7d,0x3a,0xf4,0x4b,
    0x7e,0x0f,0xf4,0xbf,0xf2,0xa9,0xbd,0xd2,0xdb,0xe7,0xc3,0xa1,0xb4,0xfa,0xde,0xda,
    0xfe,0xde,0xa2,0xd8,0xe0,0x25,0x7e,0x35,0x7d,0x3a,0x77,0x9a,0xca,0xd2,0xd7,0x05,
    0x0b,0x3a,0xa7,0xaa,0x3c,0xc4,0xaf,0xba,0xa2,0xcd,0x77,0xaa,0x2c,0x3d,0xfe,0xb0,
    0x61,0x69,0xdd,0x00,0x2f,0x97,0x91,0x43,0xf6,0xf3,0x46,0x2f,0x97,0x23,0xa7,0x90,
    0x87,0xb3,0x0f,0x99,0x80,0x67,0x92,0x5b,0xb0,0x15,0xbc,0x16,0xb9,0xc2,0xf8,0x8f,
    0xc0,0x5e,0xfc,0x25,0x7e,0x25,0xf1,0x92,0x50,0x6f,0xbf,0xd0,0xa3,0x72,0x56,0x99,
    0x59,0x95,0xff,0xb3,0xca,0x7a,0x9e,0x99,0xe4,0x36,0xf6,0xb7,0x0a,0x0e,0x22,0x57,
    0x83,0x55,0x52,0xd3,0x68,0x38,0x89,0xfd,0x18,0x74,0xe5,0x46,0x3f,0x9e,0x99,0x13,
    0xfd,0x84,0x1e,0xdf,0xa8,0x97,0xe7,0x64,0x38,0xab,0xfd,0x0c,0xea,0x52,0x79,0x2e,
    0xfb,0x3f,0xd8,0x7b,0x2e,0x44,0xc7,0x11,0xed,0xf9,0x53,0x79,0xa8,0xdf,0xcb,0x45,
    0xfe,0xb9,0x90,0x7c,0x0f,0x80,0x2f,0x82,0xbf,0xc8,0x8b,0x73,0xf2,0x2d,0xc9,0x91,
    0x57,0xd0,0x53,0xf1,0x5f,0x09,0xdf,0x32,0xa3,0x6f,0x61,0x96,0x55,0xde,0xc8,0x59,
    0x91,0x3d,0x79,0x19,0x7e,0x69,0xa3,0xdf,0xc9,0xb9,0xd1,0x99,0xd8,0x6d,0xf2,0x89,
    0xbc,0x3f,0x48,0xcf,0xcd,0x10,0xff,0x03,0xe4,0xca,0x18,0xff,0x43,0x39,0xfd,0x3e,
    0xc6,0xf9,0x52,0xf9,0x24,0xf3,0xaa,0xf2,0x69,0x33,0x43,0xe7,0xe0,0x72,0x80,0xfa,
    0xcf,0x71,0x17,0xa5,0xc3,0xbe,0xe4,0x85,0x3a,0x33,0xf0,0x11,0xac,0xdb,0x23,0xb2,
    0x57,0x75,0xcc,0xe3,0x48,0x66,0x6e,0x9e,0xaf,0x50,0xe6,0x6d,0x14,0xd8,0x48,0xd3,
    0xf7,0x16,0x66,0xf9,0x56,0xf4,0xd3,0x7c,0x04,0x99,0x83,0xdb,0x99,0x95,0xd1,0xc4,
    0x13,0x9b,0x1a,0xf0,0x17,0xbc,0x8d,0xc8,0x63,0xf1,0xab,0xc1,0x6f,0x02,0x77,0x41,
    0x35,0x73,0x53,0xc7,0x8c,0x4c,0x02,0xff,0xc0,0xdb,0x14,0x87,0x5a,0x22,0x26,0xb3,
    0x73,0xc5,0x33,0xaf,0x83,0xcf,0x1f,0xde,0xbe,0x96,0xbb,0xa3,0x8e,0x7a,0xe4,0xf7,
    0x7c,0xef,0x57,0xc6,0xfd,0x31,0x16,0xdb,0x67,0xe9,0xd7,0x34,0xf0,0x26,0xbf,0x1b,
    0xe1,0xac,0xb8,0x88,0xa9,0xdd,0xef,0x3e,0x86,0xc6,0x92,0xe7,0x65,0xdf,0x0b,0xb1,
    0x9b,0xe4,0xa2,0x4d,0x1e,0x3e,0x53,0x4c,0x0d,0x33,0xa9,0x61,0x86,0xa9,0x61,0x16,
    0xb8,0xd6,0x50,0x0f,0xa6,0x35,0x34,0x9a,0x1a,0xea,0xc3,0xdd,0x95,0x04,0x4c,0xf2,
    0x36,0x98,0x1a,0x66,0x93,0xdb,0x99,0x1a,0xe6,0x80,0x6b,0x0d,0xc3,0x5c,0xc4,0xd4,
    0x4e,0x6a,0xd0,0x58,0x8d,0xa6,0x86,0xc9,0x2e,0xda,0xd4,0xe1,0xd3,0x60,0x6a,0x98,
    0x47,0x0d,0x73,0x4d,0x0d,0xf7,0x81,0x6b,0x0d,0xf3,0xc1,0xb4,0x86,0x66,0x53,0xc3,
    0xfc,0xc0,0x27,0x09,0x98,0xe4,0x6d,0x62,0x8e,0x24,0xef,0x02,0x72,0x4f,0x76,0xd9,
    0xb3,0x2b,0x1c,0xd5,0xb6,0xd9,0x70,0xac,0xc5,0xae,0x11,0xbf,0x26,0xf8,0xc8,0x99,
    0x7e,0x90,0xf3,0xac,0x33,0xf7,0x10,0x9c,0x97,0x98,0x99,0x7b,0x18,0xfc,0x79,0x66,
    0x6e,0x29,0x98,0xc4,0x5d,0xc3,0x3d,0xfa,0x08,0xf8,0x32,0x2f,0x2f,0x0c,0xcf,0x18,
    0xfb,0x31,0x7c,0x1e,0x05,0x93,0xb8,0xea,0xb3,0x1c,0x7c,0x8b,0xb7,0x19,0x11,0x6c,
    0x63,0x9c,0xe5,0xf0,0x91,0xbb,0xe3,0x71,0xf8,0xac,0x80,0x8f,0xec,0xd5,0x13,0xe0,
    0x6b,0x38,0xff,0xab,0xc0,0xee,0xf7,0xf5,0xca,0x99,0x5b,0xdd,0x93,0x3b,0xf6,0x66,
    0x95,0xd9,0x93,0x35,0xc4,0x6b,0x31,0x7b,0xf2,0x24,0xb8,0xee,0xc9,0x53,0x60,0xba,
    0x27,0xeb,0xcc,0x9e,0x88,0x6e,0xad,0x5f,0xeb,0xe8,0xf3,0x5a,0xe6,0x4a,0x78,0x3c,
    0x43,0xee,0x04,0xbf,0x6e,0x7e,0xff,0xe9,0x7f,0x4b,0xac,0x0b,0xf8,0x5c,0x08,0x77,
    0x50,0xcc,0xf5,0x33,0x7e,0x7d,0xf0,0xb9,0x62,0x72,0x89,0xee,0xa2,0x5f,0x97,0xf0,
    0xbb,0x14,0xde,0xf7,0x05,0x21,0xd7,0xaf,0xd4,0x36,0x04,0x7f,0x79,0x8f,0x6e,0x82,
    0xc7,0x65,0xf4,0xa2,0x7b,0x11,0xec,0x37,0xf0,0x52,0xe6,0xa4,0x9b,0x98,0x17,0x8d,
    0xdf,0x2f,0xc4,0x2a,0xc9,0xb1,0x11,0x4e,0x7f,0xfb,0x6c,0xdd,0x60,0x97,0xe1,0x30,
    0xc5,0xc5,0xb8,0x97,0xf0,0xbd,0xc8,0xf9,0x91,0x3d,0xa8,0x70,0x51,0xaf,0xfd,0xd0,
    0x1e,0xad,0xa7,0x47,0x8e,0x7a,0x8b,0xdc,0xbf,0x7b,0x74,0x95,0x9c,0x57,0x4d,0x8f,
    0xc4,0x78,0xbd,0xe9,0x51,0x2f,0x97,0xed,0x91,0xe8,0x9c,0x5f,0x19,0x17,0xfd,0xe4,
    0xa9,0x3d,0xca,0x77,0xd9,0x1e,0xad,0xcf,0xe9,0x51,0x81,0x8b,0x7a,0xdb,0xa3,0x42,
    0x17,0x71,0xed,0x51,0x11,0x31,0x25,0xbe,0xfa,0xa5,0xe1,0x52,0x92,0x63,0x23,0x9c,
    0xb4,0x47,0x82,0x69,0x8f,0xa6,0xba,0x18,0x57,0x78,0xa5,0xe1,0xaa,0x3d,0x1a,0xe5,
    0xa2,0xbe,0x02,0x9e,0xda,0xa3,0x0d,0xf4,0x28,0x45,0xbd,0xa5,0x39,0x3d,0xea,0x4b,
    0x4e,0x79,0x6a,0x8f,0x6e,0x70,0xd1,0x4f,0x7b,0x34,0xd4,0xf4,0x48,0x74,0x25,0x7e,
    0x0d,0xc4,0x6f,0xa0,0xe9,0xd1,0x20,0xd3,0xa3,0x0d,0x39,0x3d,0x1a,0xec,0xa2,0xde,
    0xf6,0x68,0x88,0x8b,0xb8,0xf6,0xa8,0x94,0x98,0x25,0xa6,0x47,0x03,0xe0,0x52,0x92,
    0x63,0x33,0xd4,0xf4,0xa8,0xd4,0xf4,0xe8,0x2e,0x17,0xe3,0x0a,0xaf,0x01,0x70,0xd5,
    0x1e,0x55,0xb9,0xa8,0x97,0x5e,0xa5,0x88,0xa7,0x67,0x6f,0x1d,0xb3,0x28,0x76,0xd3,
    0x99,0xb5,0x66,0x7c,0x4a,0x5d,0xf6,0xcc,0x6f,0xe2,0xcc,0x6f,0x34,0x67,0xfe,0x25,
    0x70,0x3d,0xf3,0x9b,0xc1,0xf4,0xcc,0x6f,0x35,0xe7,0x70,0x73,0xb8,0xa3,0x92,0x64,
    0x07,0x79,0x77,0x98,0xfb,0xe4,0x75,0x62,0xef,0x34,0xb1,0xdf,0x00,0xd7,0xd8,0x6f,
    0x82,0x69,0xec,0x56,0x13,0x5b,0x74,0xbb,0xfc,0x6a,0x25,0xf6,0x2e,0x33,0x07,0x6f,
    0x51,0x97,0x7c,0x57,0x7c,0x46,0xac,0xb7,0xc1,0x77,0xd3,0x0b,0xf5,0x6b,0xa5,0x17,
    0x62,0xf3,0x0e,0x39,0x77,0x60,0xbf,0x8b,0xbc,0x6d,0x26,0xaf,0xd8,0xec,0xf1,0xab,
    0x0d,0xff,0x3d,0x26,0xef,0xbb,0x26,0xef,0x3c,0xff,0xe5,0x25,0xdf,0x64,0xef,0x81,
    0x4d,0x77,0xd9,0xef,0x96,0x54,0x78,0x77,0xe5,0x07,0xfd,0x5e,0xfc,0x74,0xc9,0x9d,
    0x2e,0xf8,0x3e,0x7c,0xf7,0x86,0x58,0xbd,0xc2,0x5e,0xbd,0x4f,0xac,0x7d,0x7c,0x3b,
    0xe5,0x99,0x6f,0x3e,0xa9,0x49,0x39,0xb5,0x99,0xfd,0x9d,0x45,0xee,0x56,0xfc,0xf7,
    0x60,0xbb,0x15,0xdb,0x2d,0x86,0xff,0xb6,0xff,0xe0,0xff,0xea,0x35,0xf8,0xbf,0x02,
    0xcf,0xed,0xd8,0x6c,0x33,0x3c,0x5f,0xc3,0x67,0xfb,0x35,0x78,0x6a,0xee,0xad,0x86,
    0xe7,0x4c,0x17,0xb9,0xb6,0xe1,0xbf,0x85,0x1c,0xc3,0xc3,0x3c,0x44,0xfd,0x7e,0xbe,
    0xf9,0xe4,0x9b,0xf2,0x20,0xb8,0xce,0xd3,0x47,0xcc,0xd3,0x21,0x33,0x4f,0x1f,0x83,
    0xeb,0x3c,0x7d,0x02,0xa6,0xf3,0x74,0xc4,0xec,0xab,0xe8,0x0e,0xfb,0x75,0x14,0x6e,
    0x47,0x4d,0xec,0xcf,0x89,0x7d,0xcc,0xc4,0xfe,0x02,0x5c,0x63,0x7f,0x09,0xa6,0xb1,
    0xdb,0x4d,0x6c,0xd1,0x1d,0xf7,0xeb,0x04,0xb1,0x4f,0x98,0xf7,0xf4,0xd7,0xc4,0x3e,
    0x69,0xde,0xd3,0xdf,0x80,0x9f,0xe4,0xbb,0xeb,0x5b,0xb0,0x15,0x26,0xdf,0x77,0xe0,
    0x4b,0xc8,0xd7,0x61,0xf2,0x89,0xee,0x94,0x5f,0x1d,0xe4,0x3b,0xc5,0xfb,0x45,0xfa,
    0x36,0xce,0x45,0x9f,0x83,0x49,0xf6,0xfb,0x4c,0xed,0x3a,0xd8,0x0f,0xb1,0xab,0x77,
    0xd1,0xe6,0x04,0x3e,0xa7,0x0c,0x9f,0xef,0xe1,0x73,0xda,0xf0,0xf9,0x01,0x5c,0xf9,
    0x74,0x1a,0x3e,0xa2,0x3b,0xe3,0x57,0x27,0x79,0xce,0x18,0x3e,0xe3,0xe1,0x53,0x6f,
    0xee,0x29,0xb5,0xeb,0x34,0x7c,0x1a,0x5c,0xb4,0xe9,0xc0,0xe7,0x8c,0xe1,0xf3,0x23,
    0x7c,0x76,0x1a,0x3e,0x3f,0x81,0x2b,0x9f,0x2e,0xc3,0x47,0x74,0x67,0xfd,0xea,0x22,
    0xcf,0x59,0xc3,0x67,0xa2,0x8b,0xff,0x37,0x34,0xb8,0xec,0xbc,0xaa,0x5d,0x97,0xe1,
    0x73,0x8f,0x8b,0x36,0x9d,0xf8,0x9c,0xc5,0xb6,0x1d,0xdb,0xe3,0xe6,0xbb,0xf9,0x2b,
    0xfa,0x9d,0x36,0x79,0x6a,0x5c,0x16,0x4f,0x72,0x7c,0xdb,0x4d,0x9e,0xbb,0x5d,0xcc,
    0xd5,0x85,0xcf,0x71,0x6c,0x8f,0x60,0x7b,0x98,0x73,0x77,0x20,0xdc,0x75,0x31,0xde,
    0x41,0xce,0x5d,0x01,0x67,0x35,0x9d,0xe3,0x73,0xc4,0xc4,0x6f,0x74,0x31,0x47,0x3b,
    0xfe,0x12,0x6f,0xaa,0xf7,0x38,0x8f,0xee,0x2f,0x3f,0x25,0x13,0xfd,0xfa,0x07,0x5b,
    0x44,0x19,0xb8,0xa8,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform sampler2D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
