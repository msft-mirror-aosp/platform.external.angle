// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000001.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000001[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x90,0x97,0x55,
    0x15,0x7e,0xcf,0xdd,0x65,0x3f,0xd0,0x11,0x4a,0xf9,0xb2,0xe5,0x6b,0x19,0x14,0x62,
    0x67,0x5d,0x36,0xd8,0xa8,0x05,0x61,0x05,0x05,0x62,0x05,0x4d,0x99,0x8a,0x85,0x48,
    0x3e,0x46,0x8c,0x01,0xd6,0xc0,0xf8,0xda,0x08,0x08,0x42,0xc4,0x4c,0x76,0xa1,0x2d,
    0x31,0xaa,0x7f,0x2c,0x85,0x69,0xfc,0xa7,0xa6,0x4c,0x9a,0x89,0x76,0x35,0x41,0x14,
    0xa1,0x21,0x4a,0x88,0x0c,0x54,0x42,0xa8,0xc9,0x0f,0xbe,0xb4,0xb1,0xfb,0xbc,0xe7,
    0x39,0xbc,0x67,0xdf,0x59,0x7e,0x33,0x77,0xde,0xf7,0x3e,0xe7,0xdc,0x73,0x9e,0x7b,
    0xee,0xb9,0xf7,0x9e,0xdf,0x5b,0x10,0x06,0x15,0x27,0x89,0x24,0x5d,0x93,0x92,0xa4,
    0xb8,0x20,0x49,0x7f,0x9f,0x48,0x42,0x44,0x92,0xe4,0x9a,0xa4,0x28,0x7d,0x4e,0xac,
    0xbf,0xa7,0xbe,0x72,0xe9,0xb2,0x79,0x95,0x23,0x46,0x56,0x41,0x7e,0x5d,0xa2,0x8a,
    0x90,0x75,0x4b,0x8a,0x93,0x2e,0xf1,0x59,0x18,0xdb,0xa2,0xfb,0x1e,0x58,0x0c,0xfc,
    0x50,0x6c,0x67,0x62,0xeb,0x1e,0xc7,0x17,0xa6,0xf6,0x92,0x68,0x5d,0x5b,0x6a,0x2f,
    0xa2,0xe3,0xe2,0xb3,0x28,0xd5,0x49,0x92,0x49,0xd1,0x42,0x9d,0xba,0x4e,0x06,0xf1,
    0x69,0x98,0x10,0xf3,0x7a,0x81,0xd8,0x00,0x87,0x15,0x10,0xab,0xa2,0xfd,0xf1,0xb4,
    0x5f,0x25,0xaa,0x33,0x21,0x67,0x7f,0x62,0x1c,0x31,0x81,0xb6,0xa0,0x7f,0x47,0x7c,
    0x96,0x5f,0x91,0x69,0x7f,0xa0,0xe3,0xbb,0x26,0x27,0x5f,0x43,0x79,0x21,0xfb,0xcd,
    0xb9,0xf9,0xb4,0x74,0x32,0x9f,0x96,0x4e,0xe6,0xd3,0xd2,0xc9,0x7c,0x5a,0x3a,0x99,
    0xcf,0x36,0x9b,0x4f,0xa1,0xea,0x6c,0xef,0x64,0x3e,0xdb,0xdd,0x7c,0x5a,0x73,0x7c,
    0x5b,0xc9,0xd7,0xe4,0x87,0xd2,0xf5,0x4d,0x92,0x32,0xfa,0x3c,0xd2,0x09,0xdf,0x23,
    0x8e,0x6f,0x09,0x7d,0x1c,0x71,0x36,0x4e,0xe7,0x7c,0x9c,0xa6,0x8f,0x02,0xf6,0xcf,
    0xd0,0xc7,0x8d,0xec,0xbf,0x21,0x1d,0xf5,0xd1,0x1f,0xe8,0xfa,0x1f,0x88,0xea,0xf7,
    0x89,0xed,0xfa,0xe8,0x25,0xa4,0xf6,0x0a,0x52,0x7b,0x78,0xef,0x11,0x75,0x8a,0x18,
    0x27,0xfc,0x7a,0xc5,0x7e,0x31,0xe3,0x12,0xd8,0x2f,0x61,0x1f,0xeb,0x72,0x43,0x44,
    0x4b,0xe3,0xb3,0x67,0xb4,0xd0,0x83,0xe3,0xa0,0x53,0x9e,0xda,0x52,0x1d,0xf4,0x87,
    0xc6,0x67,0x29,0x6d,0x0c,0xa3,0x8f,0x1a,0xfa,0xb0,0x7e,0x2d,0xf5,0xad,0x3f,0x96,
    0x6b,0x58,0xc6,0x5c,0x2e,0x21,0xd6,0x2f,0x4a,0xeb,0xd8,0x2f,0xe7,0x73,0x9c,0x1b,
    0x77,0x1b,0x79,0x94,0x31,0x47,0xeb,0x88,0xf5,0x63,0x3e,0x8e,0x4f,0xe5,0x85,0xc9,
    0xed,0xe4,0x33,0x21,0xf5,0xad,0xfd,0x3b,0x5c,0x1c,0x26,0xd2,0x8e,0xd0,0xf6,0xc4,
    0x74,0xcd,0x32,0xce,0xe8,0x4f,0xe6,0x5a,0xc0,0x5e,0x3d,0xc7,0x96,0x38,0x2e,0x0d,
    0x6e,0x3c,0xfa,0x73,0x73,0x31,0x68,0xcc,0xe9,0x3f,0x14,0xdb,0xc7,0xe9,0xfa,0x94,
    0x26,0x4d,0x8c,0xa1,0xd0,0x67,0xfe,0x09,0x9f,0xdf,0xe2,0x7b,0x13,0xe7,0x80,0xfe,
    0x1a,0xb7,0x76,0xeb,0xd2,0x75,0xcf,0xd6,0x6e,0x03,0xfb,0x05,0xce,0xe7,0x56,0xc6,
    0xaf,0x8c,0x7b,0xac,0x84,0x18,0xe2,0xdc,0x92,0x8b,0x73,0x33,0xf5,0xb0,0x57,0x5a,
    0x5c,0x5c,0xb1,0x2f,0xb6,0x91,0xd3,0x0f,0xe8,0x6f,0x3b,0x39,0xa1,0xdf,0xea,0x38,
    0xfc,0x8e,0xf3,0x32,0x0e,0x78,0xdf,0x93,0x32,0x5e,0x3b,0x16,0xf2,0x83,0xcc,0x2f,
    0x8b,0xeb,0x6b,0x9c,0xf3,0x41,0xda,0x7b,0x8d,0xe7,0x9f,0xa4,0xbe,0x0b,0xd3,0xfd,
    0x62,0x39,0x0a,0xfd,0xbf,0x30,0xd7,0x8e,0x50,0x1f,0xfd,0xa3,0xc4,0x20,0xff,0x2b,
    0xdf,0x8b,0x9d,0xff,0x93,0x8c,0x59,0x45,0x44,0x31,0xd7,0x53,0xc4,0xac,0xed,0xe1,
    0x9a,0xbc,0x45,0x3f,0xb6,0x06,0x49,0x27,0x6b,0xf2,0x36,0xdf,0xdf,0xa2,0x7f,0xf4,
    0x4f,0x13,0x33,0xfe,0x67,0x72,0x79,0x25,0xa2,0x7d,0xf3,0x5f,0x23,0x1d,0xfd,0x9f,
    0x74,0xba,0x63,0x45,0x63,0x09,0x5f,0xe3,0xf8,0x6e,0x73,0xff,0x06,0xfb,0xe5,0x6e,
    0x7d,0x9f,0x8e,0xd8,0x6c,0x37,0xd7,0x5f,0xc5,0xfe,0x81,0x97,0x5f,0xbe,0xd5,0x7c,
    0xfd,0x3a,0xe7,0x0b,0x72,0xd8,0x7a,0x41,0x34,0x4e,0x45,0x9c,0xfb,0x09,0xe9,0x98,
    0x8f,0xf6,0x0b,0xc4,0x30,0xe6,0x1f,0x14,0x42,0xb7,0x96,0xfd,0x37,0xc4,0x62,0x5b,
    0x94,0xae,0x21,0xce,0xa0,0x46,0xe6,0x3e,0xf6,0x47,0x65,0x5c,0xe9,0x74,0xfd,0x0a,
    0x70,0x26,0x74,0x49,0xed,0x15,0xd2,0x36,0x72,0xe0,0x62,0x44,0x70,0xff,0x5d,0x88,
    0xbd,0xf3,0xb4,0xf5,0x61,0x7c,0xc7,0xf9,0x71,0x41,0x54,0x8e,0xe7,0x18,0xe6,0xce,
    0x61,0xe6,0xc7,0xb4,0x68,0x15,0x76,0xff,0x4c,0xec,0xb0,0x5b,0xab,0xba,0x68,0x11,
    0x79,0xf0,0x37,0xe6,0x06,0xf6,0xf5,0x18,0x9e,0x75,0xaf,0x13,0xff,0x65,0xd4,0xc1,
    0xb9,0x75,0x8c,0x36,0x80,0x3f,0x11,0x75,0x10,0x93,0xe3,0xc4,0xc1,0xe9,0x04,0xed,
    0x5e,0x8e,0x32,0xe0,0x7f,0xc7,0xfc,0xc9,0x1b,0xef,0x97,0xe2,0xf3,0x3c,0x79,0x9e,
    0xa0,0x1f,0xe4,0xc6,0xbf,0x98,0x17,0xc6,0xfb,0x1d,0xe6,0x85,0xf1,0x3e,0x4b,0xec,
    0x1d,0xc7,0xbb,0x89,0x7b,0xfa,0x1c,0xe5,0xb3,0xa3,0x26,0xf6,0xe5,0xbf,0x69,0xef,
    0x1c,0xd7,0x03,0xf3,0xb9,0x3b,0xf2,0xc7,0xda,0xbd,0x4b,0x79,0xe2,0xb0,0x0f,0x88,
    0x89,0xf1,0x23,0xdf,0xf3,0xa9,0x4c,0xf3,0xa2,0x3d,0xe8,0x3e,0x48,0xe7,0x12,0xa0,
    0xa7,0x32,0x8c,0xff,0x43,0x50,0x1b,0x90,0x15,0x89,0xca,0x76,0x45,0xdb,0x88,0xcd,
    0x47,0x94,0x63,0x7d,0xce,0x47,0xbe,0x17,0x13,0x95,0x5b,0x8c,0x3e,0x4a,0xe3,0x96,
    0xa4,0x78,0xba,0x76,0xf1,0x79,0x6d,0xb4,0x3a,0x91,0x67,0x9f,0xf0,0x5c,0x85,0x8d,
    0x26,0xe6,0x30,0x40,0xc8,0xda,0xa2,0x8f,0xf4,0xfc,0x12,0xdd,0x33,0xc0,0x4d,0xa7,
    0x50,0x14,0x7f,0x81,0x73,0x04,0x2f,0xd8,0x00,0x5e,0x17,0x79,0xe3,0x7c,0x2e,0x15,
    0x3d,0x8b,0x26,0xd1,0xa6,0xad,0x3b,0x62,0xd8,0x55,0x54,0x6e,0xf1,0x0f,0x41,0xb1,
    0xae,0x92,0xc5,0xdf,0x72,0xa2,0x20,0x68,0x4e,0x40,0x67,0x07,0x73,0xa2,0x30,0x28,
    0x8e,0x9c,0x28,0x0d,0xd9,0x7c,0x81,0x77,0x89,0x0d,0x58,0x9a,0xcb,0x21,0xf3,0x51,
    0xe4,0x7c,0x04,0xe6,0xfb,0xb3,0xf4,0x51,0x4c,0x1f,0x45,0xce,0x47,0x49,0x50,0x1c,
    0x6b,0x66,0xf6,0x4a,0x83,0xae,0x0b,0xe4,0x5d,0x83,0xf2,0xb8,0x40,0x5d,0xf8,0xfa,
    0x05,0xc7,0x5e,0x27,0x2a,0x07,0xbf,0xee,0x92,0xf1,0x03,0xde,0x2d,0xb6,0xee,0xcc,
    0xd1,0x6e,0xa2,0xf6,0x2f,0x71,0x7d,0x80,0x5b,0xde,0x5c,0x2f,0xd9,0x3e,0x32,0xac,
    0x87,0x8b,0xd1,0x33,0xcc,0x81,0x9e,0xa2,0xba,0x90,0x99,0xff,0x5e,0xa2,0x38,0xfc,
    0xf7,0x71,0xfe,0x81,0xf7,0x8e,0xad,0x0f,0xfd,0xf7,0x76,0xfe,0x3e,0x45,0x7f,0xe2,
    0xfc,0xf5,0xa5,0x3f,0x71,0xfe,0xfa,0x89,0xea,0xf6,0x25,0x77,0xb3,0x85,0xa7,0xc5,
    0xa6,0x3f,0xfd,0x63,0x3e,0xfd,0xe8,0xd3,0xb8,0x0d,0x10,0x95,0x83,0x5b,0xb9,0xe3,
    0x06,0x7c,0x20,0x6a,0x2a,0xda,0xc3,0xfb,0x5a,0xf2,0x18,0xcc,0x39,0x36,0x38,0x6e,
    0x37,0xbb,0xb5,0x34,0x6e,0x43,0x44,0x75,0x6f,0x26,0x37,0xb3,0x55,0xee,0xb8,0x0d,
    0xa5,0x7f,0xf0,0x1d,0x42,0x9f,0xc6,0xed,0xd3,0xa2,0x72,0x70,0xab,0x70,0xdc,0x80,
    0x0f,0x8b,0xad,0x82,0xf6,0x86,0xb9,0xb8,0x55,0xba,0xb8,0x19,0xdf,0x5b,0x44,0x71,
    0xcf,0x77,0x38,0xf9,0x16,0x38,0xbe,0xd5,0xa2,0xba,0xc3,0xc9,0xd7,0xec,0x57,0x38,
    0xbe,0x9f,0x21,0x27,0xcc,0xa1,0x9a,0x3c,0xc0,0x6f,0xa4,0xe3,0x07,0x9d,0x11,0xb1,
    0x8d,0xe4,0xf8,0x11,0xb9,0xbc,0x02,0xbe,0x3e,0xfa,0xc4,0x3e,0x18,0x2d,0xd9,0x7e,
    0xaa,0x8b,0xbb,0x11,0xf7,0x5a,0x5d,0x6e,0xaf,0xe2,0xde,0xab,0xe1,0x7e,0x4d,0xeb,
    0x3c,0xea,0xc0,0x6f,0x75,0xe8,0x78,0x2f,0x7c,0x92,0x7b,0x03,0xcf,0x2b,0xb9,0x1b,
    0xd4,0x0f,0x7e,0xdf,0x25,0x76,0x43,0x50,0x1c,0xb6,0x0c,0xeb,0x19,0x14,0xaf,0x4d,
    0x94,0x0b,0xce,0x8d,0x5e,0xa1,0x23,0x97,0xc9,0xd4,0xb3,0xb3,0xa3,0x77,0x50,0x9d,
    0xcd,0xb4,0x71,0xa3,0xb3,0x61,0x71,0x2d,0x0b,0x8a,0xd7,0xf0,0xde,0x18,0xee,0xce,
    0x08,0xc8,0xfa,0xc6,0x36,0x80,0xbc,0xf1,0xb4,0x71,0xe5,0x1c,0xd7,0xc0,0x71,0x55,
    0x6e,0x1c,0x64,0x83,0x62,0xbb,0x89,0xe3,0x6e,0x72,0xe3,0x86,0x70,0xdc,0x5c,0x8e,
    0xbb,0xc5,0x8d,0x83,0x6c,0x68,0x6c,0x15,0x1c,0x57,0xe1,0xe2,0x54,0x19,0x74,0x3e,
    0x05,0xbc,0x1b,0xaa,0xa9,0x33,0xd4,0xe9,0x0c,0xa3,0x4e,0xc8,0xe9,0xc0,0xc7,0xc7,
    0x31,0x40,0x78,0x1f,0xe4,0xf4,0x07,0x53,0x5f,0x72,0xfa,0x55,0x4e,0xbf,0xaf,0xd3,
    0xef,0x4f,0xfd,0x24,0xa7,0x3f,0xdc,0xe9,0x57,0xa7,0xe7,0xde,0x35,0xa9,0xfe,0xd1,
    0xa0,0xbc,0x31,0x8f,0x61,0x9c,0xdb,0x60,0xc6,0xa6,0x3f,0x63,0x6b,0xb6,0xa7,0xb8,
    0x9c,0x37,0xec,0x4e,0x77,0xa6,0xac,0x27,0x36,0x55,0x54,0x17,0xb2,0xdd,0x8c,0xe9,
    0x3d,0xa2,0xbe,0xa6,0x32,0xef,0xa6,0xbb,0x7c,0x87,0xec,0xde,0xd8,0xa6,0x33,0xdf,
    0xef,0x75,0xfb,0xf1,0x4b,0xa2,0xb9,0xe7,0xf7,0xe3,0x97,0x45,0xf1,0x5a,0xde,0x2b,
    0xb0,0x3f,0x43,0x14,0x9f,0xca,0xbd,0x62,0xb6,0xa6,0xbb,0xbd,0xd7,0x20,0xca,0x03,
    0xf3,0x9f,0x41,0x9f,0xe0,0x32,0xcb,0x71,0x81,0xce,0xcc,0xd8,0x66,0x71,0xfc,0x4c,
    0xc7,0xe5,0x3e,0xc7,0xc5,0xee,0xca,0x39,0xa2,0xfb,0x00,0xb2,0x17,0x89,0xcd,0x15,
    0xc5,0x1b,0x5c,0x0e,0xcf,0x13,0xc5,0x6b,0xb8,0x2e,0x66,0x7f,0x96,0xe3,0x37,0x5f,
    0x94,0x23,0x38,0xcf,0x23,0x0f,0xf3,0xbd,0xc0,0xf9,0xb6,0x38,0x3f,0xc0,0xf9,0x42,
    0xf6,0x2c,0xfd,0x2c,0x14,0xc5,0x8f,0xba,0xfb,0x6b,0x91,0xa8,0xed,0x9f,0x53,0x67,
    0xb1,0xa8,0xde,0x22,0xce,0xbf,0xd1,0xcd,0x1f,0xb2,0x25,0xa8,0x33,0xc9,0x6f,0x09,
    0x6b,0x00,0xd4,0xc7,0x4b,0x73,0xe7,0x8a,0xb0,0x76,0x44,0xcd,0xb3,0x8c,0xf2,0x69,
    0x71,0x57,0xe3,0x7f,0x4a,0x4d,0xd0,0x3a,0xa8,0x3d,0x64,0x35,0x40,0x60,0xde,0xa0,
    0x16,0xfe,0x6c,0xd0,0x31,0xc8,0xa5,0xef,0x10,0x1b,0x15,0xf4,0xff,0x02,0x64,0x8f,
    0x45,0x0c,0x76,0x3e,0x17,0xd4,0xd6,0xa8,0x90,0xd9,0xfe,0x3c,0xc7,0x2e,0x93,0x8e,
    0xb6,0x6d,0xcc,0xe8,0xa0,0x3a,0xb0,0xb3,0x8e,0xd8,0x98,0xa0,0xb6,0x46,0x87,0x8c,
    0xc3,0xad,0xe4,0x07,0x0e,0x1b,0x89,0xd5,0x05,0xc5,0x47,0x39,0xbd,0xdb,0x82,0x8e,
    0x4f,0x1c,0xff,0xf1,0xc4,0xc4,0x61,0x13,0x88,0x41,0xf5,0x2e,0xd6,0x82,0xb7,0x07,
    0x1d,0x0f,0x7d,0xc8,0xeb,0x58,0x83,0x58,0x7c,0x1b,0x25,0xab,0x1b,0x2f,0x91,0x0f,
    0x72,0x02,0xe3,0x96,0xe4,0xce,0x7d,0xad,0x23,0x4b,0x53,0xdd,0x8b,0xd4,0x45,0xcd,
    0x51,0xc3,0xfb,0x02,0xe3,0x1b,0xa5,0x63,0x5d,0x7a,0x91,0xf9,0xb6,0x82,0xfe,0x56,
    0x38,0x7f,0x6d,0xb4,0x01,0x9d,0xcb,0xf1,0xb9,0x5a,0xb2,0x3a,0x75,0x6f,0xd0,0xfa,
    0x17,0xb2,0x4d,0xa2,0x32,0xab,0x53,0xd7,0x88,0xca,0xad,0x4e,0x5d,0x45,0xb9,0xe5,
    0x10,0xe4,0x2b,0x63,0x5b,0x45,0x9f,0x78,0xb7,0x3a,0x75,0x9d,0x64,0x75,0xea,0x5e,
    0x57,0xa7,0xae,0x17,0x95,0x59,0x9d,0xba,0x81,0xf9,0xb5,0xde,0xd5,0xa9,0x1b,0x45,
    0x71,0xdb,0x7b,0x9b,0xc8,0x63,0xa3,0xab,0x53,0x1f,0x11,0xfd,0x16,0x31,0x89,0x36,
    0x7d,0x9d,0xba,0x45,0x54,0x6e,0x35,0xe4,0xa4,0xa0,0xd8,0x96,0x4e,0xea,0xd4,0xc9,
    0xac,0x21,0x27,0xb9,0x1a,0xf2,0x0b,0x41,0x71,0xec,0x99,0x69,0xee,0x4e,0x00,0x3e,
    0x05,0xf9,0xc9,0xb3,0x76,0x8a,0xab,0x53,0xeb,0x9d,0x8f,0x7c,0x9d,0x7a,0x27,0x7d,
    0xd4,0x3b,0x1f,0x53,0x83,0xe2,0x58,0x33,0xb3,0x37,0xcd,0xd5,0xa9,0x77,0x05,0xe5,
    0x81,0x98,0x4e,0xa5,0x5f,0xdb,0xe7,0xdf,0x17,0x95,0x83,0xdf,0x56,0xb7,0x1e,0xc0,
    0x1f,0x8f,0x6d,0x2b,0xd7,0xe3,0x71,0xe6,0xc8,0x6a,0xf6,0xb7,0xba,0x7a,0xa2,0x55,
    0xb2,0x79,0x5b,0x4c,0x9f,0xc8,0xc5,0x74,0xac,0x64,0x31,0xdd,0x21,0x2a,0xb7,0xf9,
    0xee,0x14,0xc5,0x76,0xb8,0x98,0xda,0x19,0xf6,0x33,0xe2,0xc1,0x61,0x4f,0x39,0x5d,
    0xc3,0xbe,0x12,0x94,0x87,0xaf,0x37,0x66,0x04,0xc5,0x9f,0x72,0xf5,0xc6,0xcc,0xa0,
    0x78,0xad,0xd3,0xfb,0x6a,0x50,0xdc,0xd7,0x20,0xb3,0x43,0x47,0xfe,0x93,0xa9,0x67,
    0x73,0xf8,0x5a,0x50,0x1d,0xab,0x41,0xe6,0x38,0x1b,0x57,0xce,0xef,0xa0,0xb8,0xd5,
    0x20,0x2b,0xdd,0xfa,0x43,0x36,0x3f,0xb6,0x05,0x5c,0xaf,0x05,0xae,0x96,0xf8,0x3a,
    0xc7,0x59,0x0d,0xb2,0xc2,0x8d,0x83,0x6c,0x61,0x6c,0x8b,0x39,0x6e,0xb1,0x1b,0xd7,
    0xc8,0x71,0x56,0x83,0x2c,0x77,0xe3,0x20,0x7b,0x10,0x67,0x20,0xc7,0x2d,0x73,0x77,
    0xf4,0x37,0x83,0xce,0xc7,0x6a,0x90,0xe5,0xd4,0x79,0xd0,0xe9,0x2c,0xa5,0x4e,0xc8,
    0xe9,0x2c,0x0f,0xd9,0xfe,0x7f,0x35,0xa8,0x2d,0xd8,0x5e,0x4a,0x7f,0xe9,0x39,0x42,
    0xdd,0x85,0xce,0xde,0x22,0xda,0xb3,0x1a,0xc5,0x74,0x56,0x38,0x7b,0xaf,0x04,0xb5,
    0x09,0x1f,0x8b,0x38,0x6f,0xe8,0xae,0xa4,0xee,0x7c,0x67,0xef,0x7e,0xda,0xb3,0x1a,
    0xc6,0x74,0x56,0x3a,0x7b,0x07,0x82,0xda,0x84,0x8f,0xfb,0x19,0x7f,0x5b,0xbf,0xd5,
    0x2e,0x2f,0x36,0x10,0x6b,0x0a,0x8a,0xe3,0xdb,0xc9,0x5e,0x62,0xdf,0x0e,0x6a,0x07,
    0x32,0xbb,0xbb,0xd7,0x06,0xc5,0x1f,0x4a,0xb2,0x3b,0xf5,0x19,0x51,0xfc,0x69,0xde,
    0x97,0xbb,0xdd,0xde,0x82,0x6c,0x17,0xea,0x1c,0xee,0x25,0xbc,0x6f,0xe6,0x5e,0xda,
    0xc0,0x3c,0xde,0xc9,0xfd,0x82,0x6f,0x8d,0x1b,0x83,0x7e,0x67,0xb4,0xef,0x11,0x9b,
    0x82,0xea,0x35,0xf1,0x1b,0xd5,0xc3,0x41,0x7d,0xdd,0xcd,0x73,0x70,0x73,0x50,0x1d,
    0xdb,0x1f,0xc0,0x1e,0x21,0x26,0xe9,0x3d,0x53,0x94,0x7e,0x9b,0xdc,0x12,0x54,0x17,
    0xb2,0x87,0x9d,0xbd,0x47,0x83,0xee,0xbb,0xd9,0x3c,0xf3,0xbf,0x17,0x94,0xc3,0x16,
    0xae,0xff,0xa3,0xee,0x9e,0x7b,0x2c,0xa8,0x3c,0x49,0xb2,0x3b,0xff,0xb7,0xb9,0xbd,
    0xef,0xef,0xfc,0xe7,0x28,0xb7,0xbb,0xee,0x79,0x51,0x1b,0xbe,0x5d,0x1b,0x77,0x18,
    0x64,0x7b,0x78,0xee,0x57,0xf2,0xbb,0x19,0xc6,0x3e,0xef,0xea,0x85,0xad,0x41,0xef,
    0xa3,0xb6,0xab,0xd4,0x0b,0xcd,0x41,0x6d,0xf8,0x7a,0xa1,0x85,0xf5,0x42,0xb3,0xab,
    0x17,0xb6,0x05,0xb5,0xd5,0xe2,0xea,0x85,0xed,0x1c,0xbb,0xe7,0x2a,0xf5,0x42,0x6b,
    0x50,0x9d,0x66,0x57,0x2f,0xfc,0x30,0xa8,0xad,0x56,0x17,0x9f,0x1f,0x91,0x9f,0xaf,
    0x17,0x9e,0x0c,0x8a,0xb7,0x38,0xbd,0x1f,0x07,0x1d,0xef,0xeb,0x85,0x9d,0xc4,0x7c,
    0xbd,0xf0,0x13,0x62,0xbe,0x5e,0xf8,0x69,0xd0,0xf1,0xd0,0x87,0xfc,0x49,0xee,0x13,
    0xcb,0xaf,0xdd,0xee,0xfe,0xfe,0x90,0x7c,0xb0,0x2f,0x30,0x6e,0x57,0xee,0x5c,0x5f,
    0xed,0x74,0x2f,0x53,0x17,0x67,0x3f,0xc6,0xed,0x96,0x8e,0x75,0xc1,0x2a,0xc9,0x78,
    0xed,0x95,0x6c,0x9e,0xbf,0xe1,0x1e,0xf8,0xa3,0x28,0xbe,0x87,0xe7,0x51,0xbb,0xdb,
    0x03,0x90,0xb5,0xc5,0xd6,0x4e,0x5b,0x6d,0xa2,0xdf,0x09,0xf1,0x1d,0xf4,0x45,0xd1,
    0xef,0x84,0x96,0x37,0xd8,0x63,0x7f,0x22,0x6e,0xf5,0xc4,0x4b,0xa2,0x98,0x9d,0xad,
    0xfb,0x9d,0x6d,0xc8,0xf6,0xc5,0xb6,0x9f,0xb6,0xf7,0xb9,0xbb,0xe6,0x00,0xff,0xab,
    0xe3,0xfb,0xa7,0x7d,0x5b,0xad,0x8b,0x1e,0xe0,0xf7,0x15,0xc9,0xbe,0x4f,0x36,0xb8,
    0xff,0xbe,0xaf,0x52,0x66,0x35,0xf4,0x41,0x51,0xcc,0xff,0xb7,0x3f,0xe4,0xbe,0x01,
    0x98,0xde,0x61,0x51,0x5d,0xc8,0xbe,0x18,0x11,0xf8,0xff,0x7d,0x50,0xfc,0x80,0x64,
    0x67,0x95,0xf1,0xdc,0xcf,0xd8,0x43,0xef,0x25,0xde,0xf3,0x88,0x0b,0xc6,0xec,0x73,
    0x79,0x7f,0x54,0x3a,0xcf,0xfb,0xe7,0x18,0x9b,0xd7,0x19,0xf7,0x93,0x8c,0xcd,0x71,
    0x17,0x1b,0xc8,0x8e,0xc5,0x76,0x9c,0x3e,0x8f,0x31,0xc6,0xf8,0x86,0xfc,0x4f,0x7e,
    0x3f,0xb6,0x73,0xe6,0x94,0x28,0x8f,0x39,0xd1,0x2e,0xf2,0xe1,0x4d,0xea,0x9c,0x72,
    0x5c,0xde,0x16,0xc5,0xdf,0xbc,0xca,0x3e,0x39,0x23,0xaa,0x03,0x3e,0xb6,0x4f,0xce,
    0x8a,0xce,0xe1,0x0c,0xf3,0xc9,0xb8,0x1c,0xe7,0xfc,0xa1,0xb3,0x3f,0xa8,0x0e,0x62,
    0x72,0x96,0x9c,0x8d,0xe7,0xb9,0x1c,0xcf,0xff,0x90,0xa7,0xe5,0xe2,0x7f,0x45,0xc7,
    0xfb,0xbd,0xf4,0x2e,0x31,0xbf,0x97,0xde,0x23,0xe6,0xf7,0xd2,0xfb,0xa2,0xe3,0xa1,
    0xff,0x1e,0x73,0x77,0x6e,0xf4,0x03,0x9f,0xf0,0xf3,0x3e,0x39,0x5b,0xde,0xb6,0x4b,
    0xc7,0x6f,0xce,0x78,0xfe,0x2f,0x7a,0x19,0x15,0xdb,0xff,0x01,0x7c,0xab,0xda,0x3d,
    0x8c,0x1e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 8, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[256 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontMip)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     return texelFetch(font, ivec3(coordInGlyph, textChar), int(fontMip)). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontMip = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar < 95)
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontMip);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
