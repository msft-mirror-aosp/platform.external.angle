// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000046.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000046[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd5,0x65,
    0x18,0xc7,0xef,0x73,0x7e,0xe7,0x70,0x10,0x04,0xe4,0x41,0x08,0x97,0x0f,0x25,0x6c,
    0x36,0x08,0x8e,0x8b,0x8c,0x40,0x59,0xc7,0xa9,0x39,0x22,0xd1,0x6c,0xbe,0x69,0xcd,
    0x35,0xb1,0x82,0x4d,0x96,0x26,0x68,0x50,0x8a,0x0f,0xc9,0xf2,0x05,0x56,0xf0,0xc6,
    0xa7,0x60,0x6b,0xcc,0x9a,0x09,0xab,0xe0,0x45,0xc1,0xf4,0x45,0x5b,0xbd,0x69,0xad,
    0x95,0xba,0xd2,0x6a,0xf6,0x47,0xf4,0xe4,0xe6,0xd6,0x7d,0xdd,0xe7,0x73,0xe9,0xb5,
    0xb3,0x9a,0x6c,0xf7,0x7e,0xbf,0xfb,0x7b,0x3d,0x7d,0xbf,0xd7,0x7d,0xfd,0xee,0x43,
    0x14,0x5f,0x99,0x72,0x2e,0xe6,0x0a,0x5c,0xbe,0xfb,0xdd,0x65,0xff,0x4a,0x5d,0xdc,
    0x23,0xce,0x15,0xba,0xbc,0xf0,0x7c,0xba,0x63,0x7b,0x47,0xc3,0xeb,0xfb,0xbb,0x1a,
    0x9a,0x1e,0x4f,0x8b,0xbd,0xd8,0x45,0xc1,0x4f,0x6c,0x25,0x2e,0xe5,0x12,0xfe,0x29,
    0x6b,0xcf,0x4b,0xdd,0xbd,0x82,0x17,0xf9,0x75,0xc5,0xaf,0x45,0xde,0x4f,0xf0,0x94,
    0xe4,0xf0,0x6f,0x45,0x21,0xa7,0xc4,0x38,0xb7,0xd9,0x25,0x5d,0x39,0xf5,0x56,0xf2,
    0x54,0x2c,0x06,0x96,0x6f,0xb0,0x38,0xd8,0x22,0x83,0x45,0x60,0x15,0x06,0x4b,0x80,
    0x3d,0x60,0xb0,0x24,0xd8,0x83,0x06,0xcb,0x03,0x5b,0x61,0xb0,0x14,0x58,0x8d,0xc1,
    0xf2,0xc1,0x56,0x19,0x6c,0x01,0x58,0xbd,0xc1,0x0a,0xc0,0xd2,0x06,0x2b,0x04,0x6b,
    0x32,0xd8,0x42,0xb0,0x66,0x83,0x15,0x81,0xad,0x35,0x58,0x31,0xd8,0x53,0xa1,0x77,
    0xd1,0xdd,0x1e,0x48,0x1f,0xb7,0xf9,0xe7,0xc3,0xf4,0x4c,0xf7,0x0f,0x99,0xbd,0xf4,
    0x7e,0x19,0xfb,0x72,0x1f,0x15,0x0f,0xf6,0x28,0xf4,0x4b,0xde,0x17,0x7b,0x9f,0x3c,
    0xb4,0x4b,0xaf,0xab,0xfc,0x3e,0x45,0x4f,0xc4,0x5e,0xe9,0x3d,0x0b,0xb0,0x8b,0xad,
    0x10,0x7d,0x89,0x80,0x25,0x82,0x86,0x18,0xfa,0x5a,0xd9,0x17,0x99,0x5c,0xc5,0xf8,
    0x6b,0xad,0x32,0x72,0xb9,0xc0,0xab,0xf4,0x6e,0xaf,0xb5,0xa6,0xae,0xb2,0xfb,0x2c,
    0xf5,0x11,0x0e,0x15,0x9c,0x43,0x39,0x1c,0x2a,0x42,0xad,0x2c,0x56,0x87,0xbe,0x4a,
    0x38,0x89,0x7f,0x15,0xb6,0x94,0xb1,0x2f,0x65,0x36,0xc4,0xbe,0x0c,0x7b,0x59,0x98,
    0xa7,0x78,0xe8,0x67,0x1d,0xdc,0xb5,0xd7,0x1a,0x57,0x07,0x17,0xb5,0xaf,0xa6,0x8e,
    0xda,0xd7,0x70,0x7e,0xd2,0x8b,0x36,0x7c,0x13,0xc6,0x9e,0x21,0x5f,0xbd,0x67,0x23,
    0xf6,0xf5,0x60,0x76,0xa9,0x6f,0xbb,0xe9,0xfb,0x33,0x70,0x14,0xbc,0xda,0xbf,0x75,
    0xf2,0x1e,0x73,0xf7,0xfe,0x62,0x66,0x2f,0x31,0x5b,0x79,0xef,0xa4,0x4f,0xb2,0xdf,
    0x96,0xa3,0x67,0x37,0x7d,0x11,0xbe,0xbd,0xe4,0x8c,0x8c,0xbd,0x9f,0xef,0x40,0xec,
    0x27,0xe9,0x91,0xd5,0x73,0x2a,0xa7,0xef,0x67,0x39,0x7f,0xdd,0x5f,0x60,0x3e,0x74,
    0x7f,0x91,0xd9,0x10,0x7e,0x97,0xa9,0x75,0x12,0x7e,0x97,0xb9,0x3b,0xa2,0xd0,0xc7,
    0x64,0xf0,0x4b,0xc0,0x57,0xb0,0xbf,0x3d,0x22,0x67,0xb6,0x8e,0xb9,0x2c,0x21,0x77,
    0xa7,0x57,0x50,0xcc,0xfd,0x50,0xc2,0xd2,0x7e,0xf4,0x32,0xdf,0xa5,0xd8,0x33,0x3e,
    0x43,0x15,0x77,0xc4,0x62,0xe6,0x64,0x1d,0x3e,0xd5,0xe0,0x47,0xbd,0x8f,0xec,0x97,
    0x10,0x57,0x4d,0x9c,0xcc,0xc9,0x72,0xe2,0x96,0x12,0xa7,0xf3,0xbd,0x3c,0x68,0x4b,
    0x86,0xd9,0xd1,0xbb,0x45,0x66,0xe7,0x2f,0xcf,0xbc,0x16,0x3e,0xb7,0xbd,0xbf,0xde,
    0x31,0xb5,0xe8,0xa9,0x09,0x67,0x92,0x0c,0xbd,0x59,0x45,0x4d,0xf9,0x3b,0x44,0xbf,
    0x1e,0x01,0x7f,0xce,0xef,0x84,0xd3,0x57,0x60,0xea,0xf7,0x8f,0xcf,0xa1,0xb9,0xe4,
    0xf9,0x87,0xf7,0x12,0xbf,0x1f,0xf1,0x49,0x12,0x53,0x63,0x34,0xd4,0xa3,0xa1,0xce,
    0x68,0x78,0x14,0x5c,0x35,0x34,0x80,0xa9,0x86,0xb4,0xd1,0x20,0xb6,0x46,0xee,0x3b,
    0xa9,0xdb,0x68,0x34,0x3c,0x46,0xed,0x98,0xd1,0xd0,0x04,0xae,0x1a,0xbe,0x06,0x53,
    0x3f,0xd1,0xa0,0xb9,0xd2,0x46,0xc3,0x55,0x7c,0x6a,0x89,0x69,0x34,0x1a,0x9e,0x40,
    0xc3,0x1a,0xa3,0xa1,0x19,0x5c,0x35,0x3c,0x09,0xa6,0x1a,0x5a,0x8d,0x06,0xb1,0xb5,
    0x84,0xb9,0xcb,0xd6,0x6d,0x61,0x8e,0x52,0x21,0x5f,0xb6,0xf6,0x55,0xf3,0x3d,0x09,
    0x47,0xf5,0x6d,0x35,0x1c,0x6f,0xe1,0x97,0x26,0xae,0x05,0xdf,0x0d,0xf8,0x6e,0xc0,
    0x57,0xbe,0xf5,0xeb,0x7c,0xef,0x12,0xff,0xa2,0x5f,0x1b,0xb1,0x49,0x8f,0xae,0xf1,
    0xed,0x8b,0x6d,0x27,0x36,0xd1,0x2a,0xdf,0x7d,0x07,0x5a,0xdb,0xd1,0x2a,0xfe,0xcf,
    0x82,0x7f,0x8a,0xd6,0x2d,0xe4,0x10,0xfc,0x4f,0xef,0xb3,0x89,0x1c,0xaa,0x77,0x0b,
    0xfb,0x4d,0xf0,0xda,0x48,0xae,0xce,0x70,0x2e,0xd9,0x7b,0x41,0xbf,0x8d,0xed,0xd4,
    0xcb,0x98,0x6f,0xe3,0x79,0xf0,0x21,0xbe,0x8d,0x1d,0x60,0xb7,0x02,0xdf,0xac,0xbe,
    0x17,0xc8,0xb5,0x83,0xdf,0xae,0x6b,0xf8,0xb7,0xa1,0xf7,0x3a,0x3e,0x43,0xcc,0xca,
    0x4e,0x7c,0x2a,0x73,0x7a,0x26,0x1c,0xb7,0x92,0x73,0x17,0x9a,0xec,0x1a,0x26,0x67,
    0x17,0x39,0x77,0x99,0xb9,0x78,0x19,0xee,0xbb,0xcd,0x5c,0xbc,0x02,0xae,0x73,0xf1,
    0x2a,0x98,0xce,0x45,0x8f,0xe9,0x93,0xd8,0xba,0xfd,0xea,0x83,0x4b,0xb7,0x99,0xed,
    0x3d,0xd4,0x8c,0xc2,0xac,0xe4,0x87,0xfb,0xf2,0x35,0xb0,0x2e,0x73,0xe7,0xc4,0x03,
    0xff,0xbc,0x60,0xdf,0x4b,0x9c,0xae,0xe3,0x3e,0x97,0xe0,0xfb,0x88,0xdd,0x1b,0x72,
    0x2d,0x08,0x7a,0xf6,0x93,0x67,0x1f,0xf7,0x5e,0xd2,0xdc,0xc7,0xd2,0x9f,0x1e,0x38,
    0xf5,0x19,0xbd,0x07,0xd0,0xdb,0x6f,0xf4,0x1e,0x04,0x57,0xbd,0x6f,0x80,0xa9,0xde,
    0x41,0xa3,0x57,0x6c,0x03,0x7e,0x0d,0x92,0x7b,0xc0,0xe8,0x7d,0xcb,0xe8,0xbd,0x44,
    0xae,0x43,0xe0,0x19,0x38,0x69,0xdc,0x20,0xb3,0x2c,0x3e,0x87,0xa9,0xd9,0x87,0xff,
    0x00,0x75,0x8f,0x98,0xba,0x87,0xc3,0x1c,0xb8,0x80,0x49,0xfc,0x90,0xa9,0x7b,0xec,
    0x3f,0xfa,0xfc,0xf6,0x7d,0xfa,0x7c,0x82,0x38,0x5d,0xc3,0xf4,0x79,0x98,0xd8,0x13,
    0xa6,0xcf,0xef,0x90,0x67,0xf8,0x7f,0xfa,0xac,0x9c,0x8e,0x98,0x6f,0xf7,0x67,0x62,
    0x06,0x89,0x1f,0xca,0x39,0x93,0x1e,0xe3,0xfb,0x13,0x67,0xd9,0x4d,0x9c,0xe4,0x79,
    0x93,0xdf,0xcf,0x11,0xec,0x7a,0x7e,0xef,0x72,0x7e,0xa7,0xcc,0xf9,0xbd,0x07,0xae,
    0xe7,0xf7,0x3e,0x98,0x9e,0xdf,0x98,0xe9,0xa3,0xd8,0x46,0xfd,0x3a,0x03,0x8f,0x51,
    0x74,0x4a,0xad,0xd3,0xd4,0x1b,0x41,0x67,0x8a,0x9e,0xa9,0xce,0x31,0x62,0xce,0x18,
    0x3e,0xe7,0xe0,0x73,0xd6,0xf0,0x39,0x0f,0xae,0x7c,0x3e,0x00,0x53,0x3e,0x13,0x86,
    0x8f,0xd8,0xc6,0xfd,0x9a,0x24,0xf7,0x38,0xe7,0x2a,0x79,0x3e,0x84,0x4b,0xc4,0x6f,
    0x81,0x70,0xfc,0xd6,0xe0,0x7a,0xcf,0x4e,0x10,0x3b,0x69,0xee,0xc0,0x8f,0xe0,0x75,
    0xc1,0xdc,0x81,0x1f,0x83,0x7f,0xc3,0xdc,0x7c,0x02,0x76,0xd1,0x70,0xbd,0x04,0x9e,
    0x81,0xeb,0xb4,0xe1,0x2a,0xb6,0x29,0xbf,0xa6,0xa9,0x37,0x65,0x78,0x7d,0x87,0xbe,
    0x11,0xf3,0x1b,0xa5,0x7e,0xd3,0x9c,0xb5,0xf8,0xdd,0xc0,0x67,0x92,0x98,0x29,0xc3,
    0xe7,0x33,0xf8,0xb4,0x1b,0x3e,0x9f,0x83,0x2b,0x9f,0x59,0xc3,0x47,0x6c,0x33,0x7e,
    0xcd,0x52,0x67,0xc6,0xf0,0xf9,0x1e,0x3e,0x37,0x38,0x43,0xe1,0xa3,0x7e,0xb3,0x86,
    0xcf,0x4d,0x7c,0xa6,0x89,0x99,0x31,0x7c,0xbe,0x80,0x4f,0xbf,0xe1,0xf3,0x25,0xb8,
    0xf2,0x99,0x37,0x7c,0xc4,0x36,0xe7,0xd7,0x3c,0x75,0xe6,0x0c,0x9f,0x1f,0xf8,0xdf,
    0xf7,0xa6,0x99,0x27,0xf5,0x9b,0x37,0x7c,0x7e,0xc3,0x67,0x96,0x98,0xb9,0x9c,0x33,
    0x9e,0x30,0xbe,0xbf,0x32,0x0f,0xe3,0xc4,0xcd,0xe7,0xcc,0xe9,0x98,0xf1,0xfd,0x85,
    0xf9,0x1e,0x25,0x4e,0xf2,0xb4,0x79,0x26,0x57,0xb0,0xdd,0xf1,0xa7,0xd6,0xec,0xd7,
    0xbf,0xfe,0xaa,0xb8,0x55,0xe4,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DMS src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = ivec4(0);
//     for(int i = 0;i < params . srcSampleCount;i ++)
//     {
//         srcValue += texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), i);
//     }
//     srcValue /= params . srcSampleCount;
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
