// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000002A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000002A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xeb,0x4f,0x9c,0x55,
    0x10,0xc6,0xdf,0xdd,0x65,0x77,0x29,0x08,0x94,0x4b,0x8b,0x34,0xb6,0xda,0x0b,0x89,
    0x86,0x0a,0x6b,0xc4,0x8a,0x60,0x1b,0xb1,0x62,0x6b,0x45,0x5b,0xe8,0x45,0x85,0x0f,
    0x5e,0x4a,0x84,0x2a,0x54,0x65,0x35,0xb6,0x31,0x31,0xc6,0xd6,0xc2,0x17,0x5b,0x15,
    0x62,0x48,0x35,0x16,0x92,0x2a,0x24,0x56,0x48,0xfd,0x60,0xe2,0x27,0x63,0x8c,0xd2,
    0x60,0xeb,0xe5,0x8f,0x31,0x5e,0x12,0x13,0xcf,0x1c,0x7e,0xd3,0x3c,0x6e,0x34,0x25,
    0x39,0x79,0xdf,0xf3,0xcc,0xcc,0x99,0xe7,0x99,0x99,0xf7,0xb0,0x99,0xf4,0xd6,0x7c,
    0x92,0xa4,0x92,0x8a,0xa4,0x3c,0xf9,0x35,0x59,0xfd,0xab,0x4d,0xd2,0x01,0x49,0x92,
    0xca,0x24,0x17,0x9f,0x7b,0x7a,0x0f,0xf6,0xb6,0x16,0x5f,0x1d,0x6a,0x6d,0xbf,0xa7,
    0x60,0xf6,0xea,0x24,0x13,0xfd,0xcc,0x56,0x93,0xe4,0x93,0xb2,0xf0,0xb4,0x35,0xf6,
    0xec,0xb1,0xe3,0x86,0x57,0x85,0xf5,0x65,0x58,0x6b,0x83,0x9f,0xe1,0x79,0x3b,0x23,
    0xbc,0x55,0xc5,0x33,0x2d,0x26,0x49,0xf6,0x26,0xd9,0xa4,0x9e,0x7c,0x5b,0x79,0x3a,
    0x96,0x02,0x2b,0x17,0x2c,0x0d,0xb6,0x56,0xb0,0x0c,0x58,0x83,0x60,0x65,0x60,0x37,
    0x0b,0x96,0x05,0xbb,0x45,0xb0,0x1c,0xd8,0x6d,0x82,0xe5,0xc1,0xb6,0x09,0x56,0x0e,
    0x76,0xbb,0x60,0x6b,0xc0,0xb6,0x0b,0x56,0x01,0x56,0x10,0xac,0x12,0xac,0x5d,0xb0,
    0x9b,0xc0,0x3a,0x04,0xab,0x02,0xbb,0x5f,0xb0,0x6a,0xb0,0x07,0x62,0xed,0x32,0xd7,
    0x6b,0x60,0x75,0xdc,0x1d,0x9e,0x5b,0xa8,0x99,0xef,0x37,0xcb,0xde,0x6a,0xbf,0x89,
    0x7d,0x7d,0x88,0x4a,0x47,0x7b,0x26,0xd6,0xcb,0xde,0xd7,0x05,0x9f,0x1c,0xda,0xad,
    0xd6,0x8d,0x61,0x9f,0xa7,0x26,0x66,0x5f,0x1f,0x3c,0x2b,0xb0,0x9b,0xad,0x12,0x7d,
    0x65,0x11,0x2b,0x8b,0x1a,0x52,0xe8,0xeb,0x62,0x5f,0x25,0x67,0x55,0xe3,0xef,0xb9,
    0xea,0x38,0x2b,0x89,0xbc,0x6a,0xaf,0xd7,0xda,0x73,0xfa,0xaa,0xbb,0xc1,0x72,0x1f,
    0xe3,0xd0,0x40,0x1f,0xea,0xe1,0xd0,0x10,0x73,0xad,0x62,0x2d,0xe8,0x5b,0x0f,0x27,
    0xf3,0x6f,0xc4,0x96,0x17,0xfb,0x46,0x66,0xc3,0xec,0x9b,0xb0,0xd7,0xc5,0x79,0x4a,
    0xc7,0x7a,0xb6,0xc0,0xdd,0x6b,0xed,0x71,0x2d,0x70,0x71,0xfb,0x5d,0xe4,0x71,0xfb,
    0x0e,0xfa,0x67,0xb5,0xd8,0xc5,0x99,0x56,0xbb,0xa6,0x90,0xa1,0x9b,0x7d,0x3a,0xf9,
    0xf7,0x5f,0x8a,0xa7,0x71,0x79,0x90,0xf7,0x6e,0xb4,0xd9,0x7e,0x77,0x09,0x87,0x9e,
    0x92,0xfd,0x3e,0xbe,0x07,0x8b,0x7f,0x14,0x2d,0x39,0x38,0x3c,0xce,0x7b,0x46,0xfc,
    0xfb,0xe1,0xe0,0xfb,0x23,0xd4,0xc6,0xfc,0x9f,0x81,0xa3,0xfa,0x8f,0xf0,0x2d,0xf8,
    0xfe,0x54,0x49,0xad,0xcf,0xd1,0x73,0xdf,0x9f,0x67,0x26,0x7c,0x7f,0x51,0xe6,0xe7,
    0x32,0x67,0xef,0x42,0xdf,0x65,0xee,0x8b,0x4c,0xac,0x5d,0x36,0xf2,0x2a,0x43,0x9f,
    0x61,0x7f,0x04,0xc4,0xfa,0xb4,0x93,0x59,0xac,0xe1,0xec,0xfd,0x81,0x71,0x35,0x77,
    0x42,0x0d,0xcb,0x6b,0x79,0x9c,0x99,0xae,0xc5,0xde,0x1d,0x4e,0x68,0xe4,0x5e,0x58,
    0xc7,0x6c,0xec,0xc4,0xa7,0x09,0xfc,0xed,0xe0,0x63,0xfb,0x0d,0xc4,0x35,0x11,0x67,
    0xb3,0x71,0x2b,0x71,0x1b,0x89,0xf3,0x99,0x36,0xfc,0xf3,0xe0,0xb3,0x59,0xee,0x13,
    0x9b,0x97,0xdf,0x03,0xf3,0x66,0xf8,0xfc,0x15,0xfc,0xfd,0x5e,0x69,0x46,0x8f,0xbd,
    0xf7,0x85,0xb8,0x1c,0x77,0xcb,0x06,0x7c,0xdf,0xa4,0x5e,0x77,0x80,0xf7,0x87,0x9d,
    0x71,0xfa,0x0a,0xcc,0xfd,0xfe,0x0c,0x67,0xf8,0x59,0xf6,0xfc,0x2d,0x78,0x99,0xdf,
    0x0f,0xf8,0x64,0x89,0xd9,0x26,0x1a,0xb6,0xa3,0xa1,0x45,0x34,0xdc,0x09,0xee,0x1a,
    0x5a,0xc1,0x5c,0x43,0x41,0x34,0x98,0xad,0x8d,0x3b,0xce,0xf2,0xb6,0x89,0x86,0xbb,
    0xc9,0x9d,0x12,0x0d,0xed,0xe0,0xae,0xe1,0x6b,0x30,0xf7,0x33,0x0d,0x7e,0x56,0x41,
    0x34,0x2c,0xe3,0xd3,0x4c,0x4c,0x9b,0x68,0xb8,0x17,0x0d,0x3b,0x44,0x43,0x07,0xb8,
    0x6b,0xb8,0x0f,0xcc,0x35,0x74,0x89,0x06,0xb3,0x75,0xc6,0xb9,0x5b,0xcd,0xdb,0xc9,
    0x1c,0xe5,0xe3,0x79,0xab,0xb9,0x97,0xe5,0x7b,0x34,0x8e,0xee,0xdb,0x25,0x1c,0xaf,
    0xe0,0x57,0x20,0xae,0x13,0x3e,0xf6,0xcd,0x3e,0xc4,0xf7,0xea,0x33,0xf7,0x30,0x9c,
    0x7b,0x64,0xe6,0xf6,0x80,0xbf,0xc5,0xcc,0x3d,0x02,0x76,0x85,0x38,0xfb,0x86,0x7b,
    0x89,0xdb,0x47,0x9c,0xd5,0xf4,0x31,0x70,0xaf,0xfb,0x7e,0x62,0x13,0xc1,0x0e,0x80,
    0xa5,0xe2,0x7b,0x2e,0x7e,0xff,0x7d,0xf8,0x1e,0xe0,0x0c,0xcf,0x71,0x90,0x1c,0xfd,
    0x92,0xe3,0x10,0xf8,0xd3,0x81,0x99,0x7d,0xa3,0x87,0xd1,0xd4,0xc7,0x9d,0x71,0x48,
    0xfa,0xf1,0x04,0xf1,0x47,0xa4,0x1f,0x4f,0x82,0x7b,0x3f,0x9e,0x02,0xf3,0x7e,0x0c,
    0x4a,0x3f,0xcc,0x36,0x10,0xd6,0x30,0x35,0x1e,0x40,0x47,0x5d,0xcc,0xbf,0x9a,0x3b,
    0x13,0xb9,0x97,0xc7,0x7b,0xe9,0x39,0xb0,0xc3,0xf2,0xad,0xa7,0xd1,0x69,0xf6,0xa3,
    0xc4,0xf9,0x3a,0x1d,0xce,0x32,0x7c,0x88,0xd8,0xa3,0xf1,0xac,0x35,0x51,0xd7,0xf3,
    0x9c,0x33,0xc4,0x7d,0x93,0x95,0x7b,0xd2,0xfa,0x3e,0x08,0xa7,0x61,0xd1,0x7b,0x0c,
    0xbd,0x23,0xa2,0xf7,0x05,0x70,0xd7,0xfb,0x22,0x98,0xeb,0x1d,0x13,0xbd,0x66,0x1b,
    0xb5,0xdf,0x4a,0x9c,0x3d,0x2a,0x7a,0x5f,0x12,0xbd,0x97,0x38,0xeb,0x65,0xf0,0x2d,
    0x70,0xf2,0xb8,0x31,0x66,0xd1,0x7c,0x5e,0x21,0xe7,0x30,0xfe,0xa3,0xe4,0x2d,0x4a,
    0x5e,0xf3,0x19,0x0f,0xab,0x48,0xfc,0xb8,0xe4,0x7d,0xed,0x3f,0xea,0xfc,0xfa,0x0d,
    0xea,0x7c,0x82,0x38,0x5f,0x67,0xa8,0xf3,0x49,0x62,0x4f,0x48,0x9d,0xdf,0xe0,0x9c,
    0x93,0xff,0x53,0x67,0xe7,0x54,0x44,0x93,0xc5,0xfc,0x48,0xcc,0x18,0xf1,0xe3,0x25,
    0x3d,0x19,0x14,0xdf,0x15,0x7a,0x39,0x40,0x5c,0x51,0xfa,0x75,0x9a,0x7e,0x9d,0x92,
    0x7e,0xbd,0x03,0xee,0xfd,0x3a,0x03,0xe6,0xfd,0x9a,0x94,0xba,0x99,0x6d,0x22,0xac,
    0xb3,0xe4,0x9d,0x10,0x5d,0xef,0x92,0x7b,0x05,0x5d,0x79,0x6a,0xe4,0xba,0x26,0x89,
    0x39,0x2b,0x7c,0xde,0x83,0xcf,0x39,0xe1,0xf3,0x3e,0xb8,0xf3,0xf9,0x00,0xcc,0xf9,
    0x4c,0x0b,0x1f,0xb3,0x4d,0x85,0x35,0xc3,0xd9,0x53,0xd2,0xc7,0x0f,0xe1,0x92,0xe1,
    0xce,0x35,0x8e,0xdf,0x08,0xee,0xf7,0xd9,0x34,0xb1,0x33,0x72,0x0f,0x7c,0x04,0xaf,
    0xf3,0x72,0x0f,0x7c,0x0c,0xbe,0xcc,0xbd,0xf2,0x09,0x58,0xbf,0x70,0xbd,0x00,0xde,
    0x03,0xd7,0x39,0xe1,0x6a,0xb6,0xd9,0xb0,0xe6,0xc8,0x37,0x2b,0xbc,0xbe,0x45,0xdf,
    0x8a,0xfc,0x2f,0x70,0xbf,0x39,0xe9,0xed,0x55,0x7c,0x66,0x88,0x99,0x15,0x3e,0x9f,
    0xc2,0xe7,0xa2,0xf0,0xf9,0x0c,0xdc,0xf9,0x2c,0x08,0x1f,0xb3,0xcd,0x87,0xb5,0x40,
    0x9e,0x79,0xe1,0xf3,0x1d,0x7c,0xae,0xd2,0x43,0xe3,0xe3,0x7e,0x0b,0xc2,0xe7,0x1a,
    0x3e,0x73,0xc4,0xcc,0x0b,0x9f,0x4b,0xf0,0x19,0x11,0x3e,0x5f,0x80,0x3b,0x9f,0x25,
    0xe1,0x63,0xb6,0xc5,0xb0,0x96,0xc8,0xb3,0x28,0x7c,0xbe,0xe7,0x77,0xe5,0x35,0x99,
    0x27,0xf7,0x5b,0x12,0x3e,0xbf,0xe0,0xb3,0x40,0xcc,0x62,0x49,0x8f,0xa7,0xc5,0xf7,
    0x67,0xe6,0x61,0x8a,0xb8,0xa5,0x92,0x39,0x9d,0x14,0xdf,0x9f,0x98,0xef,0x09,0xe2,
    0xa6,0xe3,0xef,0xb5,0x4c,0xfc,0x9d,0x66,0xb6,0xbf,0x43,0xd7,0x3a,0xc2,0xfa,0x07,
    0xd8,0x31,0x2c,0x57,0x40,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
