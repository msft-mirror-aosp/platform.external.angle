// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000006.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000006[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4f,0x96,0x55,
    0x18,0xc7,0xef,0xe7,0x1d,0x21,0x40,0x5e,0x94,0x70,0x69,0x99,0xb2,0xd5,0x30,0x78,
    0x5a,0x64,0x04,0xe9,0x22,0x23,0x93,0x50,0x52,0xd8,0x6a,0xe9,0x02,0x0b,0x56,0xc2,
    0x34,0x9d,0xfc,0x80,0x25,0xac,0x95,0x66,0xb0,0x35,0x66,0x2d,0x61,0xb3,0xe0,0x87,
    0x82,0xe9,0x9a,0x5b,0x3f,0xb5,0xd6,0x7c,0x59,0xf9,0xd6,0x3f,0xd4,0x7a,0xd9,0xda,
    0x3a,0xd7,0x79,0x3e,0x97,0xfb,0xf6,0xac,0xe6,0xb3,0x9d,0xdd,0xf7,0xf9,0x5e,0x6f,
    0xdf,0xef,0x75,0xae,0xfb,0x40,0x26,0xbd,0xa5,0x90,0x24,0xa9,0xa4,0x32,0xa9,0x48,
    0x7e,0x4d,0x4a,0xbf,0xba,0x24,0x1d,0x90,0x24,0xa9,0x4a,0xf2,0xf1,0xb9,0xbb,0x7f,
    0xb0,0xbf,0xed,0xe4,0xe4,0x68,0x5b,0xc7,0xd3,0x45,0xb3,0xd7,0x24,0x99,0xe8,0x67,
    0xb6,0xda,0xa4,0x90,0x64,0xc3,0xd3,0xd6,0xd1,0xc3,0x47,0x8e,0x19,0x5e,0x1d,0xd6,
    0xe5,0xb0,0xd6,0x06,0x3f,0xc3,0x0b,0x96,0x23,0xbc,0x55,0xc7,0x9c,0x16,0x93,0x24,
    0x2f,0x27,0xb9,0xa4,0x81,0x7a,0x5b,0x78,0x3a,0x96,0x02,0xab,0x10,0x2c,0x0d,0xb6,
    0x56,0xb0,0x0c,0x58,0xa3,0x60,0x59,0xb0,0x07,0x05,0xcb,0x81,0x3d,0x24,0x58,0x1e,
    0xec,0x11,0xc1,0x0a,0x60,0x5b,0x05,0xab,0x00,0x7b,0x4c,0xb0,0x35,0x60,0xdb,0x04,
    0xab,0x04,0x2b,0x0a,0x56,0x05,0xd6,0x21,0xd8,0x03,0x60,0x9d,0x82,0x55,0x83,0x3d,
    0x27,0x58,0x0d,0xd8,0xf3,0xb1,0x77,0x99,0x7b,0x3d,0xb0,0x3e,0xee,0x0a,0xcf,0x47,
    0xe9,0x99,0xef,0x37,0xcb,0xde,0x7a,0xbf,0x89,0x7d,0x43,0x88,0x4a,0x47,0x7b,0x26,
    0xf6,0xcb,0xde,0xd7,0x05,0x9f,0x3c,0xda,0xad,0xd7,0x4d,0x61,0x5f,0xa0,0x27,0x66,
    0x5f,0x1f,0x3c,0x2b,0xb1,0x9b,0xad,0x0a,0x7d,0xd9,0x88,0x65,0xa3,0x86,0x14,0xfa,
    0xba,0xd9,0x57,0x4b,0xae,0x1a,0xfc,0xbd,0x56,0x3d,0xb9,0x92,0xc8,0xab,0xee,0x5e,
    0xaf,0xbd,0xa6,0xaf,0xfa,0xfb,0x2c,0xf7,0x31,0x0e,0x8d,0x9c,0x43,0x03,0x1c,0x1a,
    0x63,0xad,0x12,0xd6,0x8a,0xbe,0xf5,0x70,0x32,0xff,0x26,0x6c,0x05,0xb1,0x6f,0x64,
    0x36,0xcc,0xbe,0x09,0x7b,0x7d,0x9c,0xa7,0x74,0xec,0x67,0x2b,0xdc,0xbd,0xd7,0x1e,
    0xd7,0x0a,0x17,0xb7,0x3f,0x49,0x1d,0xb7,0x6f,0xe7,0xfc,0xac,0x17,0x3b,0xf1,0xb5,
    0xde,0x35,0x87,0x0a,0x3d,0xec,0x53,0xc9,0xbf,0x7f,0xbe,0x37,0x2e,0x2f,0xf0,0xde,
    0x83,0x36,0xdb,0xef,0x2a,0xe3,0xd0,0x5b,0xb6,0xef,0xa3,0xdf,0x16,0xff,0x0a,0x5a,
    0xf2,0x62,0x1f,0x40,0xbb,0x71,0x7a,0x1d,0x5b,0x46,0xec,0x23,0xcc,0xba,0xd9,0x27,
    0xe9,0x43,0x56,0xec,0xa7,0xca,0x7a,0x7b,0x96,0x33,0xf6,0xfd,0x79,0x66,0xc0,0xf7,
    0x17,0x65,0x5e,0x2e,0x51,0x6b,0x12,0x3d,0x97,0xb8,0x1f,0x32,0xb1,0x57,0xb9,0xc8,
    0x3b,0x8b,0x1e,0xc3,0xfe,0x08,0x88,0x9d,0xcb,0x0e,0x66,0xaf,0x96,0xdc,0x03,0x41,
    0x41,0x0d,0x77,0x40,0x2d,0xcb,0x7b,0x77,0x8c,0x19,0xae,0xc3,0xde,0x13,0x32,0x34,
    0x71,0x0f,0xac,0x63,0x16,0x76,0xe0,0xd3,0x0c,0xfe,0x51,0xf0,0xb1,0xfd,0x06,0xe2,
    0x9a,0x89,0xb3,0x59,0x78,0x98,0xb8,0x8d,0xc4,0xf9,0x0c,0x1b,0xfe,0x5d,0xf0,0xd9,
    0x2c,0xf7,0x87,0xcd,0xc7,0xef,0x81,0x79,0x0b,0x7c,0xfe,0x0a,0xfe,0x7e,0x8f,0xb4,
    0xa0,0xc7,0xde,0xf7,0x87,0xb8,0x3c,0x77,0xc9,0x06,0x7c,0x67,0xe8,0xd7,0xe3,0xe0,
    0x07,0xc2,0xce,0x38,0x5d,0x01,0x73,0xbf,0x3f,0x43,0x0e,0xcf,0x65,0xcf,0xdf,0x82,
    0x97,0xf9,0x5d,0xc3,0x27,0x47,0xcc,0x56,0xd1,0xb0,0x0d,0x0d,0xad,0xa2,0xe1,0x09,
    0x70,0xd7,0xd0,0x06,0xe6,0x1a,0x8a,0xa2,0xc1,0x6c,0xed,0xdc,0x69,0x56,0xb7,0x5d,
    0x34,0x3c,0x45,0xed,0x94,0x68,0xe8,0x00,0x77,0x0d,0xdf,0x83,0xb9,0x9f,0x69,0xf0,
    0x5c,0x45,0xd1,0x70,0x1d,0x9f,0x16,0x62,0xda,0x45,0xc3,0x33,0x68,0xd8,0x2e,0x1a,
    0x3a,0xc1,0x5d,0xc3,0xb3,0x60,0xae,0xa1,0x5b,0x34,0x98,0xad,0x2b,0xce,0x5d,0xa9,
    0x6e,0x17,0x73,0x54,0x88,0xf9,0x4a,0xb5,0xaf,0xcb,0xf7,0x67,0x1c,0xdd,0xb7,0x5b,
    0x38,0xde,0xc0,0xaf,0x48,0x5c,0x17,0x7c,0xec,0x1b,0x7d,0x91,0xef,0xd3,0x67,0xee,
    0x25,0x38,0xf7,0xca,0xcc,0xed,0x06,0xff,0x90,0x99,0xdb,0x03,0x76,0x83,0x38,0xfb,
    0x66,0xfb,0x89,0xeb,0x23,0xce,0x7a,0xba,0x17,0x7c,0x38,0x44,0xd9,0x5d,0xb2,0x8f,
    0x7a,0x7b,0xf8,0xde,0xf7,0x4a,0xaf,0x5e,0x25,0x7e,0x40,0x7a,0xb5,0x1f,0xdc,0x7b,
    0x75,0x00,0xcc,0x7b,0x35,0x24,0xbd,0x32,0xdb,0x60,0xac,0x55,0xd2,0x3f,0x28,0xe7,
    0xfd,0x1a,0xb5,0x33,0x31,0x7f,0x45,0xbc,0x43,0xde,0x00,0xdb,0x27,0xdf,0x61,0x3a,
    0xd6,0xcb,0x47,0xfb,0x41,0xe2,0x7c,0x9d,0x09,0xb9,0x0c,0x3f,0x44,0xec,0xc1,0x98,
    0x6b,0x4d,0xd4,0xf5,0x26,0x79,0x0e,0x71,0x17,0xe4,0xe4,0x8e,0xb2,0x33,0x19,0x82,
    0xd3,0xb0,0xe8,0x3d,0x8c,0xde,0x11,0xd1,0xfb,0x16,0xb8,0xeb,0x7d,0x1b,0xcc,0xf5,
    0x8e,0x89,0x5e,0xb3,0x8d,0x86,0x35,0x46,0xee,0x51,0xd1,0xfb,0x8e,0xe8,0xbd,0x42,
    0xae,0x77,0xc1,0x7b,0xe1,0xe4,0x71,0x63,0xcc,0x89,0xf9,0x1c,0xa1,0xe6,0x30,0xfe,
    0xa3,0xd4,0x9d,0x90,0xba,0xe6,0x33,0x1e,0xd6,0x04,0xf1,0xe3,0x52,0xf7,0xe8,0x7f,
    0xf4,0xf9,0xbd,0xfb,0xf4,0xf9,0x38,0x71,0xbe,0xce,0xd1,0xe7,0x13,0xc4,0x1e,0x97,
    0x3e,0x9f,0x24,0xcf,0x89,0xff,0xe9,0xb3,0x73,0x9a,0x40,0x93,0xc5,0xfc,0x42,0xcc,
    0x18,0xf1,0xe3,0x65,0x67,0x32,0x24,0xbe,0x3f,0x73,0x96,0x83,0xc4,0x59,0x9e,0xd3,
    0xfc,0x4d,0x99,0xc2,0xee,0xe7,0xf7,0x3e,0xe7,0x77,0x4a,0xce,0xef,0x03,0x70,0x3f,
    0xbf,0xd3,0x60,0x7e,0x7e,0x33,0xd2,0x47,0xb3,0x4d,0xc7,0xb9,0x2a,0xf1,0x98,0x46,
    0xa7,0xd5,0xfa,0x98,0x7a,0x53,0xe8,0x2c,0xd0,0x33,0xd7,0x39,0x43,0xcc,0x19,0xe1,
    0xf3,0x09,0x7c,0xce,0x0a,0x9f,0x73,0xe0,0xce,0xe7,0x53,0x30,0xe7,0x33,0x27,0x7c,
    0xcc,0x36,0x1b,0xd6,0x3c,0xb9,0x67,0x39,0x57,0xcb,0xf3,0x19,0x5c,0x32,0xdc,0x8f,
    0xc6,0xf1,0x07,0xc1,0xfd,0xee,0x99,0x23,0x76,0x5e,0xee,0x85,0xcf,0xe1,0x75,0x5e,
    0xee,0x85,0x2f,0xc0,0xef,0x32,0x37,0x5f,0x82,0xf5,0x09,0xd7,0x0b,0xe0,0xbd,0x70,
    0x5d,0x14,0xae,0x66,0x5b,0x08,0x6b,0x91,0x7a,0x0b,0xc2,0xeb,0x47,0xf4,0x4d,0xc9,
    0xbd,0xed,0x7e,0x8b,0x9c,0xb5,0xf9,0xdd,0xc4,0x67,0x9e,0x98,0x05,0xe1,0xf3,0x15,
    0x7c,0x2e,0x0a,0x9f,0xaf,0xc1,0x9d,0xcf,0xb2,0xf0,0x31,0xdb,0x52,0x58,0xcb,0xd4,
    0x59,0x12,0x3e,0x3f,0xc1,0xe7,0x26,0x67,0x68,0x7c,0xdc,0x6f,0x59,0xf8,0xdc,0xc2,
    0x67,0x91,0x98,0x25,0xe1,0xf3,0x0d,0x7c,0x46,0x84,0xcf,0xb7,0xe0,0xce,0x67,0x55,
    0xf8,0x98,0x6d,0x25,0xac,0x55,0xea,0xac,0x08,0x9f,0xab,0xfc,0xcf,0x77,0x4b,0xe6,
    0xc9,0xfd,0x56,0x85,0xcf,0x5d,0x7c,0x96,0x89,0x59,0x29,0x3b,0xe3,0x39,0xf1,0xbd,
    0xc3,0x3c,0xcc,0x12,0xb7,0x5a,0x36,0xa7,0x33,0xe2,0x7b,0x9b,0xf9,0x9e,0x26,0xce,
    0xf2,0xec,0x0c,0x4c,0x2e,0x63,0xfb,0x3b,0x9c,0x5a,0x67,0x58,0xff,0x00,0xfb,0x3f,
    0x0b,0x7c,0xdc,0x0d,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
