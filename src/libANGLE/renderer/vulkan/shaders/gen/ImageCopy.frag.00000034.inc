// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000034.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000034[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x6d,0x4c,0x96,0x55,
    0x18,0xc7,0xef,0xf3,0x3c,0xf0,0xe0,0x1b,0xa4,0xf3,0x25,0x48,0x12,0x48,0x25,0x0b,
    0x42,0xc3,0xf7,0xf0,0xf1,0x35,0x85,0xa6,0x82,0xc0,0xb2,0x69,0x46,0x59,0x96,0x52,
    0x29,0x25,0x6c,0xb5,0x74,0xfa,0xa8,0xb0,0x4c,0xd6,0xd2,0xf5,0xa1,0x55,0x66,0xba,
    0xb5,0xb5,0xd6,0xb2,0xcd,0x4a,0x3f,0xa4,0x95,0xac,0x99,0xb5,0x92,0x36,0x4b,0xb6,
    0x92,0xa6,0x5f,0xfa,0xda,0x72,0x31,0x4d,0xd7,0xea,0x5c,0xf7,0xf9,0x5d,0x72,0xc5,
    0x6a,0xb2,0x9d,0xdd,0xf7,0xf9,0x5f,0x6f,0xff,0xeb,0x7f,0x5e,0x6e,0x20,0x99,0x18,
    0x9f,0x13,0x45,0x2e,0x1a,0x12,0x0d,0x8a,0x1a,0x5d,0x14,0xff,0x8c,0x88,0x12,0x91,
    0xe3,0x59,0xe9,0x9f,0x43,0xa3,0x54,0x3c,0xaf,0x5e,0xd6,0xb8,0xac,0xa2,0xb5,0x6d,
    0x5d,0xc5,0xb4,0xe9,0x53,0xc4,0x2f,0x2f,0x4a,0xc6,0xfe,0x62,0xbb,0x29,0xca,0x89,
    0xb2,0xfc,0x53,0xc6,0xc6,0xb5,0xcd,0x9b,0x04,0x2f,0xf5,0xe3,0xa2,0x1f,0xc3,0xbd,
    0x9f,0xe0,0x39,0x92,0xc3,0xbf,0x95,0xc6,0x39,0x25,0x26,0x8a,0x6a,0xa2,0xec,0xa8,
    0x3c,0x94,0x8d,0xc6,0xf3,0x54,0xcc,0x81,0x0d,0x32,0x58,0x02,0x6c,0xb8,0xc1,0x92,
    0x60,0xa3,0x0c,0x96,0x05,0x96,0x6f,0xb0,0x6c,0xb0,0x42,0x83,0xa5,0xc0,0x8a,0x0d,
    0x96,0x03,0x36,0xc1,0x60,0x83,0xc0,0x26,0x19,0x6c,0x30,0x58,0xb9,0xc1,0x86,0x80,
    0x4d,0x31,0xd8,0x50,0xb0,0x69,0x06,0x1b,0x06,0x36,0xcb,0x60,0xb9,0x60,0x73,0x0c,
    0x96,0x07,0x36,0x3f,0xd6,0x2e,0x79,0x5d,0x03,0xd1,0x71,0x8d,0x7f,0xde,0x86,0x66,
    0x3a,0x2f,0x31,0x73,0xd1,0x7e,0x1c,0xf3,0x91,0x3e,0x2a,0x11,0xdb,0x93,0xb1,0x5e,
    0xf2,0x3e,0xc6,0xbf,0xa5,0xe8,0xbd,0xcc,0xfb,0xa7,0xe0,0xf0,0xeb,0xe1,0x89,0xe9,
    0x51,0xde,0x23,0xcf,0xe0,0xa2,0xe3,0xe1,0xea,0xb5,0x69,0x9d,0x8b,0x86,0x6f,0xbc,
    0x5e,0x30,0x7f,0xb4,0x9f,0x17,0x93,0x43,0xd6,0xeb,0x66,0x3f,0x2f,0x61,0x9e,0x60,
    0x3e,0x01,0x9d,0xb3,0x62,0x3c,0x2b,0x9a,0x88,0xaf,0xe0,0x55,0xcc,0x4b,0x4d,0xfc,
    0xed,0xf8,0x4b,0xbc,0xe4,0x2f,0x23,0x5f,0x14,0xf7,0x33,0x22,0xd6,0xa0,0x84,0x51,
    0x6c,0x46,0xd9,0x0d,0x46,0xf1,0xf5,0x67,0x56,0x74,0x17,0xeb,0x57,0x0e,0x07,0x99,
    0x57,0x80,0x95,0xd1,0xd3,0x64,0x38,0x89,0xff,0x14,0x6c,0x25,0xc6,0x3e,0x83,0x3d,
    0x25,0xf6,0x99,0xd7,0x63,0x83,0x5d,0x9e,0xf7,0xc0,0x59,0xfd,0x17,0xd1,0x97,0xce,
    0x6b,0x59,0x5f,0xe9,0x79,0x25,0xfc,0x44,0xa3,0x02,0x9f,0x69,0x95,0xd1,0xd4,0xfe,
    0xe8,0x7c,0xac,0x5f,0xbb,0xd5,0xfe,0xb9,0x8a,0xfa,0x0f,0x82,0xaf,0xa6,0x1f,0x99,
    0xaf,0x19,0x50,0xbf,0x69,0xc0,0xbc,0x19,0x8d,0x25,0xfe,0x49,0xf8,0x17,0x1b,0x7b,
    0x0b,0x67,0x41,0xf8,0x3d,0x8f,0x2d,0x69,0xec,0x19,0xce,0x85,0xce,0xf7,0xb3,0xaf,
    0x75,0x7e,0x64,0x80,0x9e,0x27,0x38,0x1f,0x3a,0x3f,0xcd,0x7e,0xd3,0x3d,0xf5,0xfd,
    0x00,0x7e,0x67,0xd1,0x43,0xed,0xbf,0xc4,0xd6,0xcc,0x3c,0xe1,0x7b,0x01,0x2e,0xba,
    0x87,0x2e,0x70,0xd7,0x24,0x8d,0x7f,0xda,0x8b,0xb5,0x23,0x93,0xa9,0x2a,0xf7,0x5d,
    0x88,0xdf,0x5c,0x17,0x30,0x3b,0xd4,0x77,0x9e,0x7f,0x6f,0x79,0x77,0xf3,0x3c,0x9d,
    0xcf,0xf7,0xf3,0x7d,0xbb,0x0e,0xa4,0x67,0xf8,0x15,0x4e,0xc0,0x23,0x22,0xff,0x15,
    0x8f,0xc8,0xba,0xa7,0xd9,0xdb,0x93,0xd8,0xbf,0x75,0xbe,0x8e,0xec,0xdd,0x3b,0xc0,
    0x26,0x99,0x35,0xdb,0xc4,0xb9,0xb8,0x13,0xfb,0x02,0x9f,0x41,0xf6,0xd4,0xdd,0xec,
    0xbb,0xc9,0xe4,0x13,0x9f,0x4a,0xf0,0x9d,0xde,0x47,0xe6,0x53,0x89,0xab,0x24,0x6e,
    0x26,0xf7,0x46,0x05,0x7b,0x30,0xcd,0x7e,0x9b,0x0d,0xfe,0xbe,0xf7,0xc9,0x8b,0x75,
    0x09,0x98,0xec,0xc3,0xcb,0x9e,0x79,0x1a,0x3e,0x57,0xbd,0x7f,0x15,0xf7,0x4c,0x9a,
    0x7e,0xe4,0xbd,0xde,0xc7,0x15,0x73,0xd7,0x4c,0xc5,0x77,0x1b,0x6b,0xb1,0x00,0xbc,
    0xc1,0xab,0x23,0x9c,0xc6,0xbb,0x80,0xa9,0xdf,0x9f,0x3e,0x87,0xe6,0x92,0x67,0x9f,
    0xd7,0x42,0xfc,0x16,0xb8,0xe0,0x93,0x4d,0xcc,0x1c,0xd3,0xc3,0xbd,0xf4,0xb0,0xc8,
    0xf4,0xb0,0x18,0x5c,0x7b,0x58,0x02,0xa6,0x3d,0xd4,0x98,0x1e,0x96,0xc4,0xf7,0x5c,
    0x14,0x63,0x52,0xb7,0xda,0xf4,0xb0,0x94,0xda,0xce,0xf4,0xb0,0x0c,0x5c,0x7b,0x28,
    0x75,0x01,0x53,0x3f,0xe9,0x41,0x73,0xd5,0x98,0x1e,0x16,0xba,0xe0,0x93,0x26,0xa6,
    0xda,0xf4,0x50,0x47,0x0f,0xb5,0xa6,0x87,0x15,0xe0,0xda,0x43,0x3d,0x98,0xf6,0xd0,
    0x68,0x7a,0xa8,0x8f,0xf9,0x44,0x31,0x26,0x75,0x1b,0xd8,0x47,0x52,0xf7,0x7e,0x6a,
    0x2f,0x74,0xfd,0xe7,0x5e,0x38,0xaa,0x6f,0xa3,0xe1,0xb8,0x08,0xbf,0x1a,0xe2,0x1a,
    0xe0,0x23,0xf7,0xc1,0x43,0xdc,0x05,0xba,0xe7,0x1e,0x86,0x73,0x93,0xd9,0x73,0x8f,
    0x80,0x67,0xd8,0x73,0x8f,0x82,0x49,0xde,0x16,0xee,0xe4,0xc7,0xc0,0xd7,0xf9,0xb9,
    0xdc,0x3b,0x8f,0x93,0x7b,0x3d,0x31,0x4f,0x80,0x35,0x45,0xfd,0x31,0xeb,0xc1,0x77,
    0x7b,0x1f,0x99,0x6f,0x20,0xcf,0x7a,0xf8,0xc8,0xbd,0xf3,0x14,0x7c,0x9a,0xe1,0x23,
    0x6b,0xf5,0x34,0x78,0x0b,0xe7,0x71,0x23,0xd8,0x03,0xbe,0xdf,0x95,0xf1,0x79,0x0a,
    0xb5,0x37,0x70,0xbe,0x36,0x9a,0x35,0x79,0x86,0x7c,0x2d,0x66,0x4d,0x9e,0x05,0xd7,
    0x35,0xd9,0x0c,0xa6,0x6b,0xd2,0x66,0xd6,0x44,0x6c,0xad,0x7e,0x6c,0x47,0xe7,0xed,
    0x26,0xf7,0x0e,0x72,0x67,0x4c,0xee,0x9d,0xe0,0x9a,0x7b,0x17,0x98,0xe6,0xee,0x30,
    0xb9,0xc5,0xd6,0xee,0x47,0x07,0xb9,0xdb,0xcd,0x9e,0x7d,0x91,0xbe,0xe4,0x8e,0xf9,
    0x80,0x5c,0xbb,0xc1,0x9b,0x58,0x7b,0x8d,0xeb,0x60,0xed,0xc5,0xe7,0x25,0x6a,0x6e,
    0xc7,0xbf,0x9d,0xba,0x9d,0xa6,0xae,0xf8,0xec,0xf1,0xa3,0x93,0xf8,0x3d,0xa6,0xee,
    0xcb,0xa6,0x6e,0x9d,0xbf,0xd1,0xe5,0xae,0x7f,0x05,0x6c,0x93,0xb9,0xc3,0x12,0xf1,
    0x3e,0x4e,0xc5,0xf6,0xbd,0xc4,0xe9,0x78,0xd1,0xe7,0x12,0x7c,0x1f,0xb1,0x7b,0xe3,
    0x5c,0x83,0xe3,0xb5,0x7a,0x95,0x3c,0xfb,0xb8,0x47,0xb3,0xf9,0x0e,0x26,0xe9,0x49,
    0x39,0x75,0xd2,0x93,0xc4,0x2c,0x71,0x21,0xa6,0x83,0xf8,0x3d,0xf8,0xb6,0xe1,0xdb,
    0x6a,0xf8,0x3f,0xf7,0x1f,0xfc,0x5f,0xb8,0x01,0xff,0x2d,0xc4,0xe9,0x68,0x87,0xff,
    0x56,0x62,0xb7,0x18,0xfe,0xdb,0xc8,0xb3,0xf5,0x7f,0xf8,0x2b,0xa7,0x36,0xc3,0x7f,
    0xb1,0x0b,0x3d,0x74,0x12,0xdf,0xca,0x5e,0x96,0xef,0xc5,0x6b,0xd8,0x3b,0x7c,0x26,
    0x99,0xbf,0x09,0x36,0xd7,0xf5,0xef,0xb3,0xb7,0xd8,0x67,0xfb,0xcd,0x3e,0x3b,0x00,
    0xae,0xfb,0xec,0x6d,0x30,0xdd,0x67,0x87,0xcc,0x7a,0x8b,0xed,0xa0,0x1f,0x87,0xe0,
    0x76,0x10,0xbd,0x84,0xf7,0x3b,0xd4,0x8c,0x88,0xbb,0xc6,0xfb,0x35,0xff,0x2e,0xb9,
    0x7e,0x23,0x46,0x9e,0xc7,0xa9,0xf5,0x3b,0x71,0xb9,0xc4,0x5c,0x35,0xb5,0xc4,0x76,
    0x29,0xee,0x3d,0xc4,0xf5,0xc5,0xe7,0x21,0xd4,0xba,0x4c,0x5c,0x7e,0x14,0xfa,0x4d,
    0xc5,0x3e,0x01,0x97,0x6f,0xee,0x30,0xaf,0x57,0x2a,0xd6,0x31,0xac,0xd1,0x2d,0xd8,
    0x0b,0xd1,0xf6,0x1a,0x39,0x2f,0x99,0xf8,0x3f,0xc8,0x29,0xdf,0x68,0xeb,0x23,0x9c,
    0xfe,0xf6,0x59,0xae,0x80,0xf5,0x91,0xbb,0xda,0x85,0xfc,0x7d,0xc4,0x5e,0xe2,0x1b,
    0x20,0xda,0x97,0xbb,0x60,0x57,0x3d,0x54,0xa3,0xf7,0xd0,0xc8,0xd1,0x6f,0xae,0xfb,
    0xb7,0x46,0xce,0x85,0x9a,0xf2,0x54,0x8d,0x92,0x2e,0xc4,0xa9,0x46,0xc3,0x5c,0xbf,
    0x46,0x62,0xcb,0xf2,0x23,0x87,0x38,0x79,0xaa,0x46,0x83,0x89,0xb3,0x1a,0x0d,0x71,
    0x01,0xb7,0x1a,0x0d,0x75,0xfd,0x1a,0x89,0x5d,0x35,0xca,0x25,0x67,0x96,0xeb,0x8f,
    0x4f,0x91,0x53,0x35,0x52,0x1f,0xe1,0xa4,0x1a,0x09,0xa6,0x1a,0xdd,0xe7,0x42,0x7e,
    0xe1,0x95,0x82,0xab,0x6a,0x34,0xd9,0x05,0x7b,0x39,0xf5,0x55,0xa3,0x0f,0xd1,0x28,
    0x41,0xbf,0x45,0x03,0x34,0x1a,0x49,0xcd,0x91,0x46,0xa3,0xd1,0x2e,0xc4,0xa9,0x46,
    0xe3,0x8c,0x46,0x62,0x1b,0xe3,0x47,0x01,0x71,0x05,0x46,0xa3,0xb1,0xc4,0x59,0x8d,
    0x0a,0x5d,0xc0,0xad,0x46,0xb7,0x1a,0x8d,0x0a,0x8d,0x46,0x45,0xe4,0x1c,0x63,0x34,
    0xca,0x27,0xa7,0x6a,0xa4,0x3e,0xe3,0x8c,0x46,0x45,0x46,0xa3,0xa5,0x2e,0xe4,0x17,
    0x5e,0xf9,0x70,0x55,0x8d,0x2a,0x5d,0xb0,0x8b,0x56,0x09,0x6a,0xea,0xd9,0x3b,0xc4,
    0x5e,0x14,0xbf,0xe5,0xec,0xb5,0x36,0x62,0x8a,0xcc,0x99,0xff,0x88,0x33,0x7f,0xc4,
    0x9c,0xf9,0x8f,0xc1,0xf5,0xcc,0x7f,0x02,0xa6,0x67,0xfe,0x98,0x39,0x87,0x62,0x3b,
    0x1a,0x9f,0xd9,0x50,0xf7,0xb8,0xf9,0x6e,0x7d,0x46,0xee,0x13,0x26,0xf7,0xe7,0xe0,
    0x9a,0xfb,0x0b,0x30,0xcd,0xdd,0x65,0x72,0x8b,0xed,0xa4,0x1f,0xa7,0xc8,0x7d,0xca,
    0x7c,0xbf,0xbf,0x26,0xf7,0x69,0xf3,0xfd,0xfe,0x06,0xfc,0x2b,0xee,0xe8,0x6f,0xc1,
    0x9a,0x4d,0xbd,0xef,0xc0,0x9b,0xa8,0xd7,0x6d,0xea,0x89,0xed,0x8c,0x1f,0xdd,0xd4,
    0x3b,0x63,0xce,0xec,0x4c,0x17,0xfe,0x56,0x58,0x6e,0x7e,0x6f,0x53,0xbf,0x6e,0xa3,
    0x75,0xad,0x0b,0x3e,0xa7,0x88,0x39,0x63,0xf8,0xfc,0x00,0x9f,0xb3,0x86,0xcf,0x8f,
    0xe0,0xca,0xa7,0xc7,0xf0,0x11,0xdb,0x39,0x3f,0x7a,0xa8,0x73,0xce,0xf0,0x99,0x0d,
    0x9f,0x5a,0xb3,0xf6,0xea,0xd7,0x63,0xf8,0xd4,0xb9,0xe0,0xd3,0x4d,0xcc,0x39,0xc3,
    0xe7,0x27,0xf8,0x64,0x0c,0x9f,0x9f,0xc1,0x95,0x4f,0xaf,0xe1,0x23,0xb6,0xf3,0x7e,
    0xf4,0x52,0xe7,0xbc,0xe1,0x53,0xe5,0xc2,0xdf,0x4a,0x52,0x4f,0xbf,0x51,0xea,0xd7,
    0x6b,0xf8,0x34,0xb8,0xe0,0xd3,0x43,0xcc,0x79,0x7c,0xbb,0xf0,0x3d,0x69,0xce,0xfa,
    0x97,0xe8,0x9d,0x34,0x75,0xa6,0xbb,0x7e,0x3c,0x1a,0x10,0xdb,0x65,0xea,0xd4,0xbb,
    0x50,0xab,0x97,0x98,0x93,0xf8,0x1e,0xc3,0xf7,0x28,0xdf,0x5a,0xf1,0xfd,0x94,0x7c,
    0x32,0xf4,0x7f,0x46,0x09,0xf3,0xad,0xd5,0x98,0x63,0x26,0xff,0x0a,0x17,0x6a,0x74,
    0x11,0x2f,0xf9,0xe6,0xfa,0x88,0x8b,0xd8,0xfe,0xf2,0xbb,0x64,0x96,0x1f,0xff,0x00,
    0xe8,0x6d,0xcc,0x8e,0xec,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform isampler2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
