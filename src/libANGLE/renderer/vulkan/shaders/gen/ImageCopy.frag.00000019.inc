// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000019.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000019[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xeb,0x4f,0xd6,0x65,
    0x18,0xc7,0x7f,0xcf,0x19,0x21,0x40,0x0e,0x4a,0xb8,0xb4,0x3c,0xb0,0xd5,0x30,0x78,
    0xb6,0xc8,0x08,0xd2,0x45,0x46,0x96,0x51,0x0a,0x1e,0x2a,0x78,0xd1,0x41,0x16,0x58,
    0x60,0x05,0xb5,0x74,0xb9,0x86,0x26,0xbc,0x48,0x2b,0x58,0x63,0xd6,0x0a,0x36,0x0b,
    0x5e,0x24,0x4c,0x5f,0xb4,0xf5,0xaa,0xb5,0x56,0x3a,0xd3,0x0e,0xff,0x4d,0xeb,0xb0,
    0xb5,0x75,0x5f,0xf7,0xf3,0xb9,0xdc,0x77,0xcf,0x6a,0xb2,0xdd,0xfb,0xfd,0xee,0xef,
    0x75,0xfa,0x7e,0xaf,0xfb,0xfa,0xdd,0x0f,0x99,0xf4,0xd6,0x42,0x92,0xa4,0x92,0xca,
    0xa4,0x22,0xf9,0x2d,0x29,0xfd,0xd5,0x25,0xe9,0x80,0x24,0x49,0x55,0x92,0x8f,0xcf,
    0x3d,0x7d,0x07,0xfa,0xda,0x26,0xdf,0x1c,0x6e,0xeb,0xb8,0xbf,0x68,0xf6,0x9a,0x24,
    0x13,0xfd,0xcc,0x56,0x9b,0x14,0x92,0x6c,0x78,0xda,0x1a,0x7f,0xf1,0xe8,0x31,0xc3,
    0xab,0xc3,0xba,0x1c,0xd6,0xda,0xe0,0x67,0x78,0xc1,0x72,0x84,0xb7,0xea,0x98,0xd3,
    0x62,0x92,0xe4,0xf1,0x24,0x97,0x34,0x50,0x6f,0x2b,0x4f,0xc7,0x52,0x60,0x15,0x82,
    0xa5,0xc1,0xd6,0x0a,0x96,0x01,0x6b,0x14,0x2c,0x0b,0x76,0xbb,0x60,0x39,0xb0,0x3b,
    0x04,0xcb,0x83,0xdd,0x25,0x58,0x01,0x6c,0x9b,0x60,0x15,0x60,0x77,0x0b,0xb6,0x06,
    0x6c,0xbb,0x60,0x95,0x60,0x45,0xc1,0xaa,0xc0,0x3a,0x04,0xbb,0x0d,0xac,0x53,0xb0,
    0x6a,0xb0,0x87,0x04,0xab,0x01,0x7b,0x38,0xf6,0x2e,0x73,0xb3,0x07,0xd6,0xc7,0xdd,
    0xe1,0xb9,0x85,0x9e,0xf9,0x7e,0xb3,0xec,0xad,0xf7,0x9b,0xd8,0x37,0x84,0xa8,0x74,
    0xb4,0x67,0x62,0xbf,0xec,0x7d,0x5d,0xf0,0xc9,0xa3,0xdd,0x7a,0xdd,0x14,0xf6,0x05,
    0x7a,0x62,0xf6,0xf5,0xc1,0xb3,0x12,0xbb,0xd9,0xaa,0xd0,0x97,0x8d,0x58,0x36,0x6a,
    0x48,0xa1,0xaf,0x9b,0x7d,0xb5,0xe4,0xaa,0xc1,0xdf,0x6b,0xd5,0x93,0x2b,0x89,0xbc,
    0xea,0x6e,0xf6,0xda,0x6b,0xfa,0xaa,0xbf,0xc5,0x72,0x1f,0xe3,0xd0,0xc8,0x39,0x34,
    0xc0,0xa1,0x31,0xd6,0x2a,0x61,0xad,0xe8,0x5b,0x0f,0x27,0xf3,0x6f,0xc2,0x56,0x10,
    0xfb,0x46,0x66,0xc3,0xec,0x9b,0xb0,0xd7,0xc7,0x79,0x4a,0xc7,0x7e,0xb6,0xc2,0xdd,
    0x7b,0xed,0x71,0xad,0x70,0xf1,0xfd,0x0e,0xce,0xcb,0xb4,0xef,0x22,0x87,0xf5,0xaa,
    0x39,0x64,0xec,0x61,0x9f,0x22,0x47,0xf9,0xd3,0x6a,0x3f,0xc2,0x7b,0x0f,0x5a,0x6c,
    0xbf,0xbb,0xac,0x66,0x6f,0xd9,0x7e,0x2f,0xf3,0x6f,0xf1,0x4f,0xc2,0x3d,0x0f,0x87,
    0xa7,0x79,0xcf,0x88,0xff,0x00,0xe7,0xe1,0xfb,0xc3,0xf4,0xc2,0xfc,0x5f,0x80,0xa3,
    0xfa,0x8f,0x32,0xfb,0x66,0x3f,0x49,0xbe,0xac,0xd8,0x4f,0x95,0xf5,0xfa,0x1c,0x67,
    0xee,0xfb,0xf3,0xcc,0x84,0xef,0x2f,0xc8,0xfc,0x5c,0xa2,0xd6,0x49,0xf4,0x5e,0xe2,
    0xbe,0xc8,0xc4,0x5e,0xe6,0x22,0xcf,0x2c,0x7a,0x0d,0xfb,0x33,0x20,0x76,0x4e,0x3b,
    0x99,0xc5,0x5a,0x72,0xef,0x0b,0x0a,0x6a,0xb8,0x13,0x6a,0x59,0xde,0xdb,0x63,0xcc,
    0x74,0x1d,0xf6,0x9e,0x90,0xa1,0x89,0x7b,0x61,0x1d,0xb3,0xb1,0x13,0x9f,0x66,0xf0,
    0xd3,0xc1,0xc7,0xf6,0x1b,0x88,0x6b,0x26,0xce,0x66,0xe3,0x4e,0xe2,0x36,0x12,0xe7,
    0x33,0x6d,0xf8,0x4a,0xf0,0xd9,0x2c,0xf7,0x89,0xcd,0xcb,0x1f,0x81,0x79,0x0b,0x7c,
    0xfe,0x0e,0xfe,0x7e,0xaf,0xb4,0xa0,0xc7,0xde,0xfb,0x43,0x5c,0x9e,0xbb,0x65,0x03,
    0xbe,0xef,0xd2,0xaf,0x7b,0xc0,0x07,0xc2,0xce,0x38,0x7d,0x0d,0xe6,0x7e,0x7f,0x85,
    0x1c,0x9e,0xcb,0x9e,0xbf,0x07,0x2f,0xf3,0xfb,0x11,0x9f,0x1c,0x31,0xdb,0x44,0xc3,
    0x76,0x34,0xb4,0x8a,0x86,0x7b,0xc1,0x5d,0x43,0x1b,0x98,0x6b,0x28,0x8a,0x06,0xb3,
    0xb5,0x73,0xc7,0x59,0xdd,0x76,0xd1,0x70,0x1f,0xb5,0x53,0xa2,0xa1,0x03,0xdc,0x35,
    0x7c,0x03,0xe6,0x7e,0xa6,0xc1,0x73,0x15,0x45,0xc3,0x15,0x7c,0x5a,0x88,0x69,0x17,
    0x0d,0x0f,0xa0,0x61,0x87,0x68,0xe8,0x04,0x77,0x0d,0x0f,0x82,0xb9,0x86,0x6e,0xd1,
    0x60,0xb6,0xae,0x38,0x77,0xa5,0xba,0x5d,0xcc,0x51,0x21,0xe6,0x2b,0xd5,0xbe,0x22,
    0xdf,0xa7,0x71,0x74,0xdf,0x6e,0xe1,0x78,0x15,0xbf,0x22,0x71,0x5d,0xf0,0xb1,0x6f,
    0xf8,0x51,0xbe,0x5f,0x9f,0xb9,0xc7,0xe0,0xdc,0x2b,0x33,0xb7,0x07,0x7c,0x8a,0x99,
    0x7b,0x02,0xec,0x2a,0x71,0xf6,0x4d,0xf7,0x11,0xb7,0x97,0x38,0xeb,0xe9,0x53,0xe0,
    0xde,0xf7,0x7d,0xc4,0x26,0x82,0xed,0x07,0x4b,0xc5,0xf7,0x7c,0xbc,0x0f,0xfa,0xf1,
    0xdd,0x4f,0x0e,0xaf,0x71,0x80,0x1a,0x03,0x52,0xe3,0x20,0xf8,0xf3,0x81,0x99,0xdd,
    0x67,0x87,0xd0,0xd4,0xcf,0x1d,0x72,0x50,0xce,0xe3,0x19,0xe2,0x0f,0xcb,0x79,0x3c,
    0x0b,0xee,0xe7,0xf1,0x1c,0x98,0x9f,0xc7,0x90,0x9c,0x87,0xd9,0x06,0xc3,0x1a,0xa1,
    0xc7,0x83,0xe8,0xa8,0x8f,0xf5,0x4b,0xb5,0x33,0x91,0x7b,0x45,0xbc,0xa7,0x5e,0x02,
    0x3b,0x24,0xdf,0x7a,0x1a,0x9d,0x66,0x3f,0x42,0x9c,0xaf,0x33,0x21,0x97,0xe1,0xc3,
    0xc4,0x1e,0x89,0xb9,0xd6,0x44,0x5d,0x2f,0x93,0x67,0x98,0xfb,0x26,0x27,0xf7,0xa6,
    0x9d,0xfb,0x10,0x9c,0x46,0x44,0xef,0x51,0xf4,0x8e,0x8a,0xde,0x57,0xc0,0x5d,0xef,
    0xab,0x60,0xae,0x77,0x5c,0xf4,0x9a,0x6d,0xcc,0xfe,0x57,0x22,0xf7,0x98,0xe8,0x7d,
    0x4d,0xf4,0xae,0x92,0xeb,0x75,0xf0,0x2d,0x70,0xf2,0xb8,0x71,0x66,0xd1,0x7c,0xde,
    0xa0,0xe6,0x08,0xfe,0x63,0xd4,0x9d,0x94,0xba,0xe6,0x33,0x11,0xd6,0x24,0xf1,0x13,
    0x52,0xf7,0xad,0xff,0xe8,0xf3,0xdb,0xb7,0xe8,0xf3,0x71,0xe2,0x7c,0xcd,0xd0,0xe7,
    0x13,0xc4,0x1e,0x97,0x3e,0xbf,0x43,0x9e,0x13,0xff,0xd3,0x67,0xe7,0x34,0x89,0x26,
    0x8b,0xf9,0x89,0x98,0x71,0xe2,0x27,0xca,0xce,0x64,0x48,0x7c,0xaf,0x71,0x96,0x83,
    0xc4,0x4d,0xc6,0xdf,0x96,0xd2,0xef,0xd6,0x14,0x76,0x3f,0xbf,0xd3,0x9c,0xdf,0x29,
    0x39,0xbf,0xf7,0xc0,0xfd,0xfc,0xce,0x80,0xf9,0xf9,0xcd,0x48,0x1f,0xcd,0x36,0x1d,
    0xd6,0x59,0x78,0x4c,0xa3,0xd3,0x6a,0xbd,0x4f,0xbd,0x29,0x74,0x16,0xe8,0x99,0xeb,
    0x9c,0x21,0xe6,0xac,0xf0,0xf9,0x00,0x3e,0xe7,0x84,0xcf,0x87,0xe0,0xce,0xe7,0x23,
    0x30,0xe7,0x33,0x27,0x7c,0xcc,0x36,0x1b,0xd6,0x3c,0xb9,0x67,0xe5,0x1e,0xf8,0x18,
    0x2e,0x19,0xee,0x60,0xe3,0xf8,0xad,0xe0,0x7e,0xbf,0xcd,0x11,0x3b,0x2f,0xf7,0xc2,
    0x27,0xf0,0x3a,0x2f,0xf7,0xc2,0xa7,0xe0,0xd7,0xc8,0xff,0x19,0xd8,0x80,0x70,0xfd,
    0x1c,0xbc,0x17,0xae,0x8b,0xc2,0xd5,0x6c,0x0b,0x61,0x2d,0x52,0x6f,0x41,0x78,0x7d,
    0x47,0xcc,0x94,0xfc,0x36,0xb8,0xdf,0x22,0x67,0x6d,0x7e,0xd7,0xf1,0x99,0x27,0x66,
    0x41,0xf8,0x7c,0x01,0x9f,0x0b,0xc2,0xe7,0x4b,0x70,0xe7,0xb3,0x2c,0x7c,0xcc,0xb6,
    0x14,0xd6,0x32,0x75,0x96,0x84,0xcf,0xf7,0xc4,0x5c,0xe7,0x0c,0x8d,0x8f,0xfb,0x2d,
    0x0b,0x9f,0x1b,0xf8,0x2c,0x12,0xb3,0x24,0x7c,0xbe,0x82,0xcf,0xa8,0xf0,0xb9,0x08,
    0xee,0x7c,0x56,0x85,0xcf,0xc5,0xe8,0x97,0x44,0xcc,0xea,0xac,0x08,0x9f,0x1f,0xf8,
    0x9f,0xe5,0x86,0xcc,0x93,0xfb,0xad,0x0a,0x9f,0x5f,0xf1,0x59,0x26,0x66,0xa5,0xec,
    0x8c,0xe7,0xc4,0xf7,0x17,0xe6,0x61,0x96,0xb8,0xd5,0xb2,0x39,0x9d,0x11,0xdf,0x9f,
    0x99,0xef,0x69,0xe2,0x2c,0xcf,0xae,0xc0,0xe4,0x32,0xb6,0x7f,0xc2,0xa9,0x75,0x86,
    0xf5,0x2f,0x23,0xca,0xa7,0x84,0x50,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
