// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000015.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000015[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0x96,0x65,
    0x18,0xc6,0xef,0xe7,0xb9,0x9f,0x17,0x84,0x00,0x79,0x51,0xc2,0xa5,0x65,0xca,0x56,
    0xc3,0x80,0x2d,0x32,0x82,0x74,0x91,0x91,0x65,0x94,0x82,0x2f,0x15,0x6c,0x15,0x4e,
    0x28,0x61,0x12,0xcc,0xd2,0xf5,0xa5,0xa5,0x09,0x6d,0x69,0x05,0x6b,0xcc,0x5a,0xc1,
    0x66,0xc1,0x87,0x84,0xec,0x43,0x5b,0x9f,0x5a,0x6b,0xa5,0x23,0xed,0xe5,0xbf,0x69,
    0xbd,0x6c,0x6d,0x5d,0xe7,0xc5,0xef,0x74,0xc7,0x9e,0xd5,0x64,0xbb,0x76,0xdf,0xd7,
    0x71,0xbe,0x1d,0xc7,0x79,0x5e,0xf7,0xc5,0x93,0x66,0xb7,0x15,0x93,0x24,0x93,0x94,
    0x27,0x65,0xc9,0x6f,0xc9,0xda,0x5f,0x4d,0x92,0x0d,0x48,0x92,0x54,0x24,0x85,0xf8,
    0xdc,0xdb,0x7b,0xb0,0xb7,0xe5,0xe4,0x6b,0xc7,0x5a,0xda,0x1f,0x68,0x33,0x7b,0x55,
    0x92,0x46,0x3f,0xb3,0x55,0x27,0xc5,0x24,0x17,0x9e,0xb6,0x4e,0x0c,0x1d,0x1f,0x37,
    0xbc,0x32,0xac,0xaf,0xc2,0x5a,0x1f,0xfc,0x0c,0x2f,0x5a,0x8e,0xf0,0x56,0x19,0x73,
    0x5a,0x4c,0x92,0x3c,0x91,0xe4,0x93,0x3a,0xea,0x6d,0xe3,0xe9,0x58,0x06,0xac,0x4c,
    0xb0,0x2c,0xd8,0x7a,0xc1,0x52,0xb0,0x7a,0xc1,0x72,0x60,0xb7,0x0b,0x96,0x07,0xbb,
    0x43,0xb0,0x02,0xd8,0x5d,0x82,0x15,0xc1,0xb6,0x0b,0x56,0x06,0x76,0x8f,0x60,0xeb,
    0xc0,0x76,0x08,0x56,0x0e,0xd6,0x26,0x58,0x05,0x58,0xbb,0x60,0xb7,0x81,0x75,0x08,
    0x56,0x09,0xf6,0xb0,0x60,0x55,0x60,0x8f,0xc4,0xde,0xa5,0x37,0x7b,0x60,0x7d,0xdc,
    0x13,0x9e,0x77,0xd3,0x33,0xdf,0x6f,0x95,0xbd,0xf5,0x7e,0x0b,0xfb,0xba,0x10,0x95,
    0x8d,0xf6,0x34,0xf6,0xcb,0xde,0x37,0x04,0x9f,0x02,0xda,0xad,0xd7,0x0d,0x61,0x5f,
    0xa4,0x27,0x66,0xdf,0x18,0x3c,0xcb,0xb1,0x9b,0xad,0x02,0x7d,0xb9,0x88,0xe5,0xa2,
    0x86,0x0c,0xfa,0xba,0xd8,0x57,0x4a,0xae,0x2a,0xfc,0xbd,0x56,0x2d,0xb9,0x92,0xc8,
    0xab,0xe6,0x66,0xaf,0xbd,0xa6,0xaf,0xda,0x5b,0x2c,0xf7,0x31,0x0e,0xf5,0xcc,0xa1,
    0x0e,0x0e,0xf5,0xb1,0xd6,0x1a,0xd6,0x8c,0xbe,0x8d,0x70,0x32,0xff,0x06,0x6c,0x45,
    0xb1,0x6f,0xe6,0x6c,0x98,0x7d,0x0b,0xf6,0xda,0x78,0x9e,0xb2,0xb1,0x9f,0xcd,0x70,
    0xf7,0x5e,0x7b,0x5c,0x33,0x5c,0x7c,0xbf,0x93,0x79,0x99,0xf6,0xdd,0xd8,0xac,0x57,
    0x8d,0x21,0x63,0x37,0xfb,0x0c,0x39,0x4a,0x9f,0x56,0xfb,0x51,0xde,0xbb,0xd1,0x62,
    0xfb,0x3d,0x25,0x35,0x7b,0x4a,0xf6,0xfb,0x38,0xff,0x16,0xff,0x14,0xdc,0x0b,0x70,
    0x78,0x86,0xf7,0x54,0xfc,0xfb,0x99,0x87,0xef,0x8f,0x94,0xf4,0x62,0x84,0xb3,0xee,
    0xfb,0x33,0x25,0xbd,0xbc,0xc0,0x4c,0x7d,0x7f,0x91,0x99,0xfb,0xfe,0x92,0x9c,0x8f,
    0x2b,0xd4,0xde,0x8d,0x9e,0x2b,0xdc,0x07,0x69,0xec,0x55,0x3e,0xf2,0xc8,0xa1,0xc7,
    0xb0,0x3f,0x03,0x62,0x73,0xd8,0xc5,0x59,0xab,0x26,0xf7,0xfe,0xc0,0xb0,0x8a,0x6f,
    0xbe,0x9a,0xe5,0xbd,0x1b,0xe7,0xcc,0xd6,0x60,0xef,0x0e,0x19,0x1a,0xf8,0xee,0x37,
    0x30,0xfb,0x5d,0xf8,0x34,0x82,0x9f,0x0d,0x3e,0xb6,0xdf,0x44,0x5c,0x23,0x71,0x36,
    0xfb,0x3b,0x89,0xdb,0x4c,0x9c,0x9f,0x59,0xc3,0x97,0x83,0xcf,0x56,0xb9,0x2f,0xec,
    0x3c,0xfc,0x11,0x98,0x37,0xc1,0xe7,0xef,0xe0,0xef,0xf7,0x46,0x13,0x7a,0xec,0xbd,
    0x2f,0xc4,0x15,0xb8,0x3b,0x36,0xe1,0xfb,0x26,0xfd,0xba,0x17,0xbc,0x3f,0xec,0x8c,
    0xd3,0xd7,0x60,0xee,0xf7,0x57,0xc8,0xe1,0xb9,0xec,0xf9,0x7b,0xf0,0x32,0xbf,0x1f,
    0xf1,0xc9,0x13,0xb3,0x5d,0x34,0xec,0x40,0x43,0xb3,0x68,0xb8,0x0f,0xdc,0x35,0xb4,
    0x80,0xb9,0x86,0x36,0xd1,0x60,0xb6,0x56,0xee,0x30,0xab,0xdb,0x2a,0x1a,0xee,0xa7,
    0x76,0x46,0x34,0xb4,0x83,0xbb,0x86,0x6f,0xc0,0xdc,0xcf,0x34,0x78,0xae,0x36,0xd1,
    0x70,0x15,0x9f,0x26,0x62,0x5a,0x45,0xc3,0x83,0x68,0xd8,0x29,0x1a,0x3a,0xc0,0x5d,
    0xc3,0x43,0x60,0xae,0xa1,0x4b,0x34,0x98,0xad,0x33,0x9e,0xbb,0xb5,0xba,0x9d,0x9c,
    0xa3,0x62,0xcc,0xb7,0x56,0xfb,0xaa,0x7c,0x7f,0xc6,0xd1,0x7d,0xbb,0x84,0xe3,0x35,
    0xfc,0xda,0x88,0xeb,0x84,0x8f,0x7d,0xa3,0x8f,0xf1,0x7d,0xfa,0x99,0x7b,0x1c,0xce,
    0x3d,0x72,0xe6,0xf6,0x82,0xbf,0xc5,0x99,0x7b,0x12,0xec,0x1a,0x71,0xf6,0xcd,0xf6,
    0x12,0xb7,0x8f,0x38,0xeb,0xe9,0xd3,0xe0,0xde,0xf7,0xfd,0xc4,0x26,0x82,0x1d,0x00,
    0xcb,0xc4,0xf7,0x42,0xfc,0xde,0xfb,0xf0,0x3d,0x40,0x0e,0xaf,0x71,0x90,0x1a,0xfd,
    0x52,0xe3,0x10,0xf8,0x8b,0x81,0x99,0x7d,0xa3,0x87,0xd1,0xd4,0xc7,0x1d,0x71,0x48,
    0xe6,0xf1,0x2c,0xf1,0x47,0x64,0x1e,0xcf,0x81,0xfb,0x3c,0x9e,0x07,0xf3,0x79,0x0c,
    0xca,0x3c,0xcc,0x36,0x10,0xd6,0x30,0x3d,0x1e,0x10,0x1d,0x2f,0x50,0x3b,0x8d,0xdc,
    0xcb,0xa2,0x8e,0x97,0xc0,0x0e,0xcb,0xb7,0x9e,0x15,0x9d,0x43,0xc4,0xf9,0x3a,0x17,
    0x72,0x19,0x7e,0x94,0xd8,0xa1,0x98,0x6b,0x5d,0xd4,0x75,0x8c,0x3c,0x47,0xb9,0x6f,
    0xf2,0x72,0x2f,0xda,0xdc,0x07,0xe1,0x34,0x2c,0x7a,0x5f,0x46,0xef,0x88,0xe8,0x7d,
    0x05,0xdc,0xf5,0x1e,0x07,0x73,0xbd,0x63,0xa2,0xd7,0x6c,0xa3,0x61,0x8d,0x91,0x7b,
    0x54,0xf4,0x9e,0x10,0xbd,0x5f,0x92,0x6b,0x1c,0xbc,0x07,0x4e,0x1e,0x37,0xc6,0x59,
    0x34,0x9f,0x57,0xa9,0x39,0x8c,0xff,0x28,0x75,0x27,0xa5,0xae,0xf9,0x4c,0x84,0x35,
    0x49,0xfc,0x84,0xd4,0x3d,0xf9,0x1f,0x7d,0x7e,0xfd,0x16,0x7d,0x3e,0x45,0x9c,0xaf,
    0x77,0xe8,0xf3,0x69,0x62,0x4f,0x49,0x9f,0xdf,0x20,0xcf,0xe9,0xff,0xe9,0xb3,0x73,
    0x9a,0x44,0x93,0xc5,0xfc,0x44,0xcc,0x18,0xf1,0x13,0x25,0x33,0x19,0x14,0xdf,0x55,
    0x66,0x39,0x40,0xdc,0xa4,0xcc,0xeb,0x2c,0xf3,0x3a,0x23,0xf3,0x7a,0x1b,0xdc,0xe7,
    0x75,0x0e,0xcc,0xe7,0x35,0x2d,0x7d,0x33,0xdb,0x54,0x58,0xe7,0xa9,0x3b,0x25,0xba,
    0xde,0xa5,0xf6,0x2a,0xba,0x8a,0xf4,0xc8,0x75,0x4d,0x13,0x73,0x5e,0xf8,0xbc,0x07,
    0x9f,0x0b,0xc2,0xe7,0x7d,0x70,0xe7,0xf3,0x01,0x98,0xf3,0x99,0x15,0x3e,0x66,0x9b,
    0x09,0x6b,0x8e,0xdc,0x33,0x32,0xc7,0x0f,0xe1,0x92,0x72,0xe7,0x1a,0xc7,0x6f,0x05,
    0xf7,0xfb,0x6c,0x96,0xd8,0x39,0xb9,0x07,0x3e,0x82,0xd7,0x45,0xb9,0x07,0x3e,0x06,
    0x5f,0x25,0xff,0x27,0x60,0xfd,0xc2,0xf5,0x53,0xf0,0x1e,0xb8,0x2e,0x08,0x57,0xb3,
    0xcd,0x87,0xb5,0x40,0xbd,0x79,0xe1,0xf5,0x1d,0x31,0xab,0xf2,0xbf,0xc0,0xfd,0x16,
    0x64,0xb6,0xd7,0xf1,0x99,0x23,0x66,0x5e,0xf8,0x7c,0x06,0x9f,0x4b,0xc2,0xe7,0x73,
    0x70,0xe7,0xb3,0x24,0x7c,0xcc,0xb6,0x18,0xd6,0x12,0x75,0x16,0x85,0xcf,0xf7,0xc4,
    0x5c,0x67,0x86,0xc6,0xc7,0xfd,0x96,0x84,0xcf,0x0d,0x7c,0x16,0x88,0x59,0x14,0x3e,
    0x5f,0xc0,0x67,0x44,0xf8,0x5c,0x06,0x77,0x3e,0x2b,0xc2,0xe7,0x72,0xf4,0x4b,0x22,
    0x66,0x75,0x96,0x85,0xcf,0x0f,0xfc,0x46,0xb9,0x21,0xe7,0xc9,0xfd,0x56,0x84,0xcf,
    0xaf,0xf8,0x2c,0x11,0xb3,0x5c,0x32,0xe3,0x59,0xf1,0xfd,0x85,0xf3,0x30,0x43,0xdc,
    0x4a,0xc9,0x39,0x9d,0x16,0xdf,0x9f,0x39,0xdf,0x53,0xc4,0xcd,0xc6,0xdf,0x6b,0x69,
    0xfc,0x9d,0x66,0xb6,0x7f,0xc2,0xd4,0x3a,0xc2,0xfa,0x17,0xbd,0xff,0xcb,0x06,0x20,
    0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2DArray src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
