// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000038.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000038[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x6d,0x4c,0x96,0x55,
    0x18,0xc7,0xef,0xf3,0x3c,0xf0,0x80,0x6f,0xa4,0x8b,0x54,0x4c,0xed,0x21,0xf1,0xa5,
    0x40,0x24,0x35,0x35,0xf5,0x11,0x0d,0x13,0x56,0x0c,0x04,0xca,0xa6,0x19,0x65,0x59,
    0x4a,0xa5,0x94,0xf0,0xa1,0x96,0x16,0xa8,0xb0,0x4a,0xd6,0xd2,0xf5,0xa1,0x5a,0x5a,
    0xba,0xb5,0xb6,0x6a,0xae,0xcd,0x4a,0x3f,0xa4,0x95,0xac,0x31,0x6b,0x25,0x6d,0x96,
    0x6c,0x25,0x4d,0x3f,0xf4,0xb9,0xe5,0x34,0x4b,0x5b,0x9d,0xeb,0x3e,0xbf,0x0b,0xae,
    0x58,0x4d,0xb6,0xb3,0xfb,0x3e,0xff,0xeb,0xed,0x7f,0xfd,0xcf,0xcb,0x0d,0x24,0x13,
    0x53,0x72,0xa2,0xc8,0x45,0xc3,0xa3,0xdc,0xe8,0x6e,0x17,0xc5,0x3f,0x63,0xa2,0x44,
    0xe4,0x78,0xce,0xf6,0xcf,0x11,0x51,0x2a,0x9e,0x57,0x56,0x37,0x54,0x97,0xb6,0xb4,
    0xae,0x2f,0x9d,0x7b,0x6b,0x99,0xf8,0xe5,0x45,0xc9,0xd8,0x5f,0x6c,0xd7,0x44,0x39,
    0x51,0x96,0x7f,0xca,0xd8,0xb4,0xae,0x69,0xb3,0xe0,0xd3,0xfc,0x38,0xe7,0xc7,0x68,
    0xef,0x27,0x78,0x8e,0xe4,0xf0,0x6f,0xd3,0xe2,0x9c,0x12,0x13,0x45,0x55,0x51,0x76,
    0x54,0x12,0xca,0x46,0x53,0x78,0x2a,0xe6,0xc0,0x72,0x0d,0x96,0x00,0x1b,0x6d,0xb0,
    0x24,0x58,0xbe,0xc1,0xb2,0xc0,0xc6,0x1b,0x2c,0x1b,0x6c,0xa2,0xc1,0x52,0x60,0x69,
    0x83,0xe5,0x80,0x15,0x19,0x2c,0x17,0x6c,0x86,0xc1,0x86,0x81,0x95,0x18,0x6c,0x38,
    0x58,0x99,0xc1,0x46,0x80,0xcd,0x35,0xd8,0x48,0xb0,0x05,0x06,0x1b,0x05,0xb6,0xd8,
    0x60,0x79,0x60,0x4b,0x63,0xed,0x92,0x03,0x1a,0x88,0x8e,0x6b,0xfd,0xf3,0x46,0x34,
    0xd3,0x79,0xa1,0x99,0x8b,0xf6,0x93,0x99,0x5f,0xeb,0xa3,0x12,0xb1,0x3d,0x19,0xeb,
    0x25,0xef,0x63,0xfd,0x5b,0x8a,0xde,0x8b,0xbd,0x7f,0x0a,0x0e,0xbf,0x1c,0x9c,0x9a,
    0xc9,0xf7,0x1e,0x79,0x06,0x17,0x1d,0x0f,0x56,0xae,0xcb,0xe8,0x5c,0x34,0x7c,0xe3,
    0xf5,0x82,0xa5,0xd7,0xf9,0x79,0x9a,0x1c,0xb2,0x5e,0xe3,0xfc,0xbc,0x90,0x79,0x82,
    0x79,0x11,0x3a,0x67,0xc5,0x78,0x56,0x34,0x15,0x5f,0xc1,0x17,0x31,0x9f,0x66,0xe2,
    0xa7,0xe3,0x2f,0xf1,0x92,0xbf,0x98,0x7c,0x51,0xdc,0xcf,0x98,0x58,0x83,0x42,0x46,
    0xda,0x8c,0xe2,0xab,0x8c,0xf4,0xc0,0x33,0x2b,0x9a,0xc9,0xfa,0x95,0xc0,0x41,0xe6,
    0xa5,0x60,0xc5,0xf4,0x34,0x0b,0x4e,0xe2,0x5f,0x86,0xad,0xd0,0xd8,0xe7,0xb1,0xa7,
    0xc4,0x3e,0x7f,0x20,0x36,0xd8,0xe5,0xb9,0x10,0xce,0xea,0x5f,0x41,0x5f,0x3a,0xaf,
    0x61,0x7d,0xa5,0xe7,0x55,0xc4,0x8a,0x46,0x05,0x3e,0xd3,0x6a,0xe6,0x1c,0xc9,0x81,
    0x1f,0x9d,0x5f,0xef,0xd7,0x6e,0x8d,0x7f,0xae,0xa6,0xfe,0x7d,0xe0,0x6b,0xe8,0x47,
    0xe6,0x6b,0x87,0xd4,0x6f,0x1c,0x32,0x6f,0x42,0x63,0x89,0x7f,0x0c,0xfe,0x69,0x63,
    0x6f,0xe6,0x2c,0x08,0xbf,0x67,0xe0,0x93,0x34,0xf6,0x76,0xce,0x85,0xce,0xf7,0xb2,
    0xaf,0x75,0x7e,0x68,0x88,0x9e,0xc7,0x38,0x1f,0x3a,0x3f,0xc1,0x7e,0xd3,0x3d,0xf5,
    0xdd,0x10,0x7e,0xa7,0xd0,0x43,0xed,0x3f,0xc7,0xd6,0xb6,0x72,0xe1,0x7b,0x16,0x2e,
    0xba,0x87,0xce,0x72,0xd7,0x24,0x8d,0xff,0x12,0x2f,0x56,0x7b,0x5b,0xdb,0xa2,0x12,
    0xdf,0x85,0xf8,0x95,0xbb,0x80,0xd9,0xa1,0xbe,0x4b,0xfd,0x7b,0xf3,0xbb,0x5b,0xca,
    0x75,0xbe,0xcc,0xcf,0x77,0xef,0xd8,0x97,0x99,0xe7,0x57,0x38,0x01,0x8f,0x88,0xfc,
    0x97,0x3c,0x22,0xeb,0x9e,0x61,0x6f,0xcf,0x60,0xff,0xd6,0xfa,0x3a,0xb2,0x77,0x6f,
    0x02,0x9b,0x61,0xd6,0x6c,0x33,0xe7,0xe2,0x66,0xec,0xcb,0x7c,0x06,0xd9,0x53,0xb7,
    0xb0,0xef,0x66,0x91,0x4f,0x7c,0x66,0x83,0x6f,0xf7,0x3e,0x32,0x9f,0x43,0xdc,0x6c,
    0xe2,0xe6,0x73,0x6f,0x94,0xb2,0x07,0x33,0xec,0xb7,0xdb,0xc0,0xdf,0xf7,0x3e,0x79,
    0xb1,0x2e,0x01,0x93,0x7d,0xf8,0xbb,0x67,0x9e,0x81,0xcf,0x9f,0xde,0x7f,0x11,0xf7,
    0x4c,0x86,0x7e,0xe4,0xbd,0xce,0xc7,0xa5,0xb9,0x6b,0xe6,0xe0,0xfb,0x1c,0x6b,0xb1,
    0x0c,0xbc,0xde,0xab,0x23,0x9c,0x8a,0x5c,0xc0,0xd4,0xef,0x0f,0x9f,0x43,0x73,0xc9,
    0xf3,0x82,0xd7,0x42,0xfc,0x6e,0x77,0xc1,0x27,0x9b,0x98,0xc5,0xa6,0x87,0xe5,0xf4,
    0x50,0x61,0x7a,0xb8,0x03,0x5c,0x7b,0x58,0x01,0xa6,0x3d,0x54,0x99,0x1e,0x56,0xc4,
    0xf7,0x5c,0x14,0x63,0x52,0xb7,0xd2,0xf4,0x70,0x17,0xb5,0x9d,0xe9,0xa1,0x1a,0x5c,
    0x7b,0x98,0xee,0x02,0xa6,0x7e,0xd2,0x83,0xe6,0xaa,0x32,0x3d,0x54,0xb8,0xe0,0x93,
    0x21,0xa6,0xd2,0xf4,0x50,0x4b,0x0f,0x35,0xa6,0x87,0x95,0xe0,0xda,0x43,0x1d,0x98,
    0xf6,0xd0,0x60,0x7a,0xa8,0x8b,0xf9,0x44,0x31,0x26,0x75,0xeb,0xd9,0x47,0x52,0xf7,
    0x1e,0x6a,0x57,0xb8,0xc1,0x73,0x2f,0x1c,0xd5,0xb7,0xc1,0x70,0x5c,0x8e,0x5f,0x15,
    0x71,0xf5,0xf0,0x91,0xfb,0xe0,0x7e,0xee,0x02,0xdd,0x73,0x0f,0xc0,0xb9,0xd1,0xec,
    0xb9,0x07,0xc1,0xdb,0xd8,0x73,0x0f,0x81,0x49,0xde,0x66,0xee,0xe4,0x87,0xc1,0xd7,
    0xfb,0xb9,0xdc,0x3b,0x8f,0x90,0x7b,0x03,0x31,0x8f,0x82,0x35,0x46,0x83,0x31,0x1b,
    0xc0,0x5f,0xf0,0x3e,0x32,0xdf,0x48,0x9e,0x0d,0xf0,0x91,0x7b,0xe7,0x71,0xf8,0x34,
    0xc1,0x47,0xd6,0xea,0x09,0xf0,0x66,0xce,0xe3,0x26,0xb0,0x7b,0x7d,0xbf,0xab,0xe2,
    0xf3,0x14,0x6a,0x6f,0xe4,0x7c,0x6d,0x32,0x6b,0xf2,0x24,0xf9,0x9a,0xcd,0x9a,0x3c,
    0x05,0xae,0x6b,0xb2,0x05,0x4c,0xd7,0xa4,0xd5,0xac,0x89,0xd8,0x5a,0x62,0x2d,0x82,
    0xce,0x6d,0x26,0xf7,0x76,0x72,0xb7,0x9b,0xdc,0x3b,0xc0,0x35,0xf7,0x4e,0x30,0xcd,
    0xdd,0x69,0x72,0x8b,0xad,0xc3,0x8f,0x4e,0x72,0x77,0xb0,0x67,0x8b,0x63,0x8d,0x42,
    0x5f,0x72,0xc7,0x7c,0x40,0xae,0x17,0xc1,0x17,0xb2,0xf6,0x1a,0xd7,0xc9,0xda,0x8b,
    0xcf,0x4b,0xd4,0x6c,0xc3,0xbf,0x83,0xba,0x5d,0xa6,0xae,0xf8,0xec,0xf2,0xa3,0x8b,
    0xf8,0x5d,0xa6,0xee,0xcb,0xa6,0x6e,0xad,0xbf,0xd1,0xe5,0xae,0x7f,0x05,0x6c,0xb3,
    0xb9,0xc3,0x12,0xf1,0x3e,0x4e,0xc5,0xf6,0xdd,0xc4,0xe9,0xe8,0xf4,0xb9,0x04,0xdf,
    0x43,0xec,0xee,0x38,0xd7,0xb0,0x78,0xad,0x5e,0x25,0xcf,0x1e,0xee,0xd1,0x6c,0xbe,
    0x83,0x49,0x7a,0x52,0x4e,0x5d,0xf4,0x24,0x31,0x95,0x2e,0xc4,0x74,0x12,0xbf,0x0b,
    0xdf,0x56,0x7c,0x5b,0x0c,0xff,0xa7,0xff,0x83,0xff,0xb3,0x57,0xe1,0xbf,0x95,0x38,
    0x1d,0x3b,0xe1,0xbf,0x8d,0xd8,0xad,0x86,0xff,0xf3,0xe4,0xd9,0xf6,0x3f,0xfc,0x95,
    0x53,0xab,0xe1,0xbf,0xc2,0x85,0x1e,0xba,0x88,0x6f,0x89,0xf7,0x5f,0xf8,0x5e,0xbc,
    0x86,0xbd,0xc3,0x67,0x92,0xf9,0x9b,0x60,0xe5,0x6e,0x70,0x9f,0xed,0x63,0x9f,0xed,
    0x35,0xfb,0xec,0x2d,0x70,0xdd,0x67,0x6f,0x83,0xe9,0x3e,0x3b,0x60,0xd6,0x5b,0x6c,
    0xfb,0xfd,0x38,0x00,0xb7,0xfd,0xe8,0x25,0xbc,0xdf,0xa1,0x66,0x44,0xdc,0x15,0xde,
    0x2f,0xfb,0x77,0xc9,0xf5,0x2b,0x31,0xf2,0xfc,0x94,0x5a,0xbf,0x11,0x37,0x8a,0x98,
    0xcb,0xa6,0x96,0xd8,0xce,0xfb,0x71,0x91,0xb8,0x8b,0xf1,0xf9,0x08,0xb5,0x2e,0x11,
    0x37,0x3e,0x0a,0xfd,0xa6,0x62,0xcd,0x02,0x2e,0xdf,0xdc,0x91,0x5e,0xaf,0x54,0x9c,
    0x27,0xac,0xd1,0x04,0xec,0x13,0xd1,0xf6,0x0a,0x39,0xcf,0x9b,0xf8,0x0b,0xe4,0x94,
    0x6f,0xb4,0xf5,0x11,0x4e,0x7f,0xfb,0x2c,0x97,0xc0,0x2e,0x90,0xbb,0xca,0x85,0xfc,
    0x17,0x89,0x3d,0xcf,0x37,0x40,0xb4,0x9f,0xe9,0x82,0x5d,0xf5,0x50,0x8d,0xde,0x43,
    0x23,0x47,0xbf,0x79,0xee,0xdf,0x1a,0x25,0x5c,0xa8,0x29,0x4f,0xd5,0x28,0xcb,0x85,
    0x38,0xd5,0x68,0x94,0x1b,0xd4,0x48,0x6c,0xd9,0x7e,0xe4,0x12,0x27,0x4f,0xd5,0x68,
    0x38,0x71,0x56,0xa3,0x11,0x2e,0xe0,0x56,0xa3,0x91,0x6e,0x50,0x23,0xb1,0xab,0x46,
    0x79,0xe4,0xcc,0x76,0x83,0xf1,0x39,0xe4,0x54,0x8d,0xd4,0x47,0x38,0xa9,0x46,0x82,
    0xa9,0x46,0x77,0xba,0x90,0x5f,0x78,0xe5,0xc0,0x55,0x35,0x2a,0x73,0xc1,0x3e,0x93,
    0xfa,0xaa,0xd1,0x87,0x68,0x94,0xa0,0xdf,0xf4,0x10,0x8d,0xf2,0xa9,0x99,0x6f,0x34,
    0x1a,0xeb,0x42,0x9c,0x6a,0x74,0x83,0xd1,0x48,0x6c,0xe3,0xfc,0x98,0x40,0xdc,0x04,
    0xa3,0xd1,0x44,0xe2,0xac,0x46,0x93,0x5c,0xc0,0xad,0x46,0x93,0x8d,0x46,0x93,0x8c,
    0x46,0x69,0x72,0x8e,0x33,0x1a,0x15,0x90,0x53,0x35,0x52,0x9f,0x1b,0x8c,0x46,0x69,
    0xa3,0x51,0xb5,0x0b,0xf9,0x85,0x57,0x01,0x5c,0x55,0xa3,0x39,0x2e,0xd8,0x45,0xab,
    0x04,0x35,0xf5,0xec,0x1d,0x60,0x2f,0x8a,0x5f,0x0d,0x7b,0xad,0x95,0x98,0xb4,0x39,
    0xf3,0x1f,0x71,0xe6,0x0f,0x99,0x33,0xff,0x31,0xb8,0x9e,0xf9,0x4f,0xc0,0xf4,0xcc,
    0x1f,0x31,0xe7,0x50,0x6c,0x87,0xfd,0x38,0x4a,0xdd,0xa3,0xe6,0xbb,0xf5,0x19,0xb9,
    0x8f,0x99,0xdc,0x9f,0x83,0x6b,0xee,0x2f,0xc0,0x34,0x77,0xb7,0xc9,0x2d,0xb6,0xe3,
    0x7e,0xf4,0x90,0xbb,0xc7,0x7c,0xbf,0xbf,0x22,0xf7,0x09,0xf3,0xfd,0xfe,0x1a,0xbc,
    0x87,0xdf,0xc7,0xbe,0x01,0x6b,0x32,0xf5,0xbe,0x05,0x6f,0xa4,0x5e,0xaf,0xa9,0x27,
    0xb6,0x93,0x7e,0xf4,0x52,0xef,0xa4,0x39,0xb3,0x0b,0x5c,0xf8,0x5b,0xa1,0xc6,0xfc,
    0xde,0xa6,0x7e,0xbd,0x46,0xeb,0x5a,0x17,0x7c,0x7a,0x88,0x39,0x69,0xf8,0x7c,0x0f,
    0x9f,0x53,0x86,0xcf,0x0f,0xe0,0xca,0xa7,0xcf,0xf0,0x11,0xdb,0x69,0x3f,0xfa,0xa8,
    0x73,0xda,0xf0,0x59,0x08,0x9f,0x5a,0xb3,0xf6,0xea,0xd7,0x67,0xf8,0xac,0x74,0xc1,
    0xa7,0x97,0x98,0xd3,0x86,0xcf,0x8f,0xf0,0x69,0x37,0x7c,0x7e,0x02,0x57,0x3e,0xfd,
    0x86,0x8f,0xd8,0xce,0xf8,0xd1,0x4f,0x9d,0x33,0x86,0xcf,0x62,0x17,0xfe,0x56,0x92,
    0x7a,0xfa,0x8d,0x52,0xbf,0x7e,0xc3,0xa7,0xc1,0x05,0x9f,0x3e,0x62,0xce,0xe0,0xdb,
    0x8d,0xef,0x71,0x73,0xd6,0xbf,0x44,0xef,0xa4,0xa9,0x33,0xcf,0x0d,0xe2,0xd1,0x90,
    0xd8,0x6e,0x53,0xa7,0xde,0x85,0x5a,0xfd,0xc4,0x1c,0xc7,0xf7,0x08,0xbe,0x87,0xf9,
    0xd6,0x16,0xc5,0xdf,0x9b,0x90,0x4f,0x86,0xfe,0xcf,0x28,0x61,0xbe,0xb5,0x1a,0x73,
    0xc4,0xe4,0xaf,0x73,0xa1,0x46,0x37,0xf1,0x92,0x6f,0x89,0x8f,0x38,0x87,0xed,0x2f,
    0xbf,0x4b,0x16,0xf8,0xf1,0x0f,0x6c,0xa8,0xab,0xed,0xec,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform usampler2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
