// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000004A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000004A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xed,0x4f,0xd5,0x65,
    0x18,0xc7,0xef,0x73,0x7e,0xe7,0xf0,0x43,0x08,0x90,0x07,0x21,0x5a,0x5a,0x2a,0x6c,
    0x3a,0x0c,0x4e,0x8b,0x8c,0x20,0x59,0x0e,0xb5,0x86,0x24,0x9a,0xcd,0x37,0xcd,0x39,
    0x1b,0x5a,0xc2,0xb2,0x16,0x2c,0x28,0xa1,0x10,0xca,0x74,0xbd,0xb4,0x82,0x37,0x69,
    0x05,0x73,0x4c,0x9d,0x09,0x5b,0xc1,0x8b,0x82,0xd9,0x8b,0x5a,0xaf,0x5a,0x6b,0x3e,
    0x0d,0xb5,0x9a,0xfd,0x0b,0xda,0xc3,0xd6,0xd6,0x7d,0xdd,0xe7,0x73,0xd9,0xb5,0xb3,
    0x9a,0x67,0xbb,0xf7,0x3b,0xf7,0xf7,0x7a,0xfa,0x7e,0xaf,0xfb,0xfa,0xdd,0xe7,0x44,
    0xc9,0xd5,0xb1,0x73,0x09,0x57,0xe0,0xf2,0xdd,0x6f,0x2e,0xfb,0x29,0x75,0x49,0x8f,
    0x38,0x57,0xe8,0xf2,0xc2,0xf3,0xa9,0x8e,0x9d,0x1d,0xf5,0xbd,0x7d,0x5d,0xf5,0x8d,
    0x8f,0x66,0xc4,0x5e,0xec,0xa2,0xe0,0x27,0xb6,0x12,0x17,0xbb,0x94,0x7f,0xca,0x7a,
    0x79,0xef,0x81,0x83,0x82,0x17,0xf9,0xf5,0x8d,0x5f,0x4b,0xbd,0x9f,0xe0,0xb1,0xe4,
    0xf0,0xdf,0x8a,0x42,0x4e,0x89,0x71,0xee,0x69,0x97,0x76,0xe5,0xd4,0x5b,0xcd,0x53,
    0xb1,0x04,0x58,0xbe,0xc1,0x92,0x60,0x4b,0x0d,0x16,0x81,0x55,0x18,0x2c,0x05,0x76,
    0xaf,0xc1,0xd2,0x60,0xf7,0x1b,0x2c,0x0f,0xec,0x41,0x83,0xc5,0x60,0x35,0x06,0xcb,
    0x07,0x5b,0x63,0xb0,0x25,0x60,0xeb,0x0c,0x56,0x00,0x96,0x31,0x58,0x21,0x58,0xa3,
    0xc1,0xee,0x01,0x6b,0x32,0x58,0x11,0xd8,0x13,0x06,0x2b,0x06,0x7b,0x32,0xf4,0x2e,
    0xba,0xd3,0x03,0xe9,0xe3,0x0e,0xff,0x5c,0x45,0xcf,0x74,0xbf,0xd2,0xec,0xa5,0xf7,
    0x2b,0xd8,0x97,0xfb,0xa8,0x64,0xb0,0x47,0xa1,0x5f,0xf2,0x7d,0x99,0xf7,0xc9,0x43,
    0xbb,0xf4,0xba,0xca,0xef,0x63,0x7a,0x22,0xf6,0x4a,0xef,0x59,0x80,0x5d,0x6c,0x85,
    0xe8,0x4b,0x05,0x2c,0x15,0x34,0x24,0xd0,0xd7,0xc2,0xbe,0xc8,0xe4,0x2a,0xc6,0x5f,
    0x6b,0x95,0x91,0xcb,0x05,0x5e,0xa5,0x77,0x7a,0xad,0x35,0x75,0x95,0xdd,0x65,0xa9,
    0x8f,0x70,0xa8,0xe0,0x1c,0xca,0xe1,0x50,0x11,0x6a,0x65,0xb1,0x3a,0xf4,0x55,0xc2,
    0x49,0xfc,0xab,0xb0,0xc5,0xc6,0xbe,0x9c,0xd9,0x10,0xfb,0x0a,0xec,0x65,0x61,0x9e,
    0x92,0xa1,0x9f,0x75,0x70,0xd7,0x5e,0x6b,0x5c,0x1d,0x5c,0xd4,0xfe,0x30,0x75,0xd4,
    0xbe,0x9e,0xf3,0x93,0x5e,0xb4,0x92,0x33,0x15,0xe6,0x25,0x0e,0xfb,0x8d,0xe4,0xb4,
    0x4b,0x63,0xdb,0x72,0x6a,0xb5,0x9b,0xbe,0x6f,0x85,0xa3,0xe0,0xd5,0xfe,0x5b,0x27,
    0xb9,0x13,0xee,0xdf,0x4f,0xc2,0xec,0x25,0x66,0x3b,0xdf,0x3b,0xe9,0x93,0xec,0x77,
    0xe4,0xd4,0xd8,0x4f,0x5f,0x84,0xef,0xab,0xe4,0x8c,0x8c,0x7d,0x80,0xf7,0x40,0xf7,
    0xc7,0x73,0xfa,0x7c,0x92,0xf3,0xd6,0xfd,0x69,0xe6,0x41,0xf7,0xe7,0x98,0x05,0xe1,
    0x73,0x81,0xdc,0xad,0xf0,0xb9,0xc0,0x5d,0x11,0x85,0xbe,0xa5,0x83,0x5f,0x0a,0x7e,
    0x82,0xfd,0xe1,0x11,0x39,0xa3,0x0d,0xcc,0x61,0x09,0xb9,0x3b,0x3d,0xe3,0x62,0xee,
    0x83,0x12,0x96,0xea,0x3f,0xc8,0x3c,0x97,0x62,0xdf,0xe8,0x33,0x54,0x71,0x27,0x2c,
    0x63,0x2e,0x36,0xe0,0x53,0x0d,0x3e,0xe2,0x7d,0x64,0x7f,0x1f,0x71,0xd5,0xc4,0xc9,
    0x5c,0x3c,0x40,0xdc,0x72,0xe2,0x74,0x9e,0x05,0x3f,0xe3,0x7d,0x56,0x9a,0xbb,0x44,
    0xce,0xf2,0x77,0xcf,0xbc,0x16,0x3e,0x7f,0x79,0x7f,0xbd,0x53,0x6a,0xd1,0x53,0x13,
    0xce,0x20,0x1d,0x7a,0xb3,0x86,0x9a,0xf2,0x79,0x8b,0x7e,0xad,0x05,0x7f,0xd6,0xef,
    0x84,0xd3,0xb7,0x60,0xea,0xf7,0xa7,0xcf,0xa1,0xb9,0xe4,0x79,0xcb,0x7b,0x89,0xdf,
    0x25,0x7c,0xd2,0xc4,0xd4,0x18,0x0d,0xeb,0xd0,0x50,0x67,0x34,0x3c,0x04,0xae,0x1a,
    0xea,0xc1,0x54,0x43,0xc6,0x68,0x10,0x5b,0x03,0xf7,0x9b,0xd4,0x6d,0x30,0x1a,0x1e,
    0xa1,0x76,0xc2,0x68,0x68,0x04,0x57,0x0d,0xdf,0x83,0xa9,0x9f,0x68,0xd0,0x5c,0x19,
    0xa3,0xe1,0x32,0x3e,0xb5,0xc4,0x34,0x18,0x0d,0x8f,0xa1,0x61,0xbd,0xd1,0xd0,0x04,
    0xae,0x1a,0x1e,0x07,0x53,0x0d,0x2d,0x46,0x83,0xd8,0x9a,0xc3,0xdc,0x65,0xeb,0x36,
    0x33,0x47,0x71,0xc8,0x97,0xad,0x7d,0xd9,0xbc,0x3f,0xc2,0x51,0x7d,0x5b,0x0c,0xc7,
    0x9b,0xf8,0x65,0x88,0x6b,0xc6,0x77,0x13,0xbe,0x9b,0xf0,0x95,0x19,0xbf,0xca,0xfb,
    0x2e,0xf1,0xbb,0xfd,0xda,0x8c,0x4d,0x7a,0x74,0x85,0xf7,0x5d,0x6c,0x7b,0xb0,0x89,
    0x56,0x79,0xcf,0x3b,0xd0,0xda,0x8e,0x56,0xf1,0x7f,0x06,0x7c,0x1a,0xad,0xdb,0xc8,
    0x21,0xf8,0x6d,0xef,0xb3,0x85,0x1c,0xaa,0x77,0x1b,0xfb,0x2d,0xf0,0xda,0x4c,0xae,
    0xce,0x70,0x2e,0xd9,0x7b,0x40,0xdf,0x8d,0x9d,0xd4,0x6b,0x33,0xef,0xc6,0x73,0xe0,
    0xc3,0xbc,0x1b,0xbb,0xc0,0x6e,0x06,0xbe,0x59,0x7d,0xcf,0x93,0x6b,0x17,0xbf,0x55,
    0x57,0xf0,0x6f,0x45,0xef,0x55,0x7c,0x86,0x99,0x95,0x3d,0xf8,0x54,0xe6,0xf4,0x4c,
    0x38,0x0e,0x72,0xa6,0x2f,0xa0,0x69,0x3b,0x35,0xba,0xc0,0xec,0x3a,0x42,0x8d,0x7d,
    0xd4,0xe8,0x32,0x73,0xf2,0x22,0x5a,0xf6,0x9b,0x39,0x79,0x09,0x5c,0xe7,0xe4,0x00,
    0x98,0xce,0x49,0x8f,0xe9,0x9b,0xd8,0xba,0xfd,0xea,0x87,0x5b,0x37,0xb3,0x2e,0x79,
    0x5e,0xa1,0x66,0x14,0x66,0x27,0x3f,0xdc,0x97,0xaf,0x81,0xed,0x33,0x77,0x50,0x32,
    0xf0,0xcf,0x0b,0xf6,0x5e,0xe2,0x74,0xbd,0xe3,0x73,0x09,0xde,0x47,0x6c,0x6f,0xc8,
    0xb5,0x24,0xe8,0x79,0x9d,0x3c,0x7d,0xdc,0x83,0x69,0xee,0xfb,0x88,0x7e,0xf5,0xc0,
    0xa9,0xdf,0xe8,0x7d,0x03,0xbd,0x03,0x46,0xef,0x9b,0xe0,0xaa,0xf7,0x10,0x98,0xea,
    0x1d,0x32,0x7a,0x0f,0x85,0xde,0xbb,0x80,0x49,0xee,0x41,0xa3,0xf7,0x6d,0xa3,0xf7,
    0x2c,0xb9,0x86,0xc1,0x57,0xc1,0x49,0xe3,0x86,0x98,0x6d,0xf1,0x39,0x4c,0xcd,0x7e,
    0xfc,0x07,0xa9,0x3b,0x6a,0xea,0x1e,0x0e,0xf7,0xae,0x0b,0x98,0xc4,0x8f,0x98,0xba,
    0xef,0xfe,0x47,0x9f,0xdf,0xbb,0x4b,0x9f,0x8f,0x12,0xa7,0xeb,0x08,0x7d,0x3e,0x46,
    0xec,0x51,0xd3,0xe7,0xf7,0xc9,0x73,0xec,0x7f,0xfa,0xac,0x9c,0x46,0xcd,0xbb,0x7c,
    0x8d,0x98,0x21,0xe2,0x47,0x72,0xce,0xa4,0xc7,0xf8,0x2e,0x72,0x96,0xdd,0xc4,0x8d,
    0x9a,0xf3,0xfa,0x80,0xf3,0x3a,0x6e,0xce,0xeb,0x43,0x70,0x3d,0xaf,0x8f,0xc0,0xf4,
    0xbc,0xc6,0x4d,0xdf,0xc4,0x36,0xe6,0xd7,0x09,0xea,0x8e,0x19,0x5d,0x1f,0x53,0x7b,
    0x11,0x5d,0x31,0x3d,0x52,0x5d,0xe3,0xc4,0x9c,0x30,0x7c,0x3e,0x81,0xcf,0x49,0xc3,
    0xe7,0x53,0x70,0xe5,0xf3,0x19,0x98,0xf2,0x99,0x34,0x7c,0xc4,0x36,0xe1,0xd7,0x14,
    0xb9,0x27,0xcc,0x39,0x9e,0x82,0x4b,0xc4,0x6f,0x81,0x70,0xfc,0xc1,0xe0,0x7a,0xcf,
    0x4e,0x12,0x3b,0x65,0xee,0xc0,0x33,0xf0,0x3a,0x6d,0xee,0xc0,0xb3,0xe0,0xdf,0x71,
    0x9f,0x7c,0x0e,0x76,0xce,0x70,0x3d,0x0f,0xde,0x06,0xd7,0x19,0xc3,0xf5,0x7c,0xb8,
    0x3f,0x5d,0xc0,0xa4,0xde,0xb4,0xe1,0xf5,0x23,0xfa,0x16,0xcd,0x6f,0x94,0xfa,0xcd,
    0x98,0xb3,0xbd,0x8e,0xcf,0x14,0x31,0xd3,0x86,0xcf,0x17,0xf0,0x69,0x37,0x7c,0xbe,
    0x04,0x57,0x3e,0x73,0x86,0x8f,0xd8,0x66,0xfd,0x9a,0xa3,0xce,0xac,0xe1,0xf3,0x13,
    0x7c,0xae,0x73,0x86,0xc2,0x47,0xfd,0xe6,0x0c,0x9f,0x1b,0xf8,0xcc,0x10,0x33,0x6b,
    0xf8,0x7c,0x05,0x9f,0x01,0xc3,0xe7,0x6b,0x70,0xe5,0xb3,0x60,0xf8,0x88,0x6d,0xde,
    0xaf,0x05,0xea,0xcc,0x1b,0x3e,0x17,0xf9,0xaf,0x7b,0xc3,0xcc,0x93,0xfa,0x2d,0x18,
    0x3e,0xbf,0xe2,0x33,0x47,0xcc,0x7c,0xce,0x19,0x4f,0x1a,0xdf,0x5f,0x98,0x87,0x09,
    0xe2,0x16,0x72,0xe6,0x74,0xdc,0xf8,0xfe,0xcc,0x7c,0x8f,0x11,0x37,0x19,0xfe,0x47,
    0x46,0xe1,0xff,0xa3,0xd8,0xfe,0xf6,0xa7,0xd6,0xe4,0xd7,0x3f,0x8f,0x14,0x2e,0xf3,
    0xd4,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DMS src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = uvec4(0);
//     for(int i = 0;i < params . srcSampleCount;i ++)
//     {
//         srcValue += texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), i);
//     }
//     srcValue /= params . srcSampleCount;
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
