// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000012.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000012[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x97,0xfb,0x6f,0x54,0x55,
    0x10,0xc7,0xef,0xd9,0xdd,0x3e,0x68,0xa5,0x42,0x5a,0x41,0x6a,0x6b,0x5a,0x41,0x40,
    0x0a,0x05,0x79,0xc8,0xa3,0x5d,0xb0,0xa9,0xd0,0x22,0x15,0xa4,0x0d,0x09,0x22,0x3e,
    0xaa,0x28,0x54,0x1e,0x0a,0xea,0x2f,0xfc,0xa0,0x44,0xc4,0x36,0xc1,0x40,0x00,0x95,
    0x46,0x94,0xc6,0x08,0x91,0xd8,0x44,0x50,0x21,0x31,0x82,0x4a,0x13,0x83,0x68,0x94,
    0x26,0x68,0x9b,0x28,0x0d,0xfc,0x05,0x44,0x22,0x41,0x40,0x63,0xf0,0xcc,0x3d,0x9f,
    0x61,0xc7,0x55,0x62,0x93,0x93,0x7b,0xcf,0x77,0x5e,0xdf,0x99,0x33,0x73,0xf6,0x36,
    0x99,0x18,0x99,0x17,0x45,0x2e,0x2a,0x88,0xf2,0xa3,0x26,0x17,0xc5,0x7f,0x43,0xa3,
    0x44,0x24,0xaf,0x85,0x51,0x6e,0xfc,0x6c,0x68,0x6a,0x69,0xaa,0x7e,0xfe,0x85,0x15,
    0xd5,0x53,0xa7,0x4d,0x12,0x79,0x51,0x94,0x8c,0xf5,0x44,0x76,0x73,0x94,0x17,0xa5,
    0xfc,0x53,0xd6,0xda,0xd6,0xb6,0x75,0x82,0x8f,0xf6,0xeb,0x9c,0x5f,0x43,0xbc,0x9e,
    0xe0,0x79,0xe2,0xc3,0xbf,0x8d,0x8e,0x7d,0x8a,0x4d,0x14,0x35,0x46,0x39,0xd1,0xf8,
    0x10,0x2e,0x1a,0xc9,0x53,0x31,0x07,0x96,0x6f,0xb0,0x04,0xd8,0x10,0x83,0x25,0xc1,
    0x4a,0x0c,0x96,0x02,0xbb,0xd5,0x60,0x39,0x60,0x65,0x06,0xcb,0x05,0xab,0x30,0x58,
    0x1e,0xd8,0x28,0x83,0xe5,0x83,0x8d,0x35,0xd8,0x20,0xb0,0xf1,0x06,0x2b,0x00,0x9b,
    0x64,0xb0,0x42,0xb0,0xa9,0x06,0xbb,0x09,0x6c,0x86,0xc1,0x06,0x83,0xd5,0x1a,0xac,
    0x08,0xec,0xde,0xb8,0x76,0xc9,0xeb,0x35,0x90,0x3a,0x2e,0xf3,0xcf,0x3b,0xa8,0x99,
    0xee,0x2b,0xcd,0x5e,0x6a,0x7f,0x3b,0xfb,0x62,0x6f,0x95,0x88,0xe5,0xc9,0xb8,0x5e,
    0xf2,0x3e,0xcc,0xbf,0xe5,0x92,0x7b,0x95,0xd7,0xcf,0x85,0x43,0x59,0xf5,0x03,0x35,
    0x25,0x5e,0xa3,0xc8,0xe0,0xc5,0x7e,0x35,0x7f,0xb6,0xb0,0x4e,0xf7,0x52,0xd7,0x25,
    0x4b,0xfa,0x66,0xeb,0xbe,0xd4,0xaf,0x74,0x41,0xfb,0x1c,0xdd,0x4b,0x8d,0x3f,0x6a,
    0x68,0x4d,0xdf,0xe2,0xf7,0x15,0xc4,0x90,0xf3,0x1c,0xee,0xf7,0x95,0xec,0x13,0xec,
    0x47,0x71,0x0e,0xa9,0x18,0x4f,0x45,0x77,0xa2,0x2b,0x78,0x0d,0xfb,0xd1,0xc6,0x7e,
    0x0c,0xfa,0x62,0x2f,0xfe,0xab,0xf0,0x17,0xc5,0xf9,0x0e,0x8d,0x6b,0x54,0xc9,0xaa,
    0x30,0xab,0xea,0x7f,0x56,0xc5,0xf5,0x67,0x2a,0x9a,0xc0,0xf9,0x8e,0x87,0x83,0xec,
    0xab,0xc1,0xaa,0xc8,0x69,0x22,0x9c,0x44,0x7f,0x12,0xb2,0x4a,0x23,0xbf,0x87,0x9e,
    0x13,0xf9,0xf4,0xeb,0xb6,0x41,0x2e,0xcf,0x59,0x70,0x56,0xfd,0x7a,0xf2,0x52,0xf9,
    0x7c,0xfc,0xab,0x7c,0x21,0xfd,0x30,0xc2,0x7b,0x5a,0x8a,0x2e,0xa3,0xfa,0xaf,0xa7,
    0xc4,0x7c,0x88,0xf7,0xa5,0xe4,0x20,0xfb,0x65,0x59,0x31,0x97,0x67,0xed,0x5b,0x99,
    0x27,0xb1,0x7f,0x02,0xce,0x15,0xd4,0xfd,0x29,0xde,0x93,0x46,0xbf,0x8d,0x73,0xd0,
    0xfd,0x5a,0xfa,0x5d,0xf7,0x9b,0x99,0x27,0xb1,0x7f,0x1d,0xce,0xd6,0x7e,0x17,0xb3,
    0xa5,0x7d,0xb3,0xc7,0xf0,0x91,0xfd,0x81,0x78,0xf7,0x72,0xbd,0xd8,0x77,0x53,0xbf,
    0x94,0xb1,0x3f,0x94,0x75,0x26,0xc7,0x98,0x41,0xdd,0x9f,0xa4,0xa7,0x75,0x7f,0xda,
    0xf4,0xd9,0x59,0xb8,0x74,0x53,0x9f,0xb3,0xdc,0x57,0xc9,0xf8,0xec,0x72,0xe2,0xbc,
    0x52,0xf0,0x11,0xec,0x8a,0x47,0xe4,0x3c,0xd3,0xf4,0xec,0x58,0xfa,0x72,0x91,0xcf,
    0x50,0x7a,0xf2,0x2e,0xb0,0xb1,0xe6,0x2c,0xd6,0xd1,0xef,0xe3,0x90,0xd7,0x79,0x0f,
    0xd2,0x2b,0x77,0xd3,0x4f,0x13,0xf1,0x27,0x3a,0x93,0xc1,0x5f,0xf1,0x3a,0xb2,0x9f,
    0x82,0xdd,0x64,0xec,0xa6,0x73,0x5f,0x54,0xd3,0x5b,0x69,0xfa,0x64,0x26,0x78,0xb7,
    0xd7,0x29,0x8a,0x73,0x09,0x98,0xf4,0xd7,0x65,0xcf,0x3c,0x0d,0x9f,0x3f,0xbc,0x7e,
    0x0d,0xf7,0x4b,0x9a,0x7c,0xe4,0x7d,0xb1,0xb7,0xab,0xe0,0x8e,0x99,0x82,0xee,0x4b,
    0xd4,0xab,0x0e,0xbc,0xd9,0x9f,0x46,0x3c,0x53,0x2e,0x60,0xaa,0x77,0xd5,0xfb,0x50,
    0x5f,0xf2,0xbc,0xe4,0x6b,0x21,0x7a,0xb3,0x5c,0xd0,0xc9,0xc1,0xa6,0xd6,0xe4,0x70,
    0x1f,0x39,0xd4,0x9b,0x1c,0xe6,0x82,0x6b,0x0e,0xf3,0xc0,0x34,0x87,0x46,0x93,0xc3,
    0xbc,0xf8,0x7e,0x8b,0x62,0x4c,0xe2,0x36,0x98,0x1c,0x16,0x10,0xdb,0x99,0x1c,0x9a,
    0xc0,0x35,0x87,0x51,0x2e,0x60,0xaa,0x27,0x39,0xa8,0xaf,0x46,0x93,0x43,0x8d,0x0b,
    0x3a,0x69,0x6c,0x1a,0x4c,0x0e,0x8b,0xc8,0x61,0xa1,0xc9,0xe1,0x41,0x70,0xcd,0x61,
    0x31,0x98,0xe6,0xd0,0x62,0x72,0x58,0x1c,0xf3,0x89,0x62,0x4c,0xe2,0x36,0xd3,0x47,
    0x12,0x77,0x09,0xb1,0x6b,0x5c,0x66,0x9e,0x85,0xa3,0xea,0xb6,0x18,0x8e,0xb5,0xe8,
    0x35,0x62,0xd7,0x0c,0x1f,0x99,0xf9,0x87,0x99,0x77,0xed,0xb9,0x47,0xe0,0xbc,0xdc,
    0xf4,0xdc,0xa3,0xe0,0x9b,0xe8,0xb9,0xc7,0xc1,0x6a,0x5d,0xb0,0x93,0x3b,0xe0,0x49,
    0xec,0x5a,0xb1,0x93,0x9a,0xae,0x00,0xd7,0xba,0x3f,0x8d,0x6d,0x64,0xb0,0x95,0x60,
    0x2e,0xae,0x43,0x6e,0x7c,0x7f,0xac,0x42,0x77,0x25,0x3e,0x34,0xc6,0x33,0xc4,0x68,
    0x33,0x31,0x56,0x83,0x3f,0xe6,0x73,0x95,0x79,0x5b,0x43,0x4e,0xab,0xb8,0x73,0x56,
    0x9b,0xf3,0x58,0x87,0xfd,0x5a,0x73,0x1e,0xcf,0x82,0xeb,0x79,0x3c,0x07,0xa6,0xe7,
    0xb1,0xc1,0x9c,0x87,0xc8,0xd6,0xfb,0xb5,0x81,0x1a,0xaf,0x27,0x0f,0xb9,0x83,0x5e,
    0x24,0x76,0x84,0xdd,0x55,0xde,0xff,0xf4,0xef,0xe2,0xeb,0x3c,0x36,0xe7,0xe3,0xfb,
    0x27,0xc4,0xfa,0x15,0xbb,0xc1,0xd8,0x5c,0x31,0xb1,0x44,0x76,0xc1,0xaf,0x8b,0xd8,
    0x5d,0x8c,0xbf,0x07,0xf2,0xe2,0x58,0x97,0xa8,0x57,0x29,0xf6,0xf2,0x3b,0xbb,0x05,
    0x1e,0xbf,0x23,0x2f,0x8d,0xef,0xd5,0x80,0x5d,0x06,0x2f,0xa3,0x47,0xae,0xe2,0xf3,
    0x82,0xb1,0xfb,0x0d,0x5f,0xc5,0x59,0x3a,0xc2,0xe9,0x9a,0x8f,0x76,0x05,0xec,0x12,
    0x1c,0xd2,0x2e,0xf8,0xbd,0x88,0xed,0x05,0x66,0x47,0xce,0x60,0x8c,0x0b,0xf2,0x35,
    0xe6,0xac,0xc5,0x66,0x23,0x35,0x72,0xe4,0x5b,0xe8,0xfe,0x59,0xa3,0x6b,0xc4,0xbc,
    0x66,0x6a,0xe4,0x5c,0xb0,0xd3,0x1a,0x15,0xb8,0x4c,0x8d,0x44,0x96,0xf0,0x2b,0xc7,
    0x71,0xef,0xba,0x4c,0x8d,0xf2,0x5c,0xa6,0x46,0x1b,0xb3,0x6a,0x94,0xef,0x82,0xdc,
    0xd6,0x68,0x90,0x0b,0xb8,0xd6,0xa8,0x10,0x9f,0xe2,0x5f,0xed,0x52,0x70,0x29,0xce,
    0xd2,0x11,0x4e,0x5a,0x23,0xc1,0xb4,0x46,0x73,0x5c,0xf0,0x2b,0xbc,0x52,0x70,0xd5,
    0x1a,0x8d,0x73,0x41,0x3e,0x06,0x9e,0x5a,0xa3,0x4d,0xd4,0x28,0x41,0xbe,0xe5,0x59,
    0x35,0x1a,0x4a,0x4c,0x79,0x6a,0x8d,0x8a,0x5d,0xb0,0xd3,0x1a,0x95,0x99,0x1a,0x89,
    0xac,0xc4,0xaf,0xe1,0xd8,0x0d,0x37,0x35,0x1a,0x61,0x6a,0xb4,0x29,0xab,0x46,0xa5,
    0x2e,0xc8,0x6d,0x8d,0x6e,0x73,0x01,0xd7,0x1a,0x95,0xe3,0xb3,0xc4,0xd4,0x68,0x18,
    0x5c,0x8a,0xb3,0x74,0xca,0x4c,0x8d,0xca,0x4d,0x8d,0xea,0x5c,0xf0,0x2b,0xbc,0x86,
    0xc1,0x55,0x6b,0x34,0xc1,0x05,0xb9,0xd4,0x2a,0x81,0x3f,0x9d,0xbd,0x0d,0xf4,0xa2,
    0xe8,0xd5,0xd3,0x6b,0x2d,0xd8,0x94,0xbb,0xcc,0xcc,0xbf,0xca,0xcc,0x6f,0x36,0x33,
    0xbf,0x05,0x5c,0x67,0xfe,0x35,0x30,0x9d,0xf9,0x0e,0x33,0x87,0x22,0x6b,0xf7,0x6b,
    0x27,0x71,0x77,0x9a,0xfb,0xe4,0x0d,0x7c,0xef,0x32,0xbe,0xdf,0x04,0x57,0xdf,0x6f,
    0x81,0xa9,0xef,0x4e,0xe3,0x5b,0x64,0xbb,0xfd,0xea,0xc4,0xf7,0x6e,0xd3,0x07,0x6f,
    0x93,0x97,0x7c,0x53,0x7c,0x8e,0xaf,0x77,0xc0,0xf7,0x50,0x0b,0xb5,0xeb,0xa4,0x16,
    0xa2,0xf3,0x2e,0x31,0x77,0xa2,0xbf,0x9b,0xb8,0x5d,0x26,0xae,0xe8,0xec,0xf5,0xab,
    0x0b,0xfb,0xbd,0x26,0xee,0x7b,0x26,0xee,0x22,0xff,0xd5,0x25,0xdf,0x63,0xef,0x83,
    0xd5,0xbb,0xcc,0x37,0x4b,0x82,0xfb,0x5a,0xe4,0xfb,0xb0,0xd3,0xd5,0xe1,0x7d,0x09,
    0xbe,0x1f,0xdb,0x7d,0xb1,0xaf,0x41,0xf1,0x59,0x7d,0x80,0xaf,0xfd,0x7c,0x37,0xe5,
    0x98,0xef,0x3d,0xc9,0x49,0x39,0x75,0x99,0xf3,0x9d,0x47,0xec,0x4e,0xec,0xf7,0xa2,
    0xdb,0x81,0x6e,0xbb,0xe1,0xbf,0xf5,0x3f,0xf8,0x6f,0xbb,0x01,0xff,0x6d,0xf0,0xdc,
    0x8e,0xce,0x56,0xc3,0x73,0x07,0x36,0xdb,0x6f,0xc0,0x53,0x63,0x77,0x18,0x9e,0x73,
    0x5d,0xe0,0xda,0x85,0x7d,0x3b,0x31,0x44,0xf6,0x21,0xf2,0x03,0xf1,0xef,0x4f,0xf8,
    0x4e,0x3d,0x08,0xae,0xfd,0xf4,0x31,0xfd,0x74,0xc8,0xf4,0xd3,0x27,0xe0,0xda,0x4f,
    0x9f,0x82,0x69,0x3f,0x1d,0x31,0xe7,0x2a,0xb2,0xc3,0x7e,0x1d,0x85,0xdb,0x51,0xe3,
    0xfb,0x0b,0x7c,0x1f,0x33,0xbe,0xbf,0x04,0x57,0xdf,0x5f,0x81,0xa9,0xef,0x1e,0xe3,
    0x5b,0x64,0xc7,0xfd,0x3a,0x81,0xef,0x13,0xe6,0x77,0xf9,0x5b,0x7c,0x9f,0x34,0xbf,
    0xcb,0xdf,0x81,0x7f,0xc3,0xef,0xfc,0xf7,0x60,0x6d,0x26,0xde,0x0f,0xe0,0xcb,0x89,
    0xd7,0x6b,0xe2,0x89,0xec,0x94,0x5f,0xbd,0xc4,0x3b,0xc5,0xef,0x8b,0xd4,0x6d,0x9a,
    0x0b,0x1c,0x0f,0x46,0x99,0x6f,0x33,0xd5,0xeb,0xe5,0x3c,0x44,0xaf,0xc1,0x05,0x9d,
    0x13,0xd8,0x9c,0x32,0x7c,0x7e,0x84,0xcf,0x69,0xc3,0xe7,0x27,0x70,0xe5,0xd3,0x6f,
    0xf8,0x88,0xac,0xcf,0xaf,0x7e,0xe2,0xf4,0x19,0x3e,0xd3,0xe1,0xd3,0x60,0xee,0x29,
    0xd5,0xeb,0x37,0x7c,0x1a,0x5d,0xd0,0xe9,0xc5,0xa6,0xcf,0xf0,0xf9,0x19,0x3e,0xbb,
    0x0c,0x9f,0x5f,0xc0,0x95,0xcf,0x80,0xe1,0x23,0xb2,0x33,0x7e,0x0d,0x10,0xe7,0x8c,
    0xe1,0x33,0xd3,0x85,0xff,0x0b,0x1b,0x5d,0xa6,0x5f,0x55,0x6f,0xc0,0xf0,0x59,0xe0,
    0x82,0x4e,0x3f,0x36,0x67,0xd0,0xed,0x41,0xf7,0x38,0x73,0x25,0xbd,0xf2,0x35,0xf5,
    0x4e,0x9a,0x38,0x53,0x5c,0x06,0x8f,0xb2,0x6c,0x7b,0x4c,0x9c,0xfb,0x5d,0x88,0x35,
    0x80,0xcd,0x71,0x74,0x8f,0xa0,0x7b,0x98,0xb9,0xeb,0x8e,0xef,0xba,0xe0,0xef,0x20,
    0x73,0x97,0xc7,0xac,0x26,0xb3,0x6c,0x8e,0x18,0xff,0xf3,0x5d,0x88,0xd1,0x83,0xbd,
    0xf8,0x9b,0xed,0x2d,0xce,0x21,0xfb,0xcb,0x77,0xc9,0x0c,0xbf,0xfe,0x06,0x58,0xd2,
    0x84,0x0b,0xc0,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
