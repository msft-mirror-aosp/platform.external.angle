// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000004.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000004[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xd9,0x6f,0x55,0x55,
    0x14,0xc6,0xf7,0xbe,0xb7,0x03,0x63,0x2d,0xa1,0x50,0x50,0x42,0x5a,0x29,0x05,0x69,
    0x29,0x73,0x19,0xca,0x65,0x08,0xd2,0x56,0x69,0x40,0x20,0x9a,0x20,0x56,0x52,0x64,
    0x10,0xa9,0x60,0x80,0x08,0x2a,0xd5,0x42,0x25,0x40,0x7c,0x30,0x46,0x54,0x6a,0x8c,
    0x89,0x4f,0x24,0x20,0xe5,0x41,0x50,0x69,0x08,0x41,0xa3,0xd4,0x04,0xa5,0x89,0x52,
    0x03,0xff,0x80,0x46,0x22,0x71,0x20,0x44,0x10,0x14,0xf7,0x3a,0xfb,0xb7,0xb8,0xcb,
    0x46,0x43,0x93,0x9d,0x73,0xf6,0xb7,0xd6,0xb7,0x86,0xef,0xac,0xb3,0x4f,0xdb,0x74,
    0x6a,0x54,0xbe,0x73,0xde,0xf5,0x73,0x7d,0xdc,0x22,0xef,0x92,0x9f,0x41,0x2e,0xe5,
    0xe4,0xb6,0xbf,0xcb,0x4b,0xae,0x75,0x0d,0xcb,0x1b,0xaa,0xb6,0x6e,0x5b,0x53,0x35,
    0x75,0xda,0x44,0xb1,0x17,0xb8,0x74,0xe2,0x27,0xb6,0x7b,0x5c,0xbe,0xcb,0x09,0x57,
    0x59,0xcf,0x36,0x6d,0xd8,0x24,0x78,0x79,0x58,0x97,0xc2,0x2a,0x0c,0x7e,0x82,0xe7,
    0x4b,0x8c,0x70,0x57,0x9e,0xc4,0x14,0x8e,0x73,0xf5,0x2e,0xd7,0x55,0xc6,0x74,0x6e,
    0x14,0x57,0xc5,0x3c,0x58,0x1f,0x83,0xa5,0xc0,0x0a,0x0d,0x96,0x06,0x2b,0x32,0x58,
    0x0e,0xd8,0x30,0x83,0xe5,0x82,0x8d,0x30,0x58,0x1e,0x58,0x89,0xc1,0xf2,0xc1,0xca,
    0x0c,0xd6,0x07,0x6c,0xac,0xc1,0xfa,0x82,0x55,0x1a,0xac,0x1f,0xd8,0x44,0x83,0xf5,
    0x07,0x9b,0x6a,0xb0,0x01,0x60,0x33,0x0c,0x36,0x10,0x6c,0xb6,0xc1,0x0a,0xc0,0xe6,
    0x25,0xda,0xa5,0xef,0x68,0x20,0x3a,0xae,0x0c,0xd7,0xfb,0xd1,0x4c,0xf7,0xa5,0x66,
    0x2f,0xda,0x8f,0x64,0x3f,0x38,0xb0,0x52,0x89,0x3d,0x9d,0xe8,0x25,0xf7,0x43,0xc3,
    0x5d,0x1e,0xbd,0x57,0x04,0xff,0x3c,0x6a,0xf8,0xa1,0x63,0x74,0xa6,0x28,0x78,0x14,
    0x18,0x5c,0x74,0xec,0xa8,0x6b,0xca,0xe8,0x5e,0x34,0x7c,0xb7,0x7d,0xf8,0xbc,0x21,
    0x61,0x5f,0x42,0x0c,0x79,0x5e,0xc5,0x61,0x5f,0xca,0x3e,0xc5,0xbe,0x0c,0x9d,0x73,
    0x12,0x3c,0xc7,0x8d,0xc6,0x57,0xf0,0x1a,0xf6,0xe5,0x86,0x3f,0x06,0x7f,0xe1,0x4b,
    0xfc,0x0a,0xe2,0xb9,0xa4,0x9f,0x41,0x89,0x06,0xa5,0xac,0x12,0xb3,0x2a,0xee,0xb2,
    0x4a,0xee,0x5c,0x73,0xdc,0x78,0x9e,0x5f,0x25,0x35,0xc8,0xbe,0x0a,0xac,0x82,0x9e,
    0x26,0x50,0x93,0xf8,0x4f,0xc4,0x56,0x6a,0xec,0xd5,0xcc,0x94,0xd8,0xa7,0xdf,0xe1,
    0x46,0xbb,0x5c,0x67,0x51,0xb3,0xfa,0x2f,0xa0,0x2f,0xdd,0x2f,0xe6,0xf9,0x4a,0xcf,
    0x8f,0x51,0x9f,0x68,0x34,0x3c,0x44,0x5a,0x61,0x34,0xb5,0x3f,0xba,0x97,0x9c,0x8f,
    0x73,0xbf,0x82,0x1e,0x64,0xbf,0xb2,0x57,0xce,0xc6,0x5e,0xfb,0xd5,0xe8,0x2a,0xfc,
    0xa7,0xa8,0xb9,0xc4,0xd8,0xd7,0x33,0xff,0x52,0xd3,0x73,0xd8,0xd2,0xc6,0xbe,0x83,
    0x77,0x41,0xf7,0x07,0x98,0x65,0xdd,0x1f,0xee,0xa5,0xe1,0x09,0xde,0x09,0xdd,0x9f,
    0x61,0xc6,0x74,0x8e,0xbe,0xea,0x55,0xdf,0x39,0x34,0x50,0xfb,0xf7,0x89,0xb5,0x75,
    0xae,0xd4,0x7b,0x91,0x5a,0x74,0x6e,0x2e,0x72,0xbe,0xa4,0x8d,0xff,0xb4,0x20,0xd0,
    0xae,0xd6,0xd6,0x9a,0xca,0xd0,0x85,0xf8,0x55,0xfb,0x88,0xd9,0xa5,0xbe,0xd3,0xc3,
    0xfd,0xe6,0x43,0x5b,0xe6,0xea,0x7e,0x46,0xd8,0xbf,0xd1,0xf6,0x7e,0xa6,0x3a,0x3c,
    0xd5,0x14,0x75,0x38,0xe2,0x5f,0x0f,0x88,0x3c,0xeb,0x0c,0xf3,0x3c,0x96,0x99,0x5d,
    0x12,0xf2,0xc8,0xbc,0x3e,0x00,0x36,0xd6,0x3c,0xa7,0x4d,0xbc,0x0b,0xe3,0xb0,0xcf,
    0x0f,0x11,0x64,0x8e,0x26,0x31,0x6b,0x13,0x88,0x27,0x3e,0x93,0xc1,0x77,0x07,0x1f,
    0xd9,0x4f,0x81,0x37,0x19,0xde,0x74,0xce,0x8a,0x2a,0xe6,0x2e,0xc3,0x8c,0xcd,0x04,
    0x3f,0x12,0x7c,0x0a,0x12,0x5d,0x22,0x26,0xb3,0xf7,0x47,0xa8,0x3c,0x43,0x3d,0x7f,
    0x06,0xff,0x1a,0xce,0x96,0x0c,0xfd,0xc8,0xfd,0xd2,0xc0,0x2b,0xe1,0x7c,0x99,0x82,
    0xef,0xcb,0x3c,0x8b,0xf9,0xe0,0xcb,0x82,0x3a,0x52,0xd3,0x7d,0x3e,0x62,0xea,0x77,
    0x23,0xc4,0xd0,0x58,0x72,0xbd,0x16,0xb4,0x10,0xbf,0x99,0x3e,0xfa,0xe4,0xc2,0x99,
    0x6d,0x7a,0x78,0x90,0x1e,0x16,0x98,0x1e,0x16,0x82,0x6b,0x0f,0xb5,0x60,0xda,0x43,
    0xbd,0xe9,0xa1,0x36,0x39,0xdb,0x5c,0x82,0x49,0xde,0x3a,0xd3,0xc3,0x22,0x72,0x7b,
    0xd3,0x43,0x03,0xb8,0xf6,0x30,0xd2,0x47,0x4c,0xfd,0xa4,0x07,0x8d,0x55,0x6f,0x7a,
    0x98,0xe5,0xa3,0x4f,0x06,0x4e,0x9d,0xe9,0x61,0x09,0x3d,0x2c,0x36,0x3d,0x3c,0x02,
    0xae,0x3d,0x2c,0x05,0xd3,0x1e,0x96,0x9b,0x1e,0x96,0x26,0xf5,0xb8,0x04,0x93,0xbc,
    0xcb,0x98,0x23,0xc9,0xfb,0x28,0xb9,0x67,0xf9,0xec,0xbb,0x2e,0x35,0xaa,0xef,0x72,
    0x53,0x63,0x0d,0x7e,0xf5,0xf0,0x96,0x51,0x8f,0x9c,0x07,0x4f,0x70,0x16,0xe8,0xcc,
    0x3d,0x49,0xcd,0x8d,0x66,0xe6,0x56,0x81,0xb7,0x32,0x73,0x4d,0x60,0x35,0x3e,0xf2,
    0xe4,0x7c,0x58,0x03,0x6f,0x35,0x3c,0xd1,0x74,0x2d,0xf8,0xaa,0x50,0x87,0x9c,0x5b,
    0xeb,0xc8,0xd7,0xc4,0xd9,0xb2,0xd6,0x68,0xf5,0x34,0xfc,0xf5,0x46,0xab,0x0d,0xe0,
    0xaa,0xd5,0x33,0x60,0xaa,0x55,0xb3,0xd1,0x4a,0x6c,0x1b,0xc3,0xda,0x4e,0xff,0xdb,
    0x4d,0xec,0x17,0x88,0xbd,0xc3,0xc4,0x7e,0x11,0x5c,0x63,0xbf,0x04,0xa6,0xb1,0x5b,
    0x4c,0x6c,0xb1,0xed,0x0c,0xab,0x85,0xd8,0x3b,0xcd,0x2c,0xbd,0x42,0x5f,0xf2,0xee,
    0x1f,0x25,0x56,0x2b,0x78,0x23,0xcf,0x44,0x79,0x2d,0x3c,0x13,0xf1,0xd9,0x45,0xce,
    0xed,0xf8,0xef,0x24,0x6f,0x9b,0xc9,0xbb,0x2b,0x79,0xcf,0x5d,0x82,0x09,0x7f,0xb7,
    0xc9,0xbb,0xc7,0xe4,0x5d,0x12,0x4e,0x5a,0x39,0x83,0xf7,0x82,0xad,0x33,0x67,0x4b,
    0x2a,0x99,0xaf,0xbc,0xc4,0xbe,0x0f,0x9e,0xae,0xbd,0x21,0x96,0xe0,0xfb,0xe1,0xee,
    0x4b,0x62,0xf5,0x4d,0x9e,0xd5,0x6b,0xc4,0xd9,0xcf,0xf9,0x96,0xcb,0x37,0x29,0x4d,
    0x4f,0x5a,0x53,0x1b,0x3d,0x09,0x67,0x8e,0x8f,0x9c,0x16,0xf8,0xbb,0xf1,0x6d,0xc6,
    0x77,0xa3,0xa9,0x7f,0xf3,0x7f,0xd4,0xbf,0xe5,0x2e,0xf5,0x6f,0x85,0xa7,0xeb,0x55,
    0xea,0xdf,0x06,0x77,0xab,0xa9,0xff,0x79,0xe2,0x6c,0xfb,0x9f,0xfa,0xb5,0xa6,0x66,
    0x53,0x7f,0xc6,0xc7,0x1e,0xda,0xe0,0x6f,0x4c,0xf2,0xc4,0x73,0xfc,0x75,0xec,0x7b,
    0x42,0x24,0xd9,0xbf,0x09,0x56,0xed,0xb3,0x73,0xf6,0x16,0x73,0x76,0xc0,0xcc,0xd9,
    0xdb,0xe0,0x3a,0x67,0xef,0x80,0xe9,0x9c,0xb5,0x9b,0xe7,0x2d,0xb6,0x83,0x61,0xb5,
    0x53,0xdb,0x41,0xf4,0x92,0xba,0xdf,0x23,0xa7,0x83,0x77,0x95,0xfb,0x9b,0xe1,0x5e,
    0x62,0xfd,0x08,0x47,0xae,0xa7,0xc8,0xf5,0x13,0xbc,0x81,0x70,0x7e,0x37,0xb9,0xc4,
    0x76,0x39,0xac,0x2b,0xf0,0xae,0x24,0x33,0x19,0x73,0xfd,0x02,0x6f,0x98,0x8b,0xfd,
    0x0a,0xf6,0x2b,0xb8,0x7c,0x0b,0x07,0x04,0xbd,0x04,0xfb,0x8d,0x67,0x74,0x2f,0xf6,
    0x11,0x68,0x7b,0x95,0x98,0x97,0x0d,0xff,0x67,0x62,0xca,0xb7,0xd3,0xfa,0x48,0x4d,
    0xb7,0x43,0x94,0xeb,0x60,0xd7,0x88,0x3d,0xd7,0xc7,0xf8,0x57,0xe0,0x5e,0xe6,0x6c,
    0x16,0xed,0xcb,0x7c,0xb4,0xab,0x1e,0xaa,0xd1,0x07,0x68,0xe4,0xe9,0x37,0xd7,0xff,
    0x5b,0xa3,0x1b,0xe4,0xbc,0x61,0x34,0xba,0x09,0x4f,0x35,0xca,0xf1,0x59,0x8d,0xc4,
    0x76,0x2b,0xa9,0x2f,0xf2,0x6e,0x1b,0x8d,0xbc,0x8f,0x3c,0xab,0x51,0xca,0x47,0xdc,
    0x6a,0x94,0xf6,0x59,0x8d,0xc4,0xae,0x1a,0x49,0x6d,0x12,0xf3,0x96,0xe1,0xff,0x4d,
    0x2d,0xaa,0x91,0xfa,0x48,0x4d,0xaa,0x91,0x60,0xaa,0xd1,0x7c,0x1f,0xe3,0xdf,0x86,
    0x7b,0xcb,0x68,0x34,0xc6,0x47,0x7b,0x19,0xf9,0x55,0xa3,0x43,0x68,0x94,0xa2,0xdf,
    0xe2,0x5e,0x1a,0xf5,0x27,0xa7,0x5c,0x55,0xa3,0x81,0x3e,0xf2,0x54,0xa3,0xa1,0x46,
    0x23,0xb1,0x15,0x84,0x35,0x08,0x9e,0x5c,0x55,0xa3,0xc1,0xf0,0xac,0x46,0x45,0x3e,
    0xe2,0x56,0xa3,0x21,0x46,0xa3,0x22,0xa3,0x51,0x31,0x31,0x0b,0x7c,0x96,0x5f,0x48,
    0x4c,0xd5,0x48,0x7d,0x86,0x1a,0x8d,0x8a,0x8d,0x46,0x0b,0x7c,0x8c,0x2f,0x75,0x15,
    0x52,0xab,0x6a,0x34,0xce,0x47,0xbb,0x68,0x95,0x22,0xa7,0xbe,0x7b,0xed,0xcc,0xa2,
    0xf8,0x2d,0x64,0xd6,0x9a,0xe1,0x14,0x9b,0x77,0xfe,0x08,0xef,0xfc,0x61,0xf3,0xce,
    0x7f,0x08,0xae,0xef,0xfc,0x51,0x30,0x7d,0xe7,0x8f,0x99,0xf7,0x50,0x6c,0x1d,0x61,
    0x1d,0x27,0xef,0x71,0xf3,0xdd,0xfa,0x98,0xd8,0x27,0x4c,0xec,0x4f,0xc0,0x35,0xf6,
    0xa7,0x60,0x1a,0xbb,0xd3,0xc4,0x16,0xdb,0xc9,0xb0,0x4e,0x13,0xfb,0xb4,0xcb,0x7e,
    0xaf,0x3f,0x23,0xf6,0x19,0xf3,0xbd,0xfe,0x1c,0xbc,0x8b,0x33,0xfa,0x0b,0xb0,0xd5,
    0x26,0xdf,0x97,0xe0,0x8d,0xe4,0xeb,0x32,0xf9,0xc4,0x76,0x36,0xe1,0xc7,0x7c,0x67,
    0xcd,0x3c,0x4e,0xf0,0xf1,0x77,0xf8,0x85,0xe6,0xf7,0x29,0xf5,0xeb,0x32,0x5a,0xd7,
    0xfa,0xe8,0x73,0x1a,0xce,0x59,0x53,0xcf,0xd7,0xd4,0x73,0xce,0xd4,0xf3,0x0d,0xb8,
    0xd6,0xd3,0x6d,0xea,0x11,0xdb,0xf9,0xb0,0xba,0xc9,0x73,0xde,0xd4,0x33,0x89,0x7a,
    0x6a,0xcd,0xb3,0x57,0xbf,0x6e,0x53,0x4f,0x9d,0x8f,0x3e,0x5d,0x70,0xce,0x9b,0x7a,
    0xbe,0xa5,0x9e,0x1d,0xa6,0x9e,0xef,0xc0,0xb5,0x9e,0x1e,0x53,0x8f,0xd8,0x2e,0x84,
    0xd5,0x43,0x9e,0x0b,0xa6,0x9e,0x29,0x3e,0xfe,0x0d,0x23,0xf9,0xf4,0x1b,0xa5,0x7e,
    0x3d,0xa6,0x9e,0x87,0x7d,0xf4,0xe9,0x86,0x73,0x01,0xdf,0x4e,0x7c,0x4f,0x9a,0x77,
    0xfd,0x14,0x7a,0xa7,0x4d,0x9e,0xf1,0x3e,0x8b,0xbb,0x5e,0xdc,0x4e,0x93,0xe7,0x21,
    0x1f,0x73,0xf5,0xc0,0x39,0x89,0xef,0x31,0x7c,0x3b,0xf8,0xd6,0x8a,0xef,0x47,0xc4,
    0x93,0xa5,0xff,0xbf,0x49,0x99,0x6f,0xad,0x72,0x8e,0x99,0xf8,0xf5,0x3e,0xe6,0xe8,
    0x84,0x2f,0xf1,0xe6,0x04,0xc6,0x25,0x6c,0x7f,0x85,0x29,0x99,0x11,0xd6,0x3f,0x53,
    0x26,0x38,0x91,0x70,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
