// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000018.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000018[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x6b,0x68,0x96,0x65,
    0x18,0xc7,0x9f,0xfb,0x7d,0xdf,0xbd,0xf3,0xb4,0xa5,0x78,0x68,0xab,0xe5,0xb6,0xd4,
    0x65,0x6d,0x4d,0xf3,0xac,0xf3,0xf5,0xb4,0x74,0x0b,0x75,0x73,0x1b,0x05,0x66,0x26,
    0x9a,0x95,0x9a,0xce,0xda,0x82,0x22,0x45,0x5f,0x75,0xeb,0xe0,0x88,0x94,0x3e,0x44,
    0x69,0xa6,0x10,0x44,0x14,0x06,0x56,0xfa,0x21,0xad,0x1c,0x61,0x16,0xe5,0x02,0xcb,
    0x41,0xb9,0xd0,0x2f,0x7d,0x8d,0xa4,0xa1,0x29,0x51,0xf7,0xf5,0xdc,0xbf,0xcb,0x5d,
    0xad,0xc2,0xc1,0xcd,0xf3,0xdc,0xff,0xeb,0xfa,0x5f,0x87,0xff,0x7d,0x78,0xb6,0x25,
    0x13,0x63,0x72,0xa3,0xc8,0x45,0x83,0xa2,0x01,0x51,0x93,0x8b,0xe2,0x9f,0x61,0x51,
    0x22,0x92,0xd7,0xc1,0x51,0x3a,0x7e,0xd6,0x2c,0x69,0x5a,0x52,0xd9,0xfa,0xf4,0xda,
    0xca,0x29,0x53,0x27,0x8a,0x3d,0x3f,0x4a,0xc6,0x7e,0x62,0xbb,0x29,0xca,0x8d,0x52,
    0xfe,0x29,0x63,0xd3,0xea,0xf5,0xcd,0x82,0x97,0xf9,0x71,0xd1,0x8f,0xa1,0xde,0x4f,
    0xf0,0x5c,0x89,0xe1,0xdf,0xca,0xe2,0x98,0xc2,0x89,0xa2,0xda,0x28,0x27,0xaa,0x08,
    0xe9,0xa2,0x31,0x3c,0x15,0x73,0x60,0x03,0x0c,0x96,0x00,0x1b,0x6a,0xb0,0x24,0xd8,
    0x08,0x83,0xa5,0xc0,0x0a,0x0c,0x96,0x03,0x56,0x64,0xb0,0x34,0x58,0x89,0xc1,0x72,
    0xc1,0xc6,0x1a,0x6c,0x00,0xd8,0x78,0x83,0x0d,0x04,0xab,0x30,0xd8,0x20,0xb0,0x89,
    0x06,0x1b,0x0c,0x36,0xc5,0x60,0x43,0xc0,0x66,0x18,0x2c,0x0f,0x6c,0xb6,0xc1,0xf2,
    0xc1,0xe6,0xc5,0xda,0x25,0xaf,0x6b,0x20,0x3a,0xae,0xf0,0xcf,0xdb,0xd1,0x4c,0xe7,
    0xa5,0x66,0x2e,0xda,0x8f,0x66,0x3e,0xdc,0xb3,0x12,0xb1,0x3d,0x19,0xeb,0x25,0xef,
    0xa3,0xfc,0x5b,0x9a,0xde,0xcb,0xbd,0x7f,0x9a,0x1a,0x7e,0x39,0x3c,0x2e,0x33,0xc2,
    0x7b,0xe4,0x1b,0x5c,0x74,0x3c,0x5c,0xb3,0x3a,0xa3,0x73,0xd1,0xf0,0x8d,0xd7,0x0b,
    0xe7,0x8d,0xf4,0xf3,0x12,0x62,0xc8,0x7a,0xdd,0xec,0xe7,0xa5,0xcc,0x13,0xcc,0xc7,
    0xa2,0x73,0x2a,0xc6,0x53,0xd1,0x38,0x7c,0x05,0xaf,0x62,0x5e,0x66,0xf8,0x77,0xe0,
    0x2f,0x7c,0x89,0x5f,0x4e,0xbc,0x28,0xee,0x67,0x58,0xac,0x41,0x29,0xa3,0xc4,0x8c,
    0xf2,0x1b,0x8c,0x92,0xeb,0xcf,0x54,0x74,0x37,0xeb,0x57,0x41,0x0d,0x32,0xaf,0x04,
    0x2b,0xa7,0xa7,0x09,0xd4,0x24,0xfe,0x13,0xb1,0x95,0x1a,0xfb,0x34,0xf6,0x94,0xd8,
    0xa7,0x5f,0xe7,0x06,0xbb,0x3c,0x67,0x51,0xb3,0xfa,0x57,0xd3,0x97,0xce,0xeb,0x58,
    0x5f,0xe9,0xf9,0x01,0xb8,0xa2,0x51,0xa1,0x8f,0xb4,0x9c,0x39,0x47,0xf1,0x5f,0x4f,
    0xc9,0xf9,0x20,0xef,0xcb,0xe9,0x41,0xe6,0x2b,0xfa,0xe5,0x5c,0xd9,0x6f,0xbe,0x86,
    0xf3,0x22,0xfc,0x47,0xa8,0xb9,0x84,0x1a,0x1e,0xe3,0x3d,0x69,0xfc,0x37,0xb0,0x0e,
    0x3a,0x6f,0xe6,0x7c,0x88,0xff,0xb3,0xd4,0x68,0xfd,0xb3,0x9c,0x15,0x9d,0xef,0x67,
    0xaf,0xeb,0xfc,0x48,0x3f,0x8d,0x4f,0x70,0x66,0x74,0x7e,0x9a,0x3d,0xa8,0xfb,0xec,
    0xbb,0x7e,0xf5,0x9f,0x45,0x23,0xb5,0xff,0x1c,0x5b,0xb3,0x73,0xa5,0x9f,0x0b,0xd4,
    0xa2,0xfb,0xea,0x02,0xf7,0x4f,0xd2,0xf8,0x67,0xbc,0x80,0x3b,0xb2,0xd9,0xaa,0x0a,
    0xdf,0x85,0xf8,0xcd,0x71,0x01,0xb3,0x43,0x7d,0xe7,0xfa,0xf7,0xcd,0xef,0xb4,0xcc,
    0xd5,0xf9,0x3c,0x3f,0xdf,0xbb,0xeb,0x40,0x66,0x9a,0x5f,0xf5,0x04,0x75,0x44,0xc4,
    0xbf,0xe2,0x11,0xd9,0x0b,0x19,0xf6,0xfb,0x78,0xf6,0x74,0xbd,0xcf,0x23,0xfb,0xf9,
    0x4e,0xb0,0xf1,0x66,0x1d,0x9b,0x39,0x2b,0x77,0x61,0x9f,0xef,0x23,0xc8,0x3e,0xbb,
    0x87,0xbd,0x38,0x81,0x78,0xe2,0x33,0x09,0x7c,0xa7,0xf7,0x91,0xf9,0x64,0x78,0x93,
    0xe0,0x4d,0xe7,0x2e,0xa9,0x64,0x5f,0x66,0xd8,0x83,0x33,0xc1,0xdf,0xf3,0x3e,0xf9,
    0xb1,0x2e,0x01,0x93,0xbd,0x79,0xd9,0x57,0x9e,0xa1,0x9e,0xab,0xde,0xbf,0x8a,0xbb,
    0x27,0x43,0x3f,0xf2,0xde,0xe0,0x79,0x25,0xdc,0x3f,0x93,0xf1,0xdd,0xc6,0x5a,0xcc,
    0x07,0x6f,0xf4,0xea,0x48,0x4d,0x63,0x5c,0xc0,0xd4,0xef,0x0f,0x1f,0x43,0x63,0xc9,
    0xb3,0xd7,0x6b,0x21,0x7e,0xf3,0x5d,0xf0,0xc9,0x81,0x33,0xdb,0xf4,0x70,0x2f,0x3d,
    0x54,0x9b,0x1e,0x16,0x82,0x6b,0x0f,0x8b,0xc0,0xb4,0x87,0x5a,0xd3,0xc3,0xa2,0xf8,
    0xee,0x8b,0x62,0x4c,0xf2,0xd6,0x98,0x1e,0x16,0x93,0xdb,0x99,0x1e,0x96,0x80,0x6b,
    0x0f,0x65,0x2e,0x60,0xea,0x27,0x3d,0x68,0xac,0x5a,0xd3,0xc3,0x02,0x17,0x7c,0x32,
    0x70,0x6a,0x4c,0x0f,0xf5,0xf4,0x50,0x67,0x7a,0x58,0x06,0xae,0x3d,0x34,0x80,0x69,
    0x0f,0x4d,0xa6,0x87,0x86,0xb8,0x9e,0x28,0xc6,0x24,0x6f,0x23,0xfb,0x48,0xf2,0xde,
    0x4f,0xee,0x05,0xae,0xef,0x2e,0x90,0x1a,0xd5,0xb7,0xc9,0xd4,0x58,0x8d,0x5f,0x2d,
    0xbc,0x46,0xea,0x91,0xfb,0xe2,0x21,0xee,0x0a,0xdd,0x73,0x0f,0x53,0xf3,0x4a,0xb3,
    0xe7,0x56,0x81,0x67,0xd9,0x73,0xab,0xc1,0xaa,0x5d,0xe0,0xc9,0xfd,0xb1,0x16,0xde,
    0x1a,0x78,0xa2,0xe9,0xa3,0xe0,0xaa,0xfb,0xe3,0x70,0x23,0x83,0xad,0x03,0x73,0xb1,
    0x0e,0xe9,0xf8,0xee,0x59,0x8f,0xef,0x3a,0x62,0x68,0x8e,0x27,0xc8,0xb1,0xc1,0xe4,
    0xd8,0x08,0xbe,0xca,0xf7,0x2a,0x77,0xe7,0x26,0x7a,0x5a,0xcf,0x7d,0xb5,0xd1,0xac,
    0xc7,0x66,0xf8,0xcd,0x66,0x3d,0x9e,0x04,0xd7,0xf5,0x78,0x0a,0x4c,0xd7,0xa3,0xd5,
    0xac,0x87,0xd8,0x5a,0xfc,0xd8,0x8e,0xc6,0xdb,0x4d,0xec,0x1d,0xc4,0xce,0x9a,0xd8,
    0x3b,0xc1,0x35,0xf6,0x2e,0x30,0x8d,0xdd,0x6e,0x62,0x8b,0xad,0xcd,0x8f,0x76,0x62,
    0xb7,0xa1,0x91,0xc4,0x79,0x81,0xbe,0xe4,0x7e,0x79,0x9f,0x58,0x2f,0x82,0xcf,0x62,
    0xdd,0x95,0xd7,0xce,0xba,0x8b,0xcf,0x4b,0xe4,0xdc,0x8e,0x7f,0x1b,0x79,0x3b,0x4c,
    0x5e,0xf1,0xd9,0xed,0x47,0x07,0xfc,0xdd,0x26,0xef,0xcb,0x26,0x6f,0xbd,0xbf,0xcd,
    0xe5,0x9e,0x7f,0x05,0x6c,0x93,0xb9,0xbf,0x12,0xac,0x9d,0xd8,0xf7,0xc0,0xd3,0xf1,
    0xbc,0x8f,0x25,0xf8,0x5e,0xb8,0x7b,0xe2,0x58,0x03,0xe3,0xb5,0x7a,0x95,0x38,0x7b,
    0xb9,0x43,0x73,0xf8,0x2e,0x26,0xe9,0x49,0x6b,0xea,0xa0,0x27,0xe1,0x2c,0x72,0x81,
    0xd3,0x0e,0x7f,0x37,0xbe,0xad,0xf8,0xb6,0x98,0xfa,0x9f,0xf9,0x8f,0xfa,0x9f,0xbb,
    0x41,0xfd,0x5b,0xe0,0xe9,0x68,0xa3,0xfe,0xad,0x70,0xb7,0x98,0xfa,0xb7,0x11,0x67,
    0xeb,0xff,0xd4,0xaf,0x35,0xb5,0x9a,0xfa,0x17,0xba,0xd0,0x43,0x07,0xfc,0x96,0x78,
    0xbf,0x85,0x6f,0xc5,0x6b,0xd8,0xdb,0x7d,0x24,0x99,0xef,0x03,0x9b,0xe3,0xfa,0xf6,
    0xd9,0x9b,0xec,0xb3,0xfd,0x66,0x9f,0x1d,0x00,0xd7,0x7d,0xf6,0x16,0x98,0xee,0xb3,
    0x43,0x66,0xbd,0xc5,0x76,0xd0,0x8f,0x43,0xd4,0x76,0x10,0xbd,0xa4,0xee,0xb7,0xc9,
    0x19,0xc1,0xbb,0xc6,0xfb,0x35,0xff,0x2e,0xb1,0x7e,0x85,0x23,0xcf,0xe3,0xe4,0xfa,
    0x0d,0x5e,0x1e,0x9c,0xab,0x26,0x97,0xd8,0x2e,0xc5,0xbd,0x07,0x5e,0x6f,0x7c,0x1e,
    0x42,0xae,0xcb,0xf0,0x0a,0xa2,0xd0,0x6f,0x3a,0xf6,0x09,0xb8,0x7c,0x6f,0x87,0x78,
    0xbd,0xd2,0xb1,0x8e,0x61,0x8d,0x6e,0xc1,0x5e,0x84,0xb6,0xd7,0x88,0x79,0xc9,0xf0,
    0x7f,0x27,0xa6,0x7c,0x9f,0xad,0x8f,0xd4,0xf4,0x97,0x8f,0x72,0x05,0xac,0x97,0xd8,
    0x35,0x2e,0xc4,0xef,0x85,0x7b,0x89,0xfb,0x5f,0xb4,0xaf,0x70,0xc1,0xbe,0xcf,0xdc,
    0x57,0xc2,0x79,0x17,0x8d,0x1c,0xfd,0xe6,0xb9,0x7f,0x6a,0xe4,0x5c,0xc8,0x29,0x4f,
    0xd5,0x28,0xe9,0x02,0x4f,0x35,0x1a,0xe2,0xfa,0x34,0x12,0x5b,0xca,0x8f,0x5c,0x78,
    0xf2,0x54,0x8d,0x06,0xc2,0xb3,0x1a,0x0d,0x72,0x01,0xb7,0x1a,0x0d,0x76,0x7d,0x1a,
    0x89,0x5d,0x35,0xca,0x23,0x66,0xca,0xf5,0xf1,0xd3,0xc4,0x54,0x8d,0xd4,0x47,0x6a,
    0x52,0x8d,0x04,0x53,0x8d,0xee,0x73,0x21,0xbe,0xd4,0x95,0xa6,0x56,0xd5,0x68,0x82,
    0x0b,0xf6,0x0a,0xf2,0xab,0x46,0x1f,0xa0,0x51,0x82,0x7e,0x8b,0xfb,0x69,0x34,0x9c,
    0x9c,0xc3,0x8d,0x46,0x23,0x5d,0xe0,0xa9,0x46,0xa3,0x8d,0x46,0x62,0x1b,0xe5,0x47,
    0x21,0xbc,0x42,0xa3,0xd1,0xad,0xf0,0xac,0x46,0x45,0x2e,0xe0,0x56,0xa3,0xdb,0x8c,
    0x46,0x45,0x46,0xa3,0x62,0x62,0x8e,0x32,0x1a,0x15,0x10,0x53,0x35,0x52,0x9f,0xd1,
    0x46,0xa3,0x62,0xa3,0xd1,0x62,0x17,0xe2,0x4b,0x5d,0x05,0xd4,0xaa,0x1a,0x4d,0x72,
    0xc1,0x2e,0x5a,0x25,0xc8,0xa9,0x67,0xef,0x10,0x7b,0x51,0xfc,0x96,0xb2,0xd7,0x5a,
    0xe1,0x14,0x9b,0x33,0xff,0x21,0x67,0xfe,0x88,0x39,0xf3,0x1f,0x81,0xeb,0x99,0xff,
    0x18,0x4c,0xcf,0xfc,0x31,0x73,0x0e,0xc5,0x76,0x34,0x3e,0xb3,0x21,0xef,0x71,0xf3,
    0xdd,0xfa,0x94,0xd8,0x27,0x4c,0xec,0xcf,0xc0,0x35,0xf6,0xe7,0x60,0x1a,0xbb,0xd3,
    0xc4,0x16,0xdb,0x49,0x3f,0x4e,0x11,0xfb,0x94,0xf9,0x5e,0x7f,0x45,0xec,0xd3,0xe6,
    0x7b,0xfd,0x35,0xf8,0x97,0x7c,0xff,0xbf,0x01,0xdb,0x60,0xf2,0x7d,0x0b,0xbe,0x92,
    0x7c,0x5d,0x26,0x9f,0xd8,0xce,0xf8,0xd1,0x45,0xbe,0x33,0xe6,0xcc,0x4e,0x77,0xe1,
    0xef,0x84,0xa5,0xe6,0x77,0x36,0xf5,0xeb,0x32,0x5a,0xd7,0xb9,0xe0,0x73,0x0a,0xce,
    0x19,0x53,0xcf,0xf7,0xd4,0x73,0xd6,0xd4,0xf3,0x03,0xb8,0xd6,0xd3,0x6d,0xea,0x11,
    0xdb,0x39,0x3f,0xba,0xc9,0x73,0xce,0xd4,0x33,0x93,0x7a,0xea,0xcc,0xda,0xab,0x5f,
    0xb7,0xa9,0xa7,0xde,0x05,0x9f,0x2e,0x38,0xe7,0x4c,0x3d,0x3f,0x52,0x4f,0xd6,0xd4,
    0xf3,0x13,0xb8,0xd6,0xd3,0x63,0xea,0x11,0xdb,0x79,0x3f,0x7a,0xc8,0x73,0xde,0xd4,
    0x53,0xe5,0xc2,0xdf,0x49,0x92,0x4f,0xbf,0x51,0xea,0xd7,0x63,0xea,0x69,0x74,0xc1,
    0xa7,0x1b,0xce,0x79,0x7c,0x3b,0xf1,0x3d,0x69,0xce,0xfa,0x17,0xe8,0x9d,0x34,0x79,
    0xa6,0xba,0x3e,0x3c,0xea,0xc7,0xed,0x34,0x79,0x1a,0x5c,0xc8,0xd5,0x03,0xe7,0x24,
    0xbe,0xc7,0xf0,0x3d,0xca,0xb7,0x56,0x7c,0x3f,0x21,0x9e,0x0c,0xfd,0x1f,0x52,0xc2,
    0x7c,0x6b,0x95,0x73,0xcc,0xc4,0x5f,0xe6,0x42,0x8e,0x4e,0xf8,0x12,0x6f,0x8e,0x67,
    0x5c,0xc4,0xf6,0xa7,0xdf,0x25,0x33,0xfc,0xf8,0x1b,0x7a,0x49,0x3c,0xff,0xf4,0x12,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
