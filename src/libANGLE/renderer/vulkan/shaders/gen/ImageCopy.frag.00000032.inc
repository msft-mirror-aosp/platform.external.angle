// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000032.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000032[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x97,0xfd,0x6b,0xd7,0x55,
    0x14,0xc7,0x3f,0xf7,0xfb,0xdd,0x93,0xf3,0x21,0x75,0x9a,0xa6,0x73,0x6c,0x3e,0xae,
    0x66,0xd3,0xd4,0xd4,0xdc,0x66,0x9a,0xe6,0x66,0x4e,0xcd,0x0d,0x49,0x33,0x0b,0xc3,
    0x4c,0x4b,0x67,0xb9,0xe8,0x17,0xa1,0xb2,0x34,0x15,0x7a,0x90,0xb4,0x72,0x64,0x39,
    0x22,0x25,0x49,0x42,0x2b,0x25,0x4a,0x2b,0x07,0x31,0x2c,0xca,0x81,0xe9,0xa0,0x1c,
    0xfa,0x17,0x44,0x92,0xe6,0x43,0x44,0xdd,0x73,0xef,0xeb,0xec,0x7b,0xfa,0x92,0x34,
    0xb8,0xdc,0xef,0x79,0x9f,0xa7,0xf7,0x39,0xf7,0xdc,0xcf,0xe7,0xb3,0x74,0x6a,0x44,
    0x7e,0x92,0xb8,0xa4,0x30,0x29,0x48,0xe6,0xbb,0x24,0xfc,0xf5,0x4b,0x52,0x89,0x63,
    0x9f,0xe0,0xf7,0x9e,0x49,0x5e,0x90,0x6b,0xeb,0x1b,0xeb,0x2b,0x9b,0x9f,0x59,0x59,
    0x39,0xe9,0xce,0xf1,0x62,0xd7,0x27,0x49,0x07,0x7b,0xd1,0xdd,0x94,0xe4,0x27,0x39,
    0x7e,0x97,0xb5,0x6e,0xc5,0x9a,0x26,0xc1,0x47,0xfb,0x75,0xc1,0xaf,0xbe,0xde,0x4e,
    0xf0,0x7c,0x89,0xe1,0x7f,0x8d,0x0e,0x31,0xc5,0x27,0x49,0xea,0x92,0xdc,0x64,0x6c,
    0x4c,0x9b,0x8c,0x60,0x57,0xcc,0x81,0x15,0x18,0x2c,0x05,0xd6,0xd7,0x60,0x69,0xb0,
    0x01,0x06,0xcb,0x01,0x1b,0x6c,0xb0,0x5c,0xb0,0x62,0x83,0xe5,0x81,0x95,0x1a,0x2c,
    0x1f,0x6c,0xa4,0xc1,0x0a,0xc0,0xca,0x0d,0xd6,0x03,0x6c,0xac,0xc1,0x0a,0xc1,0xc6,
    0x1b,0xac,0x27,0xd8,0x24,0x83,0xf5,0x02,0x9b,0x6a,0xb0,0xde,0x60,0xd5,0x06,0xeb,
    0x03,0x36,0x23,0xf4,0x2e,0xdd,0xdd,0x03,0xe9,0xe3,0x32,0xbf,0x0f,0xa7,0x67,0x2a,
    0x97,0x19,0x59,0x7a,0x5f,0x82,0x5c,0xe4,0xbd,0x52,0x41,0x9f,0x0e,0xfd,0x92,0xdf,
    0x37,0xfb,0x5f,0x79,0xd4,0x5e,0xe1,0xed,0xf3,0xe0,0x50,0x5c,0x39,0xbf,0x6a,0x80,
    0xb7,0xe8,0x63,0xf0,0x22,0xbf,0x1a,0x3e,0x5f,0x30,0x53,0x65,0xe9,0xeb,0xe2,0xc5,
    0x67,0xa6,0xab,0x3c,0xc4,0xaf,0x9a,0xc2,0xad,0x77,0xab,0x2c,0x3d,0xfe,0xb8,0x76,
    0x45,0xcd,0x40,0x2f,0x97,0x92,0x43,0xce,0x73,0x90,0x97,0xcb,0x90,0x53,0xc8,0x23,
    0x39,0x87,0x9c,0x80,0xe7,0x24,0xa3,0xb0,0x15,0xbc,0x0a,0x79,0xb4,0xf1,0x1f,0x83,
    0xbd,0xf8,0x4b,0xfc,0x0a,0xe2,0x25,0xa1,0xde,0x7e,0xa1,0x47,0x65,0xac,0x52,0xb3,
    0x2a,0xfe,0x67,0x95,0x76,0xef,0x39,0xc9,0xed,0x9c,0xef,0x58,0x38,0x88,0x5c,0x09,
    0x56,0x41,0x4d,0xe3,0xe0,0x24,0xf6,0xe3,0xd1,0x95,0x19,0xfd,0x64,0x66,0x4e,0xf4,
    0x53,0xba,0x7d,0xa3,0x5e,0xf6,0x69,0x70,0x56,0xfb,0x59,0xd4,0xa5,0xfa,0xb9,0xc4,
    0x57,0xfd,0x02,0xe6,0xe1,0x16,0x1f,0x69,0x09,0xb6,0x5c,0xd9,0xee,0x3f,0x95,0x87,
    0xfa,0xb3,0x5d,0xea,0xf7,0x25,0xe4,0x7f,0x10,0x7c,0x29,0xf5,0x88,0xbc,0x2c,0x2b,
    0xff,0xf2,0x2c,0x79,0x35,0x3d,0x16,0xff,0x35,0xf0,0x2f,0x35,0xfa,0x26,0x66,0x5b,
    0xe5,0xcd,0xdc,0x1d,0x39,0xa3,0x57,0xe1,0x97,0x36,0xfa,0x5d,0xdc,0x23,0x9d,0x91,
    0x3d,0x26,0x9f,0xc8,0x07,0x82,0xf4,0xfc,0x2c,0xf1,0x3f,0x48,0xaf,0x72,0x8c,0xff,
    0xe1,0xac,0xfe,0x1f,0xe7,0xbe,0xa9,0x7c,0x92,0xf9,0x55,0xf9,0xb4,0x99,0xa9,0xf3,
    0x70,0x39,0x48,0xfd,0xe7,0x79,0x36,0xa5,0xc3,0x39,0xe5,0x86,0x3a,0x73,0xe0,0x23,
    0xd8,0x55,0x8f,0xc8,0xd9,0xd5,0x30,0x9f,0xe5,0xcc,0xe0,0x42,0x5f,0xa1,0xcc,0xdf,
    0xad,0x60,0xe5,0xa6,0xef,0x4d,0xcc,0xf6,0x6d,0xe8,0x67,0xfa,0x08,0x32,0x17,0x77,
    0x30,0x3b,0xe3,0x88,0x27,0x36,0x13,0xc0,0x5f,0xf4,0x36,0x22,0x4f,0xc4,0x6f,0x02,
    0x7e,0x53,0x78,0x36,0x54,0x32,0x47,0x35,0xcc,0xc4,0x5d,0xe0,0x1f,0x79,0x9b,0x3e,
    0xa1,0x96,0x88,0xc9,0x2c,0x5d,0xf1,0xcc,0x6b,0xe0,0x73,0xdd,0xdb,0x57,0xf1,0x2c,
    0xa9,0xa1,0x1e,0xf9,0xbd,0xc8,0xfb,0x95,0xf2,0x3c,0x99,0x88,0xed,0x73,0xf4,0x6b,
    0x26,0x78,0x83,0x3f,0x0d,0xe1,0x34,0xdc,0x45,0x4c,0xed,0xae,0xf9,0x18,0x1a,0x4b,
    0xf6,0xcb,0xbe,0x17,0x62,0x57,0xe5,0xa2,0x4d,0x2e,0x3e,0xd5,0xa6,0x86,0xd9,0xd4,
    0x30,0xcb,0xd4,0x70,0x2f,0xb8,0xd6,0x30,0x07,0x4c,0x6b,0xa8,0x33,0x35,0xcc,0x09,
    0xcf,0xb2,0x24,0x60,0x92,0xb7,0xd6,0xd4,0x30,0x8f,0xdc,0xce,0xd4,0x50,0x0f,0xae,
    0x35,0x8c,0x72,0x11,0x53,0x3b,0xa9,0x41,0x63,0xd5,0x99,0x1a,0xaa,0x5d,0xb4,0xa9,
    0xc1,0xa7,0xd6,0xd4,0xb0,0x90,0x1a,0x16,0x98,0x1a,0xee,0x07,0xd7,0x1a,0x16,0x81,
    0x69,0x0d,0x8d,0xa6,0x86,0x45,0x81,0x4f,0x12,0x30,0xc9,0xdb,0xc0,0x1c,0x49,0xde,
    0xc5,0xe4,0xae,0x76,0x99,0xbb,0x2b,0x1c,0xd5,0xb6,0xd1,0x70,0xac,0xc1,0xae,0x0e,
    0xbf,0x06,0xf8,0xc8,0x9d,0x7e,0x88,0xfb,0xac,0x33,0xf7,0x30,0x9c,0x97,0x9b,0x99,
    0x7b,0x04,0xfc,0x05,0x66,0x6e,0x05,0x98,0xc4,0x5d,0xcf,0x73,0xf5,0x51,0xf0,0x95,
    0x5e,0x5e,0x12,0xf6,0x18,0xfb,0x71,0x7c,0x1e,0x03,0x93,0xb8,0xea,0xb3,0x0a,0x7c,
    0x9b,0xb7,0x19,0x13,0x6c,0x63,0x9c,0x55,0xf0,0x91,0x67,0xc7,0x13,0xf0,0x59,0x0d,
    0x1f,0x39,0xab,0x27,0xc1,0xd7,0x73,0xff,0xd7,0x82,0x3d,0xe0,0xeb,0x95,0x3b,0xb7,
    0xae,0x3b,0x77,0xec,0xcd,0x5a,0x73,0x26,0xeb,0x89,0xd7,0x64,0xce,0xe4,0x29,0x70,
    0x3d,0x93,0xa7,0xc1,0xf4,0x4c,0x9a,0xcd,0x99,0x88,0x6e,0x83,0x5f,0xcd,0xf4,0x79,
    0x03,0x73,0x25,0x3c,0x9e,0x25,0x77,0x82,0xdf,0x75,0x7e,0xff,0xe9,0x7f,0x4b,0xac,
    0x5f,0xf1,0x91,0xfd,0x18,0xb9,0x7e,0xc3,0xaf,0x37,0x3e,0xd7,0x4c,0x2e,0xd1,0x5d,
    0xf4,0xeb,0x12,0x7e,0x97,0xc2,0xfb,0x3f,0x3f,0xe4,0xfa,0x83,0xda,0x86,0xe0,0x2f,
    0xef,0xd5,0x2d,0xf0,0xb8,0x82,0x5e,0x74,0x2f,0x81,0x5d,0x05,0x2f,0x66,0x4e,0xae,
    0x13,0xf3,0xa2,0xf1,0xfb,0x9d,0x58,0x45,0x59,0x36,0xc2,0xe9,0x6f,0x9f,0xed,0x2a,
    0xd8,0x65,0x38,0x4c,0x77,0x31,0xee,0x25,0x7c,0x2f,0x72,0x7f,0xc2,0x73,0xcf,0x45,
    0xbd,0xf6,0x43,0x7b,0xb4,0x91,0x1e,0x39,0xea,0xed,0xe5,0xfe,0xdd,0xa3,0xc4,0xc5,
    0x9c,0xb2,0x6b,0x8f,0x52,0x2e,0xfa,0x69,0x8f,0x7a,0xba,0x4c,0x8f,0x44,0x97,0xf6,
    0x2b,0x0f,0x3f,0xd9,0xb5,0x47,0x05,0x2e,0xd3,0xa3,0x8d,0x59,0x3d,0xea,0xe1,0xa2,
    0xde,0xf6,0xa8,0xd0,0x45,0x5c,0x7b,0xd4,0x8b,0x98,0x12,0x5f,0xfd,0x72,0xe1,0x52,
    0x94,0x65,0x23,0x9c,0xb4,0x47,0x82,0x69,0x8f,0x66,0xb8,0x18,0x57,0x78,0xe5,0xc2,
    0x55,0x7b,0x54,0xe1,0xa2,0xbe,0x1c,0x9e,0xda,0xa3,0x4d,0xf4,0x28,0x45,0xbd,0x25,
    0x59,0x3d,0xea,0x4f,0xce,0xfe,0xa6,0x47,0x03,0x5c,0xf4,0xd3,0x1e,0x0d,0x33,0x3d,
    0x12,0xdd,0x40,0xbf,0x06,0xe3,0x37,0xd8,0xf4,0x68,0x88,0xe9,0xd1,0xa6,0xac,0x1e,
    0x0d,0x75,0x51,0x6f,0x7b,0x54,0xec,0x22,0xae,0x3d,0x2a,0x21,0xe6,0x40,0xd3,0xa3,
    0x41,0x70,0x29,0xca,0xb2,0x19,0x66,0x7a,0x54,0x62,0x7a,0x74,0x8f,0x8b,0x71,0x85,
    0xd7,0x20,0xb8,0x6a,0x8f,0x2a,0x5d,0xd4,0x4b,0xaf,0x52,0xc4,0xd3,0xbb,0xd7,0xcc,
    0x2c,0x8a,0xdd,0x6c,0x66,0xad,0x11,0x9f,0x12,0x97,0xb9,0xf3,0x5b,0xb8,0xf3,0x9b,
    0xcd,0x9d,0x7f,0x19,0x5c,0xef,0xfc,0x56,0x30,0xbd,0xf3,0xdb,0xcd,0x3d,0xdc,0x1a,
    0x9e,0x51,0x49,0xb2,0x93,0xbc,0x3b,0xcd,0xf3,0xe4,0x4d,0x62,0xef,0x32,0xb1,0xdf,
    0x02,0xd7,0xd8,0x6f,0x83,0x69,0xec,0x16,0x13,0x5b,0x74,0xbb,0xfd,0x6a,0x21,0xf6,
    0x6e,0x33,0x07,0xef,0x50,0x97,0x7c,0x57,0x7c,0x41,0xac,0x77,0xc1,0xf7,0xd0,0x0b,
    0xf5,0x6b,0xa1,0x17,0x62,0xf3,0x1e,0x39,0x77,0x62,0xbf,0x9b,0xbc,0xad,0x26,0xaf,
    0xd8,0xec,0xf5,0xab,0x15,0xff,0xbd,0x26,0xef,0xfb,0x26,0xef,0x42,0xff,0xe5,0x25,
    0xdf,0x64,0x1f,0x80,0xcd,0x76,0x99,0xef,0x96,0x54,0x78,0x77,0xe5,0x05,0xfd,0x3e,
    0xfc,0x74,0xc9,0x33,0x5d,0xf0,0xfd,0xf8,0xee,0x0b,0xb1,0x7a,0x84,0xb3,0xfa,0x90,
    0x58,0xfb,0xf9,0x76,0xca,0x35,0xdf,0x7c,0x52,0x93,0x72,0x6a,0x35,0xe7,0x5b,0x4b,
    0xee,0x16,0xfc,0xf7,0x62,0xbb,0x1d,0xdb,0x6d,0x86,0xff,0x2b,0xff,0xc1,0xff,0xf5,
    0x1b,0xf0,0x7f,0x0d,0x9e,0x3b,0xb0,0x79,0xc5,0xf0,0x7c,0x03,0x9f,0x1d,0x37,0xe0,
    0xa9,0xb9,0xb7,0x1b,0x9e,0x73,0x5c,0xe4,0xda,0x8a,0xff,0x36,0x72,0x8c,0x0c,0xf3,
    0x10,0xf5,0x07,0xc2,0xfd,0x8e,0xdf,0xaa,0x87,0xc0,0x75,0x9e,0x3e,0x61,0x9e,0x0e,
    0x9b,0x79,0xfa,0x14,0x5c,0xe7,0xe9,0x33,0x30,0x9d,0xa7,0xa3,0xe6,0x5c,0x45,0x77,
    0x24,0xbc,0x5f,0x22,0xb7,0x63,0x26,0xf6,0x57,0xc4,0x3e,0x6e,0x62,0x7f,0x0d,0xae,
    0xb1,0xbf,0x01,0xd3,0xd8,0x6d,0x26,0xb6,0xe8,0x4e,0xf8,0xd5,0x4e,0xec,0x76,0xf3,
    0x9e,0xfe,0x8e,0xd8,0x27,0xcd,0x7b,0xfa,0x7b,0xf0,0x76,0xbe,0xbb,0x7e,0x00,0x5b,
    0x6d,0xf2,0xfd,0x08,0xbe,0x9c,0x7c,0x1d,0x26,0x9f,0xe8,0x4e,0xf9,0xd5,0x41,0xbe,
    0x53,0xbc,0x5f,0xa4,0x6f,0x93,0x5d,0xe4,0x78,0x28,0xc9,0x7c,0x9f,0xa9,0x5d,0x07,
    0xe7,0x21,0x76,0x75,0x2e,0xda,0xb4,0xe3,0x73,0xca,0xf0,0xf9,0x09,0x3e,0xa7,0x0d,
    0x9f,0x33,0xe0,0xca,0xa7,0xd3,0xf0,0x11,0xdd,0x59,0xbf,0x3a,0xc9,0x73,0xd6,0xf0,
    0x99,0x0a,0x9f,0x3a,0xf3,0x9c,0x52,0xbb,0x4e,0xc3,0x67,0xae,0x8b,0x36,0x1d,0xf8,
    0x9c,0x35,0x7c,0x7e,0x86,0xcf,0x2e,0xc3,0xe7,0x17,0x70,0xe5,0xd3,0x65,0xf8,0x88,
    0xee,0x9c,0x5f,0x5d,0xe4,0x39,0x67,0xf8,0x4c,0x73,0xf1,0xff,0xc0,0xb9,0x2e,0x33,
    0xaf,0x6a,0xd7,0x65,0xf8,0xd4,0xbb,0x68,0xd3,0x89,0xcf,0x39,0x6c,0xdb,0xb0,0x3d,
    0xc1,0xbd,0x92,0x59,0xf9,0x96,0x7e,0xa7,0x4d,0x9e,0x49,0x2e,0x83,0x27,0x59,0xbe,
    0x6d,0x26,0xcf,0x3c,0x17,0x73,0x75,0xe1,0x73,0x02,0xdb,0xa3,0xd8,0x1e,0xe1,0xde,
    0x89,0xed,0x97,0xc4,0x3b,0xc4,0xbd,0xcb,0xe7,0xae,0xa6,0xb3,0x7c,0x8e,0x9a,0xf8,
    0xf7,0xb9,0x98,0xa3,0x0d,0x7f,0x89,0x37,0xdd,0x7b,0x5c,0x40,0xf7,0x97,0x9f,0x92,
    0xa9,0x7e,0xfd,0x03,0x21,0xb0,0xb1,0xbe,0xb8,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform sampler2D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texture(
//         src, vec2(params . srcOffset + srcSubImageCoords)/ textureSize(src, 0), params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
