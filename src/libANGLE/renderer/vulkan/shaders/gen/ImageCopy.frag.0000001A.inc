// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.0000001A.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_0000001A[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfb,0x4f,0x97,0x65,
    0x18,0xc6,0xdf,0xef,0x19,0x21,0x40,0x0e,0x4a,0xb8,0xb4,0x3c,0xb0,0xd5,0x30,0xa0,
    0x45,0x46,0x90,0x2e,0x32,0x32,0x8d,0x52,0xf0,0x50,0xc1,0x0f,0x1d,0x64,0x81,0x05,
    0x56,0x7c,0x6b,0xe9,0xda,0x5a,0x4b,0x13,0x7e,0x49,0x2b,0x98,0x63,0xd6,0x12,0x36,
    0x0b,0xb6,0x0c,0x66,0x3f,0xb4,0xf5,0x53,0x6b,0xad,0x70,0xa4,0x1d,0xfe,0x98,0xd6,
    0x61,0x6b,0xeb,0xb9,0x1f,0x3e,0xb7,0xbb,0xf6,0x5d,0x4d,0xb6,0x67,0xef,0xfb,0x5c,
    0xf7,0xe9,0xba,0xee,0xfb,0x79,0x1f,0xbe,0x99,0xf4,0xd6,0x42,0x92,0xa4,0x92,0xf2,
    0xa4,0x2c,0xf9,0x2d,0x59,0xfd,0xab,0x49,0xd2,0x01,0x49,0x92,0x8a,0x24,0x1f,0x9f,
    0x7b,0x7a,0x0f,0xf6,0xb6,0x14,0x5f,0x1f,0x6a,0x69,0xbf,0xaf,0xcd,0xec,0x55,0x49,
    0x26,0xfa,0x99,0xad,0x3a,0x29,0x24,0xd9,0xf0,0xb4,0x35,0xf6,0xfc,0xb1,0xe3,0x86,
    0x57,0x86,0xf5,0x55,0x58,0x6b,0x83,0x9f,0xe1,0x05,0xcb,0x11,0xde,0x2a,0x63,0x4e,
    0x8b,0x49,0x92,0xc7,0x92,0x5c,0x52,0x47,0xbd,0xad,0x3c,0x1d,0x4b,0x81,0x95,0x09,
    0x96,0x06,0x5b,0x2b,0x58,0x06,0xac,0x5e,0xb0,0x2c,0xd8,0xad,0x82,0xe5,0xc0,0x6e,
    0x13,0x2c,0x0f,0x76,0x87,0x60,0x05,0xb0,0x6d,0x82,0x95,0x81,0xdd,0x29,0xd8,0x1a,
    0xb0,0xed,0x82,0x95,0x83,0xb5,0x09,0x56,0x01,0xd6,0x2e,0xd8,0x2d,0x60,0x1d,0x82,
    0x55,0x82,0x3d,0x28,0x58,0x15,0xd8,0x43,0xb1,0x77,0x99,0x1b,0x3d,0xb0,0x3e,0xee,
    0x0e,0xcf,0x2d,0xf4,0xcc,0xf7,0x9b,0x65,0x6f,0xbd,0xdf,0xc4,0xbe,0x2e,0x44,0xa5,
    0xa3,0x3d,0x13,0xfb,0x65,0xef,0xeb,0x82,0x4f,0x1e,0xed,0xd6,0xeb,0x86,0xb0,0x2f,
    0xd0,0x13,0xb3,0xaf,0x0f,0x9e,0xe5,0xd8,0xcd,0x56,0x81,0xbe,0x6c,0xc4,0xb2,0x51,
    0x43,0x0a,0x7d,0x5d,0xec,0x2b,0x25,0x57,0x15,0xfe,0x5e,0xab,0x96,0x5c,0x49,0xe4,
    0x55,0x73,0xa3,0xd7,0x5e,0xd3,0x57,0xed,0x4d,0x96,0xfb,0x18,0x87,0x7a,0xe6,0x50,
    0x07,0x87,0xfa,0x58,0x6b,0x15,0x6b,0x46,0xdf,0x7a,0x38,0x99,0x7f,0x03,0xb6,0x82,
    0xd8,0x37,0x72,0x36,0xcc,0xbe,0x09,0x7b,0x6d,0x3c,0x4f,0xe9,0xd8,0xcf,0x66,0xb8,
    0x7b,0xaf,0x3d,0xae,0x19,0x2e,0x6e,0xbf,0x87,0x3a,0x6e,0xdf,0xc1,0xfc,0xac,0x17,
    0xbb,0xc8,0x69,0xbd,0x6b,0x0c,0x15,0xba,0xd9,0xa7,0xc8,0x59,0xfa,0x34,0x2e,0x0f,
    0xf3,0xde,0x8d,0x36,0xdb,0xef,0x2e,0xe1,0xd0,0x53,0xb2,0xdf,0xc7,0xf7,0x60,0xf1,
    0x8f,0xa3,0x25,0x0f,0x87,0x27,0x79,0xcf,0x88,0x7f,0x3f,0xf3,0xf1,0xfd,0x11,0x7a,
    0x63,0xfe,0xcf,0xc1,0x51,0xfd,0x47,0xf8,0x16,0x7c,0x7f,0xaa,0xa4,0xd7,0xe7,0x98,
    0xb9,0xef,0x2f,0x70,0x26,0x7c,0x7f,0x49,0xce,0xcf,0x15,0x72,0xef,0x42,0xdf,0x15,
    0xee,0x8b,0x4c,0xec,0x5d,0x2e,0xf2,0xca,0xa2,0xcf,0xb0,0x3f,0x03,0x62,0x73,0xda,
    0xc9,0x59,0xac,0x26,0xf7,0xfe,0xc0,0xb8,0x8a,0x3b,0xa1,0x9a,0xe5,0xbd,0x3c,0xce,
    0x99,0xae,0xc1,0xde,0x1d,0x32,0x34,0x70,0x2f,0xac,0xe3,0x6c,0xec,0xc4,0xa7,0x11,
    0xfc,0xdd,0xe0,0x63,0xfb,0x0d,0xc4,0x35,0x12,0x67,0x67,0xe3,0x76,0xe2,0x36,0x12,
    0xe7,0x67,0xda,0xf0,0x2f,0x82,0xcf,0x66,0xb9,0x4f,0xec,0xbc,0xfc,0x11,0x98,0x37,
    0xc1,0xe7,0xef,0xe0,0xef,0xf7,0x4a,0x13,0x7a,0xec,0xbd,0x2f,0xc4,0xe5,0xb9,0x5b,
    0x36,0xe0,0xfb,0x36,0xfd,0xba,0x0b,0xbc,0x3f,0xec,0x8c,0xd3,0xd7,0x60,0xee,0xf7,
    0x57,0xc8,0xe1,0xb9,0xec,0xf9,0x7b,0xf0,0x32,0xbf,0x1f,0xf1,0xc9,0x11,0xb3,0x4d,
    0x34,0x6c,0x47,0x43,0xb3,0x68,0xb8,0x1b,0xdc,0x35,0xb4,0x80,0xb9,0x86,0x36,0xd1,
    0x60,0xb6,0x56,0xee,0x38,0xab,0xdb,0x2a,0x1a,0xee,0xa5,0x76,0x4a,0x34,0xb4,0x83,
    0xbb,0x86,0x6f,0xc0,0xdc,0xcf,0x34,0x78,0xae,0x36,0xd1,0xb0,0x8c,0x4f,0x13,0x31,
    0xad,0xa2,0xe1,0x7e,0x34,0xec,0x10,0x0d,0x1d,0xe0,0xae,0xe1,0x01,0x30,0xd7,0xd0,
    0x25,0x1a,0xcc,0xd6,0x19,0xcf,0xdd,0x6a,0xdd,0x4e,0xce,0x51,0x21,0xe6,0x5b,0xad,
    0xbd,0x2c,0xdf,0xa3,0x71,0x74,0xdf,0x2e,0xe1,0x78,0x15,0xbf,0x36,0xe2,0x3a,0xe1,
    0x63,0xdf,0xec,0x23,0x7c,0xaf,0x7e,0xe6,0x1e,0x85,0x73,0x8f,0x9c,0xb9,0x3d,0xe0,
    0xef,0x70,0xe6,0xf6,0x82,0x5d,0x25,0xce,0xbe,0xe1,0x5e,0xe2,0xf6,0x11,0x67,0x3d,
    0x7d,0x02,0xdc,0xfb,0xbe,0x9f,0xd8,0x44,0xb0,0x03,0x60,0xa9,0xf8,0x9e,0x8f,0xdf,
    0x7f,0x1f,0xbe,0x07,0xc8,0xe1,0x35,0x0e,0x52,0xa3,0x5f,0x6a,0x1c,0x02,0x7f,0x36,
    0x30,0xb3,0x6f,0xf4,0x30,0x9a,0xfa,0xb8,0x33,0x0e,0xc9,0x3c,0x9e,0x22,0xfe,0x88,
    0xcc,0xe3,0x69,0x70,0x9f,0xc7,0x33,0x60,0x3e,0x8f,0x41,0x99,0x87,0xd9,0x06,0xc2,
    0x1a,0xa6,0xc7,0x03,0xe8,0xa8,0x8d,0xf5,0x57,0x6b,0x67,0x22,0xf7,0xb2,0x78,0x2f,
    0xbd,0x00,0x76,0x58,0xbe,0xf5,0x34,0x3a,0xcd,0x7e,0x94,0x38,0x5f,0xa7,0x43,0x2e,
    0xc3,0x87,0x88,0x3d,0x1a,0x73,0xad,0x89,0xba,0x5e,0x24,0xcf,0x10,0xf7,0x4d,0x4e,
    0xee,0x49,0x9b,0xfb,0x20,0x9c,0x86,0x45,0xef,0x31,0xf4,0x8e,0x88,0xde,0x97,0xc0,
    0x5d,0xef,0xcb,0x60,0xae,0x77,0x4c,0xf4,0x9a,0x6d,0xd4,0x7e,0x2b,0x91,0x7b,0x54,
    0xf4,0xbe,0x22,0x7a,0x2f,0x93,0xeb,0x55,0xf0,0x2d,0x70,0xf2,0xb8,0x31,0xce,0xa2,
    0xf9,0xbc,0x46,0xcd,0x61,0xfc,0x47,0xa9,0x5b,0x94,0xba,0xe6,0x33,0x1e,0x56,0x91,
    0xf8,0x71,0xa9,0xfb,0xc6,0x7f,0xf4,0xf9,0xcd,0x9b,0xf4,0xf9,0x04,0x71,0xbe,0xce,
    0xd0,0xe7,0x93,0xc4,0x9e,0x90,0x3e,0xbf,0x45,0x9e,0x93,0xff,0xd3,0x67,0xe7,0x54,
    0x44,0x93,0xc5,0xfc,0x44,0xcc,0x18,0xf1,0xe3,0x25,0x33,0x19,0x14,0xdf,0x15,0x66,
    0x39,0x40,0x5c,0x51,0xe6,0x75,0x9a,0x79,0x9d,0x92,0x79,0xbd,0x07,0xee,0xf3,0x3a,
    0x03,0xe6,0xf3,0x9a,0x94,0xbe,0x99,0x6d,0x22,0xac,0xb3,0xd4,0x9d,0x10,0x5d,0xef,
    0x53,0x7b,0x05,0x5d,0x05,0x7a,0xe4,0xba,0x26,0x89,0x39,0x2b,0x7c,0x3e,0x80,0xcf,
    0x39,0xe1,0xf3,0x21,0xb8,0xf3,0xf9,0x08,0xcc,0xf9,0x4c,0x0b,0x1f,0xb3,0x4d,0x85,
    0x35,0x43,0xee,0x29,0x99,0xe3,0x79,0xb8,0x64,0xb8,0x73,0x8d,0xe3,0xb7,0x82,0xfb,
    0x7d,0x36,0x4d,0xec,0x8c,0xdc,0x03,0x1f,0xc3,0xeb,0x82,0xdc,0x03,0x9f,0x80,0x2f,
    0x73,0xaf,0x7c,0x0a,0xd6,0x2f,0x5c,0x2f,0x82,0xf7,0xc0,0x75,0x4e,0xb8,0x9a,0x6d,
    0x36,0xac,0x39,0xea,0xcd,0x0a,0xaf,0xef,0xd0,0xb7,0x22,0xff,0x0b,0xdc,0x6f,0x4e,
    0x66,0x7b,0x0d,0x9f,0x19,0x62,0x66,0x85,0xcf,0x67,0xf0,0xb9,0x24,0x7c,0x3e,0x07,
    0x77,0x3e,0x0b,0xc2,0xc7,0x6c,0xf3,0x61,0x2d,0x50,0x67,0x5e,0xf8,0x7c,0x0f,0x9f,
    0x6b,0xcc,0xd0,0xf8,0xb8,0xdf,0x82,0xf0,0xb9,0x8e,0xcf,0x1c,0x31,0xf3,0xc2,0xe7,
    0x32,0x7c,0x46,0x84,0xcf,0x97,0xe0,0xce,0x67,0x49,0xf8,0x98,0x6d,0x31,0xac,0x25,
    0xea,0x2c,0x0a,0x9f,0x1f,0xf8,0x5d,0x79,0x5d,0xce,0x93,0xfb,0x2d,0x09,0x9f,0x5f,
    0xf1,0x59,0x20,0x66,0xb1,0x64,0xc6,0xd3,0xe2,0xfb,0x0b,0xe7,0x61,0x8a,0xb8,0xa5,
    0x92,0x73,0x3a,0x29,0xbe,0x3f,0x73,0xbe,0x27,0x88,0x9b,0x8e,0xbf,0xd7,0x32,0xf1,
    0x77,0x9a,0xd9,0xfe,0x09,0x53,0xeb,0x08,0xeb,0x5f,0xc9,0x3b,0xee,0xfb,0x40,0x0e,
    0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2DArray src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
