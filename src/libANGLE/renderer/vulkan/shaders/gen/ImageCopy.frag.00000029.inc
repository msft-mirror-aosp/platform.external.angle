// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000029.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000029[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xeb,0x4f,0x97,0x65,
    0x18,0xc7,0x9f,0xdf,0x19,0x21,0x40,0x0e,0x4a,0xb8,0xb4,0x3c,0xb0,0xd5,0x30,0x60,
    0x8b,0x8c,0x20,0x5d,0x64,0x64,0x1a,0xa5,0xe0,0xa1,0x82,0x17,0x1d,0x64,0x81,0x05,
    0x56,0x50,0x4b,0x97,0x6b,0x68,0xc2,0x8b,0xb4,0x82,0x39,0x66,0x2d,0x61,0xb3,0xe0,
    0x45,0xc2,0xf4,0x45,0x5b,0xaf,0x5a,0x6b,0xa5,0x33,0xed,0xf0,0xdf,0xb4,0x0e,0x5b,
    0x5b,0xf7,0x75,0xff,0x3e,0x97,0xfb,0xf6,0x5b,0x4d,0xb6,0x7b,0xcf,0x73,0x7f,0xaf,
    0xd3,0xf7,0x7b,0xdd,0xd7,0x73,0xff,0xc8,0xa4,0x37,0x17,0x92,0x24,0x95,0x94,0x27,
    0x65,0xc9,0xaf,0x49,0xf1,0xaf,0x26,0x49,0x07,0x24,0x49,0x2a,0x92,0x7c,0x7c,0xee,
    0xea,0xdd,0xdf,0xdb,0x32,0xf1,0xd6,0x50,0x4b,0xfb,0x83,0x6d,0x66,0xaf,0x4a,0x32,
    0xd1,0xcf,0x6c,0xd5,0x49,0x21,0xc9,0x86,0xa7,0xad,0xb1,0x97,0x8e,0x1c,0x35,0xbc,
    0x32,0xac,0x2b,0x61,0xad,0x0e,0x7e,0x86,0x17,0x2c,0x47,0x78,0xab,0x8c,0x39,0x2d,
    0x26,0x49,0x9e,0x4c,0x72,0x49,0x1d,0xf5,0x36,0xf3,0x74,0x2c,0x05,0x56,0x26,0x58,
    0x1a,0x6c,0xb5,0x60,0x19,0xb0,0x7a,0xc1,0xb2,0x60,0x77,0x0a,0x96,0x03,0xbb,0x4b,
    0xb0,0x3c,0xd8,0x3d,0x82,0x15,0xc0,0xb6,0x08,0x56,0x06,0x76,0xaf,0x60,0xab,0xc0,
    0xb6,0x0a,0x56,0x0e,0xd6,0x26,0x58,0x05,0x58,0xbb,0x60,0x77,0x80,0x75,0x08,0x56,
    0x09,0xf6,0x88,0x60,0x55,0x60,0x8f,0xc6,0xde,0x65,0x6e,0xf5,0xc0,0xfa,0xb8,0x33,
    0x3c,0x37,0xd1,0x33,0xdf,0x6f,0x94,0xbd,0xf5,0x7e,0x03,0xfb,0xba,0x10,0x95,0x8e,
    0xf6,0x4c,0xec,0x97,0xbd,0xaf,0x09,0x3e,0x79,0xb4,0x5b,0xaf,0x1b,0xc2,0xbe,0x40,
    0x4f,0xcc,0xbe,0x36,0x78,0x96,0x63,0x37,0x5b,0x05,0xfa,0xb2,0x11,0xcb,0x46,0x0d,
    0x29,0xf4,0x75,0xb1,0xaf,0x94,0x5c,0x55,0xf8,0x7b,0xad,0x5a,0x72,0x25,0x91,0x57,
    0xcd,0xad,0x5e,0x7b,0x4d,0x5f,0xb5,0xb7,0x59,0xee,0x63,0x1c,0xea,0x39,0x87,0x3a,
    0x38,0xd4,0xc7,0x5a,0x45,0xac,0x19,0x7d,0x6b,0xe1,0x64,0xfe,0x0d,0xd8,0x0a,0x62,
    0x5f,0xcf,0x6c,0x98,0x7d,0x03,0xf6,0xda,0x38,0x4f,0xe9,0xd8,0xcf,0x66,0xb8,0x7b,
    0xaf,0x3d,0xae,0x19,0x2e,0xbe,0xdf,0xc6,0x79,0x99,0xf6,0x1d,0xe4,0xb0,0x5e,0x35,
    0x86,0x8c,0xdd,0xec,0xd3,0xc9,0xbf,0xff,0x52,0x3c,0xad,0xf6,0x63,0xbc,0x77,0xa3,
    0xc5,0xf6,0x3b,0x4b,0x6a,0xf6,0x94,0xec,0xf7,0x30,0xff,0x16,0xff,0x14,0xdc,0xf3,
    0x70,0x78,0x86,0xf7,0x8c,0xf8,0xf7,0xc3,0xc1,0xf7,0x87,0xe8,0x85,0xf9,0xbf,0x08,
    0x47,0xf5,0x1f,0x61,0xf6,0xcd,0x7e,0x82,0x7c,0x59,0xb1,0x9f,0x2c,0xe9,0xf5,0x59,
    0xce,0xdc,0xf7,0xe7,0x99,0x09,0xdf,0x5f,0x94,0xf9,0xb9,0x4c,0xad,0x13,0xe8,0xbd,
    0xcc,0x7d,0x91,0x89,0xbd,0xcc,0x45,0x9e,0x59,0xf4,0x1a,0xf6,0x47,0x40,0xec,0x9c,
    0xb6,0x33,0x8b,0xd5,0xe4,0xde,0x1b,0x14,0x54,0x71,0x27,0x54,0xb3,0xbc,0xb7,0x47,
    0x99,0xe9,0x1a,0xec,0xdd,0x21,0x43,0x03,0xf7,0xc2,0x1a,0x66,0x63,0x3b,0x3e,0x8d,
    0xe0,0xa7,0x82,0x8f,0xed,0xd7,0x11,0xd7,0x48,0x9c,0xcd,0xc6,0xdd,0xc4,0xad,0x27,
    0xce,0x67,0xda,0xf0,0xe5,0xe0,0xb3,0x51,0xee,0x13,0x9b,0x97,0xdf,0x03,0xf3,0x26,
    0xf8,0xfc,0x15,0xfc,0xfd,0x5e,0x69,0x42,0x8f,0xbd,0xf7,0x85,0xb8,0x3c,0x77,0xcb,
    0x3a,0x7c,0xdf,0xa3,0x5f,0xf7,0x81,0xf7,0x87,0x9d,0x71,0xfa,0x0a,0xcc,0xfd,0xfe,
    0x0c,0x39,0x3c,0x97,0x3d,0x7f,0x0b,0x5e,0xe6,0xf7,0x03,0x3e,0x39,0x62,0xb6,0x88,
    0x86,0xad,0x68,0x68,0x16,0x0d,0xf7,0x83,0xbb,0x86,0x16,0x30,0xd7,0xd0,0x26,0x1a,
    0xcc,0xd6,0xca,0x1d,0x67,0x75,0x5b,0x45,0xc3,0x03,0xd4,0x4e,0x89,0x86,0x76,0x70,
    0xd7,0xf0,0x35,0x98,0xfb,0x99,0x06,0xcf,0xd5,0x26,0x1a,0xae,0xe2,0xd3,0x44,0x4c,
    0xab,0x68,0x78,0x08,0x0d,0xdb,0x44,0x43,0x07,0xb8,0x6b,0x78,0x18,0xcc,0x35,0x74,
    0x89,0x06,0xb3,0x75,0xc6,0xb9,0x2b,0xd6,0xed,0x64,0x8e,0x0a,0x31,0x5f,0xb1,0xf6,
    0x55,0xf9,0x3e,0x8d,0xa3,0xfb,0x76,0x09,0xc7,0x6b,0xf8,0xb5,0x11,0xd7,0x09,0x1f,
    0xfb,0x86,0x1f,0xe7,0xfb,0xf5,0x99,0x7b,0x02,0xce,0x3d,0x32,0x73,0xbb,0xc0,0x27,
    0x99,0xb9,0xdd,0x60,0xd7,0x88,0xb3,0x6f,0xba,0x97,0xb8,0x3d,0xc4,0x59,0x4f,0x9f,
    0x06,0xf7,0xbe,0xef,0x25,0x36,0x11,0x6c,0x1f,0x58,0x2a,0xbe,0xe7,0xe3,0x7d,0xd0,
    0x87,0xef,0x3e,0x72,0x78,0x8d,0xfd,0xd4,0xe8,0x97,0x1a,0x07,0xc0,0x5f,0x08,0xcc,
    0xec,0x3e,0x3b,0x88,0xa6,0x3e,0xee,0x90,0x03,0x72,0x1e,0xcf,0x12,0x7f,0x48,0xce,
    0xe3,0x39,0x70,0x3f,0x8f,0xe7,0xc1,0xfc,0x3c,0x06,0xe5,0x3c,0xcc,0x36,0x10,0xd6,
    0x30,0x3d,0x1e,0x40,0x47,0x6d,0xac,0x5f,0xac,0x9d,0x89,0xdc,0xcb,0xe2,0x3d,0xf5,
    0x32,0xd8,0x41,0xf9,0xd6,0xd3,0xe8,0x34,0xfb,0x61,0xe2,0x7c,0x9d,0x0e,0xb9,0x0c,
    0x1f,0x22,0xf6,0x70,0xcc,0xb5,0x2a,0xea,0x7a,0x85,0x3c,0x43,0xdc,0x37,0x39,0xb9,
    0x37,0xed,0xdc,0x07,0xe1,0x34,0x2c,0x7a,0x8f,0xa0,0x77,0x44,0xf4,0xbe,0x0a,0xee,
    0x7a,0x5f,0x03,0x73,0xbd,0x63,0xa2,0xd7,0x6c,0xa3,0xf6,0xbf,0x12,0xb9,0x47,0x45,
    0xef,0xeb,0xa2,0x77,0x85,0x5c,0x6f,0x80,0x6f,0x82,0x93,0xc7,0x8d,0x31,0x8b,0xe6,
    0xf3,0x26,0x35,0x87,0xf1,0x1f,0xa5,0xee,0x84,0xd4,0x35,0x9f,0xf1,0xb0,0x26,0x88,
    0x1f,0x97,0xba,0x6f,0xff,0x47,0x9f,0xdf,0xb9,0x4d,0x9f,0x8f,0x11,0xe7,0x6b,0x9a,
    0x3e,0x1f,0x27,0xf6,0x98,0xf4,0xf9,0x5d,0xf2,0x1c,0xff,0x9f,0x3e,0x3b,0xa7,0x09,
    0x34,0x59,0xcc,0x8f,0xc4,0x8c,0x11,0x3f,0x5e,0x72,0x26,0x83,0xe2,0x7b,0x9d,0xb3,
    0x1c,0x20,0x6e,0x22,0xfe,0xb6,0x14,0x7f,0xb7,0x26,0xb1,0xfb,0xf9,0x9d,0xe2,0xfc,
    0x4e,0xca,0xf9,0xbd,0x0f,0xee,0xe7,0x77,0x1a,0xcc,0xcf,0x6f,0x5a,0xfa,0x68,0xb6,
    0xa9,0xb0,0xce,0xc0,0x63,0x0a,0x9d,0x56,0xeb,0x03,0xea,0x4d,0xa2,0xb3,0x40,0xcf,
    0x5c,0xe7,0x34,0x31,0x67,0x84,0xcf,0x87,0xf0,0x39,0x2b,0x7c,0x3e,0x02,0x77,0x3e,
    0x1f,0x83,0x39,0x9f,0x59,0xe1,0x63,0xb6,0x99,0xb0,0xe6,0xc8,0x3d,0x23,0xf7,0xc0,
    0x39,0xb8,0x64,0xb8,0x83,0x8d,0xe3,0x37,0x82,0xfb,0xfd,0x36,0x4b,0xec,0x9c,0xdc,
    0x0b,0x9f,0xc0,0xeb,0xbc,0xdc,0x0b,0x9f,0x82,0x5f,0x27,0xff,0x67,0x60,0xfd,0xc2,
    0xf5,0x02,0x78,0x0f,0x5c,0x17,0x84,0xab,0xd9,0xe6,0xc3,0x5a,0xa0,0xde,0xbc,0xf0,
    0xfa,0x96,0x98,0x49,0xf9,0x6d,0x70,0xbf,0x05,0xce,0xda,0xfc,0x6e,0xe0,0x33,0x47,
    0xcc,0xbc,0xf0,0xf9,0x1c,0x3e,0x17,0x85,0xcf,0x17,0xe0,0xce,0x67,0x49,0xf8,0x98,
    0x6d,0x31,0xac,0x25,0xea,0x2c,0x0a,0x9f,0xef,0x88,0xb9,0xc1,0x19,0x1a,0x1f,0xf7,
    0x5b,0x12,0x3e,0x37,0xf1,0x59,0x20,0x66,0x51,0xf8,0x7c,0x09,0x9f,0x11,0xe1,0x73,
    0x09,0xdc,0xf9,0xac,0x08,0x9f,0x4b,0xd1,0x2f,0x89,0x98,0xd5,0x59,0x16,0x3e,0xdf,
    0xf3,0x3f,0xcb,0x4d,0x99,0x27,0xf7,0x5b,0x11,0x3e,0xbf,0xe0,0xb3,0x44,0xcc,0x72,
    0xc9,0x19,0xcf,0x8a,0xef,0xcf,0xcc,0xc3,0x0c,0x71,0x2b,0x25,0x73,0x3a,0x2d,0xbe,
    0x3f,0x31,0xdf,0x53,0xc4,0x59,0x9e,0x1d,0x81,0xc9,0x15,0x6c,0x7f,0x87,0x53,0xeb,
    0x08,0xeb,0x1f,0x17,0x2c,0x67,0x91,0x50,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
