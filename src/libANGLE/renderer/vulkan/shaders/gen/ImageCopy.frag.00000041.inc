// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000041.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000041[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0x7b,0x68,0xd6,0x55,
    0x18,0xc7,0x7f,0xe7,0x7d,0xdf,0x6d,0x5e,0xe7,0x65,0xde,0x26,0x92,0x9b,0x4e,0x9d,
    0xbe,0x6b,0x33,0x2f,0x69,0xce,0x59,0x63,0xe9,0x66,0xae,0xa9,0xb3,0x79,0xc9,0x4b,
    0x68,0xa6,0xd9,0x65,0xfd,0x61,0x11,0x84,0x79,0x25,0x0b,0x84,0x40,0xb0,0x52,0x30,
    0x92,0xb4,0x72,0x58,0x1b,0x92,0x92,0x64,0xa0,0x95,0x12,0x69,0xe5,0x08,0xb3,0xb0,
    0x1c,0x94,0x83,0x72,0xe8,0x9f,0x96,0x15,0x5a,0xe7,0xf9,0x9d,0xcf,0xb3,0x3d,0xbc,
    0x24,0x0d,0x0e,0xbf,0xf7,0x7c,0x9f,0xdb,0xf7,0xf9,0xfe,0x9e,0x73,0xf6,0x4b,0x26,
    0x46,0xe6,0x44,0x91,0x8b,0x7a,0x44,0xdd,0xa2,0xe5,0x2e,0x8a,0xff,0xfa,0x45,0x89,
    0x48,0x7e,0xf6,0x8c,0xb2,0xe3,0x67,0x75,0xed,0x82,0xda,0xd2,0xf5,0xcf,0xae,0x2e,
    0x9d,0x34,0x79,0xbc,0xd8,0x73,0xa3,0x64,0xec,0x27,0xb6,0x3e,0x51,0x4e,0x94,0xf2,
    0x4f,0x59,0x4f,0xaf,0x5c,0xd7,0x28,0xf8,0x68,0xbf,0xae,0xf9,0xd5,0xd7,0xfb,0x09,
    0x9e,0x23,0x39,0xfc,0xaf,0xd1,0x71,0x4e,0x89,0x89,0xa2,0x9a,0x28,0x2b,0x2a,0x09,
    0xe5,0xa2,0x91,0x3c,0x15,0x73,0x60,0xdd,0x0c,0x96,0x00,0xeb,0x6b,0xb0,0x24,0xd8,
    0x00,0x83,0xa5,0xc0,0x86,0x18,0x2c,0x0b,0x6c,0x98,0xc1,0xb2,0xc1,0x0a,0x0c,0x96,
    0x03,0x56,0x64,0xb0,0x6e,0x60,0xc5,0x06,0xeb,0x0e,0x56,0x62,0xb0,0x1e,0x60,0xe3,
    0x0d,0xd6,0x13,0x6c,0x92,0xc1,0x7a,0x81,0x4d,0x35,0x58,0x6f,0xb0,0xe9,0x06,0xcb,
    0x05,0xbb,0x2f,0xd6,0x2e,0xd9,0xa9,0x81,0xe8,0xb8,0xce,0x3f,0x47,0xa0,0x99,0xee,
    0x0b,0xcd,0x5e,0xb4,0xbf,0x83,0x7d,0x9e,0x8f,0x4a,0xc4,0xf6,0x64,0xac,0x97,0xfc,
    0x1e,0xe4,0x7f,0x65,0xd3,0x7b,0xda,0xfb,0x67,0xc3,0x61,0x58,0xe9,0x83,0xe5,0x03,
    0xbc,0x47,0xae,0xc1,0xf3,0xfc,0xaa,0x3f,0x56,0x57,0xa9,0x7b,0xd1,0xb5,0xa1,0xe1,
    0xbb,0x19,0xba,0x1f,0xea,0x57,0x45,0x8f,0x97,0xef,0xd5,0xbd,0x68,0xdc,0x5c,0xbd,
    0xb2,0x62,0xa0,0xdf,0x17,0x50,0x43,0xde,0xe7,0x60,0xbf,0x2f,0x64,0x9f,0x60,0x5f,
    0xc4,0x7b,0x48,0xc5,0x78,0x2a,0x1a,0x85,0xaf,0xe0,0xe5,0xec,0x47,0x9b,0xf8,0x31,
    0xf8,0x4b,0xbc,0xe4,0x4f,0x93,0x2f,0x8a,0xfb,0xed,0x17,0x6b,0x54,0xc8,0x2a,0x30,
    0x2b,0xfd,0x3f,0xab,0xa0,0xf3,0x99,0x8a,0xee,0xe4,0xfd,0x96,0xc0,0x41,0xf6,0xa5,
    0x60,0x69,0x7a,0x2a,0x83,0x93,0xf8,0x8f,0xc7,0x56,0x68,0xec,0x77,0x33,0x73,0x62,
    0x9f,0xd2,0x19,0x1b,0xec,0xf2,0x9c,0x06,0x67,0xf5,0xaf,0xa2,0x2f,0xdd,0xd7,0xf1,
    0xfe,0x55,0xd3,0xc5,0xf8,0x97,0xf8,0x09,0x15,0x6d,0x96,0x80,0xd9,0xa5,0xb1,0x4b,
    0x33,0x72,0xaf,0x32,0xfa,0x3e,0x0a,0x17,0xc1,0xf3,0xfd,0xaf,0xb5,0xd4,0xe5,0xd8,
    0x77,0x9e,0x69,0xdd,0x4b,0xcc,0xe3,0xfc,0x5e,0x8b,0x1e,0xb2,0x5f,0x97,0x51,0x63,
    0x23,0xb3,0xae,0xfb,0x5d,0x9c,0x25,0x79,0x67,0x6f,0x52,0x23,0x69,0xec,0x07,0x38,
    0x57,0xda,0xdf,0xb1,0x38,0xdb,0xa6,0x2a,0xf1,0x3f,0x0e,0xbf,0x94,0xf1,0x3f,0x99,
    0xa1,0xff,0x59,0xce,0x9b,0xee,0x2f,0x30,0xbf,0xba,0xbf,0xc8,0x8c,0x08,0xff,0xab,
    0xd4,0x3e,0x0e,0xff,0xab,0xdc,0x4d,0xc9,0xf8,0x3d,0x65,0xc5,0x7e,0x29,0xfa,0x11,
    0xec,0x86,0x47,0xe4,0xdd,0x55,0x30,0x9f,0xc5,0xcc,0xe0,0x5c,0xdf,0x91,0xcc,0xdf,
    0x58,0xb0,0x62,0xa3,0x57,0x23,0xb3,0x3d,0x0e,0x7b,0xa5,0xcf,0x20,0x73,0x71,0x17,
    0xb3,0x53,0x46,0x3e,0xf1,0x99,0x00,0xbe,0xd5,0xfb,0xc8,0x7e,0x22,0x71,0x13,0x88,
    0x9b,0xc2,0xdd,0x50,0xca,0x1c,0x55,0x30,0x33,0xf7,0x80,0x1f,0xf2,0x3e,0xb9,0x71,
    0x2f,0x01,0x93,0x59,0xfa,0xc3,0x33,0xaf,0x80,0xcf,0x5f,0xde,0xbf,0x9c,0xbb,0xa4,
    0x82,0x7e,0xe4,0xf7,0x7c,0x1f,0x57,0xc0,0x7d,0x32,0x11,0xdf,0x8d,0xe8,0x55,0x09,
    0x5e,0xef,0xdf,0x86,0x70,0x2a,0x73,0x01,0x53,0xbf,0x3f,0x7d,0x0e,0xcd,0x25,0xcf,
    0xeb,0x5e,0x0b,0xf1,0xab,0x71,0xc1,0x27,0x8b,0x98,0xe9,0xa6,0x87,0xfb,0xe9,0xa1,
    0xca,0xf4,0x30,0x13,0x5c,0x7b,0x98,0x05,0xa6,0x3d,0xd4,0x98,0x1e,0x66,0xc5,0x77,
    0x59,0x14,0x63,0x52,0xb7,0xda,0xf4,0x30,0x87,0xda,0xce,0xf4,0x50,0x0b,0xae,0x3d,
    0x4c,0x70,0x01,0x53,0x3f,0xe9,0x41,0x73,0xd5,0x98,0x1e,0x66,0xbb,0xe0,0x53,0x41,
    0x4c,0xb5,0xe9,0x61,0x2e,0x3d,0xd4,0x99,0x1e,0xe6,0x81,0x6b,0x0f,0xf3,0xc1,0xb4,
    0x87,0x05,0xa6,0x87,0xf9,0x31,0x9f,0x28,0xc6,0xa4,0x6e,0x3d,0x73,0x24,0x75,0x1b,
    0xa8,0x3d,0xdb,0x75,0x9d,0x37,0xe1,0xa8,0xbe,0x0b,0x0c,0xc7,0x65,0xf8,0xd5,0x10,
    0x57,0x8f,0xef,0x32,0x7c,0x97,0xe1,0x2b,0xf3,0x3a,0xc7,0x85,0xfb,0x41,0xe2,0x9f,
    0xf3,0x6b,0x39,0x36,0xd1,0xe8,0x01,0x17,0xee,0x07,0xb1,0x3d,0x8f,0x4d,0x7a,0x95,
    0x7b,0x61,0x35,0xbd,0xae,0xa2,0x57,0xf1,0x7f,0x0c,0xfc,0x30,0xbd,0xae,0x21,0x87,
    0xe0,0xbf,0x7b,0x9f,0x15,0xe4,0xd0,0x7e,0xd7,0xb0,0x5f,0x01,0xaf,0xe5,0xe4,0x92,
    0xbb,0xe3,0x09,0xee,0x0d,0x3d,0x1b,0x4f,0x52,0x6f,0xa9,0x39,0x1b,0x4f,0x81,0x6f,
    0xe6,0x6c,0x34,0x82,0x49,0xff,0x8f,0xd0,0xdf,0x7a,0x72,0x35,0x32,0xb3,0xc2,0x67,
    0x8b,0xf7,0x2f,0xa2,0x5f,0xe9,0x7f,0x3d,0x39,0x0a,0xe8,0x53,0x7c,0xca,0x32,0x34,
    0x13,0x8e,0xcf,0x70,0xff,0xbc,0x40,0xaf,0xf3,0xa8,0xb1,0x01,0xcc,0xae,0x57,0xa8,
    0xf1,0x22,0x35,0x36,0x98,0x39,0xd9,0x44,0x2f,0x1b,0xcd,0x9c,0x6c,0x06,0xd7,0x39,
    0xd9,0x02,0xa6,0x73,0xb2,0xcd,0xe8,0xb6,0x25,0xbe,0x0f,0xa2,0x18,0x13,0x6e,0x5b,
    0x99,0x75,0xe1,0xb6,0x9d,0x9a,0x11,0x71,0x39,0x0c,0xcb,0xdf,0xfe,0xf7,0xb4,0xf8,
    0x19,0x62,0xe4,0xf9,0x09,0xb5,0x6e,0x12,0xd7,0x9b,0x98,0x6c,0xd7,0x55,0x4b,0x6c,
    0xb7,0xe4,0xde,0x72,0x21,0x4e,0x9e,0xbd,0x7c,0xdf,0xf1,0x1d,0xcd,0x2c,0x0e,0x25,
    0x5e,0xfe,0xd7,0xbf,0x04,0x8f,0x94,0x0b,0xf6,0xa1,0x31,0xcf,0x80,0x65,0xb9,0x80,
    0x0f,0x43,0xdb,0x1c,0x72,0xde,0x32,0x71,0x92,0x70,0x3b,0xdf,0x11,0xd6,0x47,0x38,
    0xfd,0xe3,0x8d,0x37,0xc0,0xae,0xc3,0xa1,0xd6,0x85,0xbc,0x8e,0x7f,0x44,0xb7,0x38,
    0xd3,0xa2,0xfd,0x64,0x17,0xec,0xaa,0x87,0x6a,0xb4,0x03,0x8d,0x1c,0xfd,0xe6,0x67,
    0x68,0xd4,0x9b,0x9a,0xf2,0x54,0x8d,0xfa,0xb8,0x10,0xa7,0x1a,0x0d,0x31,0x1a,0x89,
    0xad,0xaf,0x5f,0x79,0xc4,0xe5,0x19,0x8d,0x06,0x1a,0x8d,0x76,0x64,0x68,0x34,0xc8,
    0x05,0xbb,0xd5,0x68,0xb0,0x0b,0xb8,0x6a,0x94,0x4f,0x4e,0xc9,0xaf,0x71,0xfd,0xe1,
    0x92,0x97,0xe1,0x33,0xc4,0x68,0x94,0x6f,0x34,0xaa,0x73,0x21,0xaf,0xf0,0xea,0x0f,
    0x57,0xd5,0x68,0xaa,0x0b,0xf6,0xc9,0xf0,0x54,0x8d,0x76,0xa2,0x51,0x82,0x7e,0xd3,
    0x19,0x1a,0x0d,0xa7,0xe6,0x70,0xa3,0x51,0xa1,0x0b,0x71,0xaa,0xd1,0x38,0xa3,0x91,
    0xd8,0x46,0xf8,0x35,0x8a,0xb8,0x51,0x46,0xa3,0x31,0x46,0xa3,0x9d,0x19,0x1a,0x15,
    0xbb,0x60,0xb7,0x1a,0x8d,0x75,0x01,0x57,0x8d,0xd2,0xe4,0x1c,0x61,0x34,0x2a,0x82,
    0x4b,0x5e,0x86,0xcf,0x38,0xa3,0x51,0xda,0x68,0x34,0xcf,0x85,0xbc,0xc2,0xab,0x08,
    0xae,0xaa,0x51,0xb9,0x0b,0x76,0xd1,0x2a,0x41,0x3e,0x3d,0x7b,0xdb,0xcc,0x5d,0x5a,
    0xcf,0xac,0xad,0x20,0x26,0xed,0xba,0xce,0xfc,0x6b,0x9c,0xf9,0x5d,0xe6,0xcc,0xbf,
    0x0e,0xae,0x67,0xfe,0x0d,0x30,0x3d,0xf3,0x7b,0xcc,0x99,0x17,0xdb,0x6e,0xbf,0xf6,
    0x53,0x77,0xbf,0xb9,0x4f,0xde,0x21,0xf7,0x01,0x93,0xfb,0x5d,0x70,0xcd,0xfd,0x1e,
    0x98,0xe6,0x6e,0x32,0xb9,0xc5,0x76,0xd0,0xaf,0x26,0x72,0x1f,0x34,0x73,0x70,0x88,
    0xbe,0xe4,0x5b,0xe7,0x63,0x72,0xbd,0x0f,0xbe,0x18,0x2d,0x34,0xae,0x09,0x2d,0xc4,
    0xe7,0x03,0x6a,0xee,0xc7,0xff,0x20,0x75,0x5b,0x4c,0x5d,0xf1,0x69,0xf6,0xab,0x85,
    0xf8,0x66,0x53,0xf7,0xb0,0xa9,0x3b,0xd7,0x7f,0xfd,0xc9,0x77,0xe1,0x87,0x60,0xf5,
    0xae,0xeb,0x5b,0x2a,0x11,0xdf,0xc3,0xd9,0xb1,0xfd,0x08,0x71,0xba,0xe4,0x0e,0x16,
    0xfc,0x28,0xb1,0x47,0xe2,0x5c,0xdd,0xe3,0x77,0xf5,0x11,0xb9,0x8e,0xf2,0x3d,0x97,
    0x65,0xbe,0x3b,0xa5,0x27,0xe5,0xd4,0x62,0xde,0x6f,0x03,0xb5,0x9b,0x88,0x6f,0xc6,
    0x77,0x0f,0xbe,0xbb,0x0d,0xff,0xbd,0xff,0xc1,0xff,0xad,0xdb,0xf0,0x7f,0x15,0x9e,
    0xfb,0xf0,0xd9,0x6b,0x78,0xbe,0x4d,0xcc,0xbe,0xdb,0xf0,0xd4,0xda,0x7b,0x0c,0xcf,
    0x87,0x5c,0xe0,0xda,0x42,0xfc,0x6e,0x6a,0x14,0xc5,0xef,0x30,0xd8,0x8f,0xf1,0x1d,
    0x2a,0xdf,0xb9,0x27,0xc0,0x75,0x9e,0x3e,0x65,0x9e,0x4e,0x9a,0x79,0xfa,0x0c,0x5c,
    0xe7,0xe9,0x73,0x30,0x9d,0xa7,0xd3,0xe6,0xbd,0x8a,0xed,0x94,0x5f,0x67,0xe0,0x76,
    0xc6,0xe4,0xfe,0x8a,0xdc,0x67,0x4d,0xee,0xaf,0xc1,0x35,0xf7,0x37,0x60,0x9a,0xbb,
    0xd5,0xe4,0x16,0xdb,0x39,0xbf,0xce,0x93,0xfb,0xbc,0xf9,0x26,0xf9,0x9e,0xdc,0x17,
    0xcc,0x37,0xc9,0x0f,0xe0,0x5f,0xf0,0xff,0xfd,0x47,0xb0,0x8b,0xa6,0xde,0x4f,0xe0,
    0x4b,0xa9,0xd7,0x66,0xea,0x89,0xed,0x92,0x5f,0x6d,0xd4,0xbb,0xc4,0xff,0x17,0xd1,
    0xad,0x8a,0xef,0xa3,0x13,0x51,0xd7,0x37,0xa3,0xfa,0xb5,0xf1,0x3e,0xc4,0x6f,0xa1,
    0x0b,0x3e,0xe7,0x89,0xb9,0x64,0xf8,0xfc,0x0c,0x9f,0x55,0x86,0xcf,0x2f,0xe0,0xca,
    0xa7,0xdd,0xf0,0x11,0xdb,0x65,0xbf,0xda,0xa9,0x73,0xd9,0xf0,0x99,0x09,0x9f,0x85,
    0xe6,0x9e,0x52,0xbf,0x76,0xc3,0x67,0x91,0x0b,0x3e,0x6d,0xc4,0x5c,0x36,0x7c,0x7e,
    0x85,0xcf,0x01,0xc3,0xe7,0x37,0x70,0xe5,0xd3,0x61,0xf8,0x88,0xed,0x8a,0x5f,0x1d,
    0xd4,0xb9,0x62,0xf8,0x54,0xf3,0x1d,0xb5,0xc8,0x75,0xcd,0xab,0xfa,0x75,0x18,0x3e,
    0x0f,0xbb,0xe0,0xd3,0x4e,0xcc,0x15,0x7c,0x5b,0xf1,0x3d,0x67,0xbe,0xe5,0xbf,0x45,
    0xef,0xa4,0xa9,0x53,0xe9,0xba,0xf0,0x28,0x23,0xb6,0xd5,0xd4,0x59,0xe2,0x42,0xad,
    0x0e,0x62,0xce,0xe1,0x7b,0x1a,0xdf,0x53,0x9c,0x3b,0xf1,0xfd,0x92,0x7c,0x27,0x38,
    0x77,0x39,0x9c,0xd5,0x64,0x46,0xcc,0x69,0x93,0x7f,0xb1,0x0b,0x35,0x5a,0x89,0x97,
    0x7c,0x33,0x7c,0xc4,0x35,0x6c,0x37,0xfd,0x94,0x4c,0xf5,0xeb,0x5f,0x0c,0x21,0xb0,
    0xea,0x44,0x13,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture2DMS src;
// layout(location = 0)out ivec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = vec4(0);
//     for(int i = 0;i < params . srcSampleCount;i ++)
//     {
//         srcValue += texelFetch(src, ivec2(params . srcOffset + srcSubImageCoords), i);
//     }
//     srcValue /= params . srcSampleCount;
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            ivec4 dstValue = ivec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
