// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000022.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000022[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x97,0xff,0x6b,0xd5,0x65,
    0x14,0xc7,0x3f,0xcf,0xbd,0x77,0x5f,0xdc,0x72,0x29,0x5b,0x9a,0x6b,0x8b,0x2d,0x4d,
    0xcd,0xe9,0x34,0xbf,0xe4,0x97,0xed,0x6a,0x63,0xe9,0x66,0x2e,0xcd,0x0d,0xc1,0xcc,
    0xbe,0xac,0x2c,0x5d,0x7e,0x29,0xad,0x7e,0xf1,0x87,0x92,0xcc,0x36,0x30,0x94,0x66,
    0xe5,0xc8,0x72,0x44,0x4a,0xd2,0x20,0xad,0x14,0x22,0xad,0x1c,0x84,0x59,0x94,0x03,
    0x6b,0x83,0x72,0xe8,0x5f,0x20,0x49,0x62,0x6a,0x11,0xf6,0x9c,0xcf,0xf3,0x3a,0xde,
    0xd3,0x25,0x69,0xf0,0xf0,0xf9,0x3c,0xef,0xf3,0xed,0x7d,0xce,0x73,0xce,0x73,0x3f,
    0x4b,0x26,0x46,0xe7,0x45,0x91,0x8b,0x0a,0xa2,0xfc,0xa8,0xc9,0x45,0xf1,0xdf,0xf0,
    0x28,0x11,0xc9,0x6b,0x61,0x94,0x1b,0x3f,0x1b,0x9a,0x5a,0x9a,0xaa,0x9f,0x7f,0x61,
    0x55,0xf5,0xf4,0x19,0x53,0x44,0x5e,0x14,0x25,0x63,0x3d,0x91,0xdd,0x1c,0xe5,0x45,
    0x29,0xff,0x94,0xb5,0xbe,0xb5,0x6d,0x83,0xe0,0x63,0xfd,0x3a,0xe7,0xd7,0x30,0xaf,
    0x27,0x78,0x9e,0xf8,0xf0,0x6f,0x63,0x63,0x9f,0x62,0x13,0x45,0x8d,0x51,0x4e,0x34,
    0x31,0x84,0x8b,0x46,0xf3,0x54,0xcc,0x81,0xe5,0x1b,0x2c,0x01,0x36,0xcc,0x60,0x49,
    0xb0,0x12,0x83,0xa5,0xc0,0x6e,0x35,0x58,0x0e,0x58,0x99,0xc1,0x72,0xc1,0x2a,0x0c,
    0x96,0x07,0x36,0xc6,0x60,0xf9,0x60,0xe3,0x0d,0x36,0x04,0x6c,0xa2,0xc1,0x0a,0xc0,
    0xa6,0x18,0xac,0x10,0x6c,0xba,0xc1,0x6e,0x02,0x9b,0x65,0xb0,0xa1,0x60,0xb5,0x06,
    0x2b,0x02,0xbb,0x37,0xae,0x5d,0xf2,0x7a,0x0d,0xa4,0x8e,0x2b,0xfc,0xf3,0x0e,0x6a,
    0xa6,0xfb,0x4a,0xb3,0x97,0xda,0xdf,0xce,0xbe,0xd8,0x5b,0x25,0x62,0x79,0x32,0xae,
    0x97,0xbc,0x8f,0xf0,0x6f,0xb9,0xe4,0x5e,0xe5,0xf5,0x73,0xe1,0x50,0x56,0xfd,0x40,
    0x4d,0x89,0xd7,0x28,0x32,0x78,0xb1,0x5f,0xcd,0x9f,0x2f,0xae,0xd3,0xbd,0xd4,0x75,
    0xd9,0xb2,0xfe,0xb9,0xba,0x2f,0xf5,0x2b,0x5d,0xd0,0x3e,0x4f,0xf7,0x52,0xe3,0x8f,
    0x1b,0x5a,0xd3,0xb7,0xf8,0x7d,0x05,0x31,0xe4,0x3c,0x47,0xfa,0x7d,0x25,0xfb,0x04,
    0xfb,0x31,0x9c,0x43,0x2a,0xc6,0x53,0xd1,0x9d,0xe8,0x0a,0x5e,0xc3,0x7e,0xac,0xb1,
    0x1f,0x87,0xbe,0xd8,0x8b,0xff,0x2a,0xfc,0x45,0x71,0xbe,0xc3,0xe3,0x1a,0x55,0xb2,
    0x2a,0xcc,0xaa,0xfa,0x9f,0x55,0x71,0xfd,0x99,0x8a,0x26,0x71,0xbe,0x13,0xe1,0x20,
    0xfb,0x6a,0xb0,0x2a,0x72,0x9a,0x0c,0x27,0xd1,0x9f,0x82,0xac,0xd2,0xc8,0xef,0xa1,
    0xe7,0x44,0x3e,0xf3,0xba,0x6d,0x90,0xcb,0x73,0x0e,0x9c,0x55,0xbf,0x9e,0xbc,0x54,
    0xbe,0x10,0xff,0x2a,0x5f,0x4c,0x3f,0x8c,0xf2,0x9e,0x96,0x9b,0x1a,0xd8,0x3f,0x46,
    0x37,0x8e,0xf9,0x10,0xef,0xcb,0xc9,0x41,0xf6,0x2b,0xb2,0x62,0xae,0xcc,0xda,0xb7,
    0x32,0x4f,0x62,0xff,0x04,0x9c,0x2b,0xa8,0xfb,0x53,0xbc,0x27,0x8d,0x7e,0x1b,0x1c,
    0x74,0xbf,0x9e,0x7e,0xd7,0xfd,0x56,0xe6,0x49,0xec,0x5f,0x87,0xb3,0xb5,0xdf,0xc5,
    0x6c,0x69,0xdf,0xec,0x31,0x7c,0x64,0x7f,0x20,0xde,0xbd,0x5c,0x2f,0xf6,0x3d,0xd4,
    0x2f,0x65,0xec,0x0f,0x65,0x9d,0xc9,0x31,0x66,0x50,0xf7,0x27,0xe9,0x69,0xdd,0x9f,
    0x36,0x7d,0x76,0x16,0x2e,0x3d,0xd4,0xe7,0x2c,0xf7,0x55,0x32,0x3e,0xbb,0x9c,0x38,
    0xaf,0x14,0x7c,0x04,0xbb,0xe2,0x11,0x39,0xcf,0x34,0x3d,0x3b,0x9e,0xbe,0x5c,0xe2,
    0x33,0x94,0x9e,0xbc,0x0b,0x6c,0xbc,0x39,0x8b,0x0d,0xf4,0xfb,0x04,0xe4,0x75,0xde,
    0x83,0xf4,0xca,0xdd,0xf4,0xd3,0x64,0xfc,0x89,0xce,0x54,0xf0,0x57,0xbc,0x8e,0xec,
    0xa7,0x61,0x37,0x15,0xbb,0x99,0xdc,0x17,0xd5,0xf4,0x56,0x9a,0x3e,0x99,0x0d,0xde,
    0xe3,0x75,0x8a,0xe2,0x5c,0x02,0x26,0xfd,0x75,0xd9,0x33,0x4f,0xc3,0xe7,0x4f,0xaf,
    0x5f,0xc3,0xfd,0x92,0x26,0x1f,0x79,0x5f,0xea,0xed,0x2a,0xb8,0x63,0xa6,0xa1,0xfb,
    0x12,0xf5,0xaa,0x03,0x6f,0xf6,0xa7,0x11,0xcf,0x94,0x0b,0x98,0xea,0x5d,0xf5,0x3e,
    0xd4,0x97,0x3c,0x2f,0xf9,0x5a,0x88,0xde,0x1c,0x17,0x74,0x72,0xb0,0xa9,0x35,0x39,
    0xdc,0x47,0x0e,0xf5,0x26,0x87,0xf9,0xe0,0x9a,0xc3,0x02,0x30,0xcd,0xa1,0xd1,0xe4,
    0xb0,0x20,0xbe,0xdf,0xa2,0x18,0x93,0xb8,0x0d,0x26,0x87,0x45,0xc4,0x76,0x26,0x87,
    0x26,0x70,0xcd,0x61,0x8c,0x0b,0x98,0xea,0x49,0x0e,0xea,0xab,0xd1,0xe4,0x50,0xe3,
    0x82,0x4e,0x1a,0x9b,0x06,0x93,0xc3,0x12,0x72,0x58,0x6c,0x72,0x78,0x10,0x5c,0x73,
    0x58,0x0a,0xa6,0x39,0xb4,0x98,0x1c,0x96,0xc6,0x7c,0xa2,0x18,0x93,0xb8,0xcd,0xf4,
    0x91,0xc4,0x5d,0x46,0xec,0x1a,0x97,0x99,0x67,0xe1,0xa8,0xba,0x2d,0x86,0x63,0x2d,
    0x7a,0x8d,0xd8,0x35,0xc3,0x47,0x66,0xfe,0x61,0xe6,0x5d,0x7b,0xee,0x11,0x38,0xaf,
    0x34,0x3d,0xf7,0x28,0xf8,0x16,0x7a,0xee,0x71,0xb0,0x5a,0x17,0xec,0xe4,0x0e,0x78,
    0x12,0xbb,0x56,0xec,0xa4,0xa6,0xab,0xc0,0xb5,0xee,0x4f,0x63,0x1b,0x19,0x6c,0x35,
    0x98,0x8b,0xeb,0x90,0x1b,0xdf,0x1f,0x6b,0xd0,0x5d,0x8d,0x0f,0x8d,0xf1,0x0c,0x31,
    0xda,0x4c,0x8c,0xb5,0xe0,0x8f,0xf9,0x5c,0x65,0xde,0xd6,0x91,0xd3,0x1a,0xee,0x9c,
    0xb5,0xe6,0x3c,0x36,0x60,0xbf,0xde,0x9c,0xc7,0xb3,0xe0,0x7a,0x1e,0xcf,0x81,0xe9,
    0x79,0x6c,0x32,0xe7,0x21,0xb2,0x8d,0x7e,0x6d,0xa2,0xc6,0x1b,0xc9,0x43,0xee,0xa0,
    0x17,0x89,0x1d,0x61,0x77,0x95,0xf7,0xbf,0xfc,0xbb,0xf8,0x3a,0x8f,0xcd,0xf9,0xf8,
    0xfe,0x09,0xb1,0x7e,0xc3,0x6e,0x28,0x36,0x57,0x4c,0x2c,0x91,0x5d,0xf0,0xeb,0x22,
    0x76,0x17,0xe3,0xef,0x81,0xbc,0x38,0xd6,0x25,0xea,0x55,0x8a,0xbd,0xfc,0xce,0x6e,
    0x83,0xc7,0x1f,0xc8,0x4b,0xe3,0x7b,0x35,0x60,0x97,0xc1,0xcb,0xe8,0x91,0xab,0xf8,
    0xbc,0x60,0xec,0x7e,0xc7,0x57,0x71,0x96,0x8e,0x70,0xba,0xe6,0xa3,0x5d,0x01,0xbb,
    0x04,0x87,0xb4,0x0b,0x7e,0x2f,0x62,0x7b,0x81,0xd9,0x91,0x33,0x18,0xe7,0x82,0x7c,
    0x9d,0x39,0x6b,0xb1,0xd9,0x4c,0x8d,0x1c,0xf9,0x16,0xba,0x7f,0xd7,0xe8,0x1a,0x31,
    0xaf,0x99,0x1a,0x39,0x17,0xec,0xb4,0x46,0x05,0x2e,0x53,0x23,0x91,0x25,0xfc,0xca,
    0x71,0xdc,0xbb,0x2e,0x53,0xa3,0x3c,0x97,0xa9,0xd1,0xe6,0xac,0x1a,0xe5,0xbb,0x20,
    0xb7,0x35,0x1a,0xe2,0x02,0xae,0x35,0x2a,0xc4,0xa7,0xf8,0x57,0xbb,0x14,0x5c,0x8a,
    0xb3,0x74,0x84,0x93,0xd6,0x48,0x30,0xad,0xd1,0x3c,0x17,0xfc,0x0a,0xaf,0x14,0x5c,
    0xb5,0x46,0x13,0x5c,0x90,0x8f,0x83,0xa7,0xd6,0x68,0x0b,0x35,0x4a,0x90,0x6f,0x79,
    0x56,0x8d,0x86,0x13,0x53,0x9e,0x5a,0xa3,0x62,0x17,0xec,0xb4,0x46,0x65,0xa6,0x46,
    0x22,0x2b,0xf1,0x6b,0x24,0x76,0x23,0x4d,0x8d,0x46,0x99,0x1a,0x6d,0xc9,0xaa,0x51,
    0xa9,0x0b,0x72,0x5b,0xa3,0xdb,0x5c,0xc0,0xb5,0x46,0xe5,0xf8,0x2c,0x31,0x35,0x1a,
    0x01,0x97,0xe2,0x2c,0x9d,0x32,0x53,0xa3,0x72,0x53,0xa3,0x3a,0x17,0xfc,0x0a,0xaf,
    0x11,0x70,0xd5,0x1a,0x4d,0x72,0x41,0x2e,0xb5,0x4a,0xe0,0x4f,0x67,0x6f,0x13,0xbd,
    0x28,0x7a,0xf5,0xf4,0x5a,0x0b,0x36,0xe5,0x2e,0x33,0xf3,0xaf,0x32,0xf3,0x5b,0xcd,
    0xcc,0x6f,0x03,0xd7,0x99,0x7f,0x0d,0x4c,0x67,0xbe,0xc3,0xcc,0xa1,0xc8,0xda,0xfd,
    0xea,0x24,0x6e,0xa7,0xb9,0x4f,0xde,0xc4,0xf7,0x2e,0xe3,0xfb,0x2d,0x70,0xf5,0xfd,
    0x36,0x98,0xfa,0xee,0x32,0xbe,0x45,0xb6,0xdb,0xaf,0x2e,0x7c,0xef,0x36,0x7d,0xf0,
    0x0e,0x79,0xc9,0x37,0xc5,0x17,0xf8,0x7a,0x17,0x7c,0x0f,0xb5,0x50,0xbb,0x2e,0x6a,
    0x21,0x3a,0xef,0x11,0xb3,0x13,0xfd,0xdd,0xc4,0xed,0x36,0x71,0x45,0x67,0xaf,0x5f,
    0xdd,0xd8,0xef,0x35,0x71,0xdf,0x37,0x71,0x97,0xf8,0xaf,0x2e,0xf9,0x1e,0xfb,0x00,
    0xac,0xde,0x65,0xbe,0x59,0x12,0xdc,0xd7,0x22,0xdf,0x87,0x9d,0xae,0x0e,0xef,0x4b,
    0xf0,0xfd,0xd8,0xee,0x8b,0x7d,0x0d,0x89,0xcf,0xea,0x43,0x7c,0xed,0xe7,0xbb,0x29,
    0xc7,0x7c,0xef,0x49,0x4e,0xca,0xa9,0xdb,0x9c,0xef,0x02,0x62,0x77,0x61,0xbf,0x17,
    0xdd,0x0e,0x74,0xdb,0x0d,0xff,0xed,0xff,0xc1,0x7f,0xc7,0x0d,0xf8,0xef,0x80,0xe7,
    0x4e,0x74,0xb6,0x1b,0x9e,0x6f,0x60,0xb3,0xf3,0x06,0x3c,0x35,0x76,0x87,0xe1,0x39,
    0xdf,0x05,0xae,0xdd,0xd8,0xb7,0x13,0x43,0x64,0x1f,0x21,0x3f,0x10,0xff,0xfe,0x84,
    0xef,0xd4,0x83,0xe0,0xda,0x4f,0x9f,0xd0,0x4f,0x87,0x4c,0x3f,0x7d,0x0a,0xae,0xfd,
    0xf4,0x19,0x98,0xf6,0xd3,0x11,0x73,0xae,0x22,0x3b,0xec,0xd7,0x51,0xb8,0x1d,0x35,
    0xbe,0xbf,0xc4,0xf7,0x31,0xe3,0xfb,0x2b,0x70,0xf5,0xfd,0x35,0x98,0xfa,0xee,0x35,
    0xbe,0x45,0x76,0xdc,0xaf,0x13,0xf8,0x3e,0x61,0x7e,0x97,0xbf,0xc3,0xf7,0x49,0xf3,
    0xbb,0xfc,0x3d,0xf8,0xb7,0xfc,0xce,0xff,0x00,0xd6,0x66,0xe2,0xfd,0x08,0xbe,0x92,
    0x78,0x7d,0x26,0x9e,0xc8,0x4e,0xf9,0xd5,0x47,0xbc,0x53,0xfc,0xbe,0x48,0xdd,0x66,
    0xb8,0xc0,0xf1,0x60,0x94,0xf9,0x36,0x53,0xbd,0x3e,0xce,0x43,0xf4,0x1a,0x5c,0xd0,
    0x39,0x81,0xcd,0x29,0xc3,0xe7,0x27,0xf8,0x9c,0x36,0x7c,0x7e,0x06,0x57,0x3e,0x03,
    0x86,0x8f,0xc8,0xfa,0xfd,0x1a,0x20,0x4e,0xbf,0xe1,0x33,0x13,0x3e,0x0d,0xe6,0x9e,
    0x52,0xbd,0x01,0xc3,0xa7,0xd1,0x05,0x9d,0x3e,0x6c,0xfa,0x0d,0x9f,0x5f,0xe0,0xb3,
    0xcb,0xf0,0xf9,0x15,0x5c,0xf9,0x0c,0x1a,0x3e,0x22,0x3b,0xe3,0xd7,0x20,0x71,0xce,
    0x18,0x3e,0xb3,0x5d,0xf8,0xbf,0xb0,0xd1,0x65,0xfa,0x55,0xf5,0x06,0x0d,0x9f,0x45,
    0x2e,0xe8,0x0c,0x60,0x73,0x06,0xdd,0x5e,0x74,0x8f,0x33,0x57,0xd2,0x2b,0xdf,0x50,
    0xef,0xa4,0x89,0x33,0xcd,0x65,0xf0,0x28,0xcb,0xb6,0xd7,0xc4,0xb9,0xdf,0x85,0x58,
    0x83,0xd8,0x1c,0x47,0xf7,0x08,0xba,0x87,0x99,0xbb,0x9e,0xf8,0xae,0x0b,0xfe,0x0e,
    0x32,0x77,0x79,0xcc,0x6a,0x32,0xcb,0xe6,0x88,0xf1,0xbf,0xd0,0x85,0x18,0xbd,0xd8,
    0x8b,0xbf,0xb9,0xde,0xe2,0x1c,0xb2,0xbf,0x7d,0x97,0xcc,0xf2,0xeb,0x1f,0x12,0x42,
    0xfb,0xa7,0xc0,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform texture3D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float linearToSRGB(float linear)
// {
//
//     if(linear <= 0.0031308)
//     {
//         return linear * 12.92;
//     }
//     else
//     {
//         return pow(linear,(1.0f / 2.4f))* 1.055f - 0.055f;
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           vec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . srcIsSRGB)
//     {
//
//         srcValue . r = linearToSRGB(srcValue . r);
//         srcValue . g = linearToSRGB(srcValue . g);
//         srcValue . b = linearToSRGB(srcValue . b);
//     }
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//     srcValue *= 255.0;
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
