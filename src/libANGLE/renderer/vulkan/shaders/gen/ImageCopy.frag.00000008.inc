// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000008.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000008[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0xdb,0x6f,0x55,0x55,
    0x10,0xc6,0xd7,0x3a,0xa7,0x3d,0x2d,0xb7,0x42,0x91,0x4b,0x31,0x44,0x5b,0xa1,0x58,
    0x6d,0x2d,0x15,0x90,0x02,0xed,0xe1,0x22,0xd8,0x56,0x69,0x40,0x20,0x9a,0x20,0x22,
    0x29,0x72,0x11,0xa9,0x78,0x01,0x22,0xa8,0x34,0xc5,0x16,0x23,0xc4,0x07,0x4d,0x44,
    0x85,0x44,0x1f,0x7c,0xd1,0x04,0x04,0x1e,0x04,0x95,0x6a,0x08,0x1a,0x01,0x13,0x94,
    0x26,0x4a,0x0d,0xfc,0x01,0xc6,0x48,0x24,0x5e,0x20,0x22,0xda,0xe0,0x9a,0xbd,0x7e,
    0xd3,0x33,0x36,0x1a,0x9a,0xac,0xec,0xbd,0xbe,0x99,0x6f,0x2e,0xdf,0x9e,0xbd,0xf6,
    0x81,0x74,0x6a,0x5c,0x81,0x73,0xde,0x0d,0x74,0x85,0xae,0xd9,0xbb,0xe4,0xaf,0xd8,
    0xa5,0x9c,0xdc,0x0e,0x72,0x99,0xe4,0xda,0xd8,0xbc,0xa4,0xb9,0x7a,0xe3,0xa6,0x55,
    0xd5,0x53,0xee,0xaa,0x11,0x7b,0x91,0x4b,0x27,0x7e,0x62,0x1b,0xea,0x0a,0x5c,0x5e,
    0xb8,0xca,0x7a,0xa2,0x65,0xdd,0x06,0xc1,0x27,0x84,0x75,0x3e,0xac,0x61,0xc1,0x4f,
    0xf0,0x02,0x89,0x11,0xee,0x26,0x24,0x31,0x85,0xe3,0x5c,0x93,0xcb,0x77,0x55,0x31,
    0x9d,0x1b,0xc7,0x55,0x31,0x0f,0x56,0x68,0xb0,0x14,0xd8,0x30,0x83,0xa5,0xc1,0x46,
    0x18,0x2c,0x0f,0xac,0xc4,0x60,0xf9,0x60,0x63,0x0d,0x96,0x01,0x2b,0x35,0x58,0x01,
    0xd8,0x78,0x83,0x15,0x82,0x55,0x18,0x6c,0x00,0x58,0x95,0xc1,0x06,0x82,0xd5,0x18,
    0x6c,0x10,0xd8,0x14,0x83,0x0d,0x06,0x9b,0x66,0xb0,0x21,0x60,0xf5,0x06,0x2b,0x02,
    0x9b,0x9d,0x68,0x97,0xee,0xd3,0x40,0x74,0x5c,0x16,0xae,0xb7,0xa0,0x99,0xee,0xcb,
    0xcc,0x5e,0xb4,0xbf,0x89,0xfd,0x0d,0x81,0x95,0x4a,0xec,0xe9,0x44,0x2f,0xb9,0x1f,
    0x15,0xee,0x32,0xf4,0x5e,0x19,0xfc,0x33,0xd4,0xf0,0xc3,0x81,0xf2,0xec,0x88,0xe0,
    0x51,0x64,0x70,0xd1,0xf1,0x40,0x63,0x4b,0x56,0xf7,0xa2,0xe1,0xde,0x3d,0x63,0x66,
    0x8f,0x0c,0xfb,0x52,0x62,0xc8,0xf3,0x1a,0x1d,0xf6,0x65,0xec,0x53,0xec,0xc7,0xa3,
    0x73,0x5e,0x82,0xe7,0xb9,0x72,0x7c,0x05,0xaf,0x63,0x3f,0xc1,0xf0,0x6f,0xc5,0x5f,
    0xf8,0x12,0xbf,0x92,0x78,0x2e,0xe9,0xa7,0x38,0xd1,0xa0,0x8c,0x55,0x6a,0x56,0xe5,
    0x75,0x56,0x69,0xdf,0x35,0xcf,0xdd,0xc1,0xf3,0xab,0xa2,0x06,0xd9,0x57,0x83,0x55,
    0xd2,0xd3,0x44,0x6a,0x12,0xff,0x1a,0x6c,0x65,0xc6,0x3e,0x95,0x99,0x12,0x7b,0x6d,
    0x1f,0x37,0xda,0xe5,0x3a,0x83,0x9a,0xd5,0x7f,0x2e,0x7d,0xe9,0x7e,0x01,0xcf,0x57,
    0x7a,0x7e,0x10,0xae,0x68,0x34,0x26,0x44,0x5a,0xca,0x9e,0x57,0xb1,0xef,0x4f,0xf7,
    0x92,0xf3,0x21,0xee,0x97,0xd2,0x83,0xec,0x97,0xf5,0xcb,0xb9,0xbc,0xdf,0x7e,0x25,
    0xba,0x0a,0xff,0x51,0x6a,0x2e,0x35,0xf6,0xb5,0xcc,0xbf,0xd4,0xf4,0x34,0x35,0xa4,
    0x8d,0x7d,0x2b,0xef,0x82,0xee,0x77,0x33,0xcb,0xba,0xdf,0xd7,0x4f,0xc3,0x23,0xbc,
    0x13,0xba,0x3f,0xce,0x8c,0xe9,0x1c,0x7d,0xd5,0xaf,0xbe,0xd3,0x68,0xa0,0xf6,0xef,
    0x13,0x6b,0xfb,0x2c,0xa9,0xf7,0x1c,0xb5,0xe8,0xdc,0x9c,0xe3,0x7c,0x49,0x1b,0xff,
    0xa9,0x41,0xa0,0xed,0xed,0xed,0x75,0x55,0xa1,0x0b,0xf1,0xab,0xf5,0x11,0xb3,0x4b,
    0x7d,0xa7,0x85,0xfb,0x27,0xdf,0x7b,0x66,0x96,0xee,0xa7,0x87,0xfd,0x6b,0x1d,0xef,
    0x64,0xa7,0x86,0xa7,0x9a,0xa2,0x0e,0x47,0xfc,0x2b,0x01,0x91,0x67,0x9d,0x65,0x9e,
    0x2b,0x98,0xd9,0x85,0x21,0x8f,0xcc,0xeb,0x6d,0x60,0x15,0xe6,0x39,0x6d,0xe0,0x5d,
    0xb8,0x1d,0xfb,0x9c,0x10,0x41,0xe6,0xe8,0x4e,0x66,0x6d,0x22,0xf1,0xc4,0x67,0x12,
    0xf8,0x8b,0xc1,0x47,0xf6,0x93,0xe1,0x4d,0x82,0x57,0xcb,0x59,0x51,0xcd,0xdc,0x65,
    0x99,0xb1,0xe9,0xe0,0xfb,0x82,0x4f,0x51,0xa2,0x4b,0xc4,0x64,0xf6,0xfe,0x08,0x95,
    0x67,0xa9,0xe7,0x6a,0xf0,0xaf,0xe3,0x6c,0xc9,0xd2,0x8f,0xdc,0x2f,0x0a,0xbc,0x52,
    0xce,0x97,0xc9,0xf8,0xb6,0xf1,0x2c,0xe6,0x80,0x2f,0x0e,0xea,0x48,0x4d,0x63,0x7d,
    0xc4,0xd4,0xef,0xcf,0x10,0x43,0x63,0xc9,0xf5,0x72,0xd0,0x42,0xfc,0x66,0xf8,0xe8,
    0x93,0x0f,0xa7,0xde,0xf4,0x30,0x8f,0x1e,0xe6,0x9a,0x1e,0xee,0x01,0xd7,0x1e,0x1a,
    0xc0,0xb4,0x87,0x26,0xd3,0x43,0x43,0x72,0xb6,0xb9,0x04,0x93,0xbc,0x8d,0xa6,0x87,
    0xf9,0xe4,0xf6,0xa6,0x87,0x66,0x70,0xed,0xe1,0x66,0x1f,0x31,0xf5,0x93,0x1e,0x34,
    0x56,0x93,0xe9,0xa1,0xce,0x47,0x9f,0x2c,0x9c,0x46,0xd3,0xc3,0x42,0x7a,0x58,0x60,
    0x7a,0xb8,0x1f,0x5c,0x7b,0x58,0x04,0xa6,0x3d,0x2c,0x31,0x3d,0x2c,0x4a,0xea,0x71,
    0x09,0x26,0x79,0x17,0x33,0x47,0x92,0xf7,0x01,0x72,0xd7,0xf9,0xdc,0xbb,0x2e,0x35,
    0xaa,0xef,0x12,0x53,0x63,0x3d,0x7e,0x4d,0xf0,0x16,0x53,0x8f,0x9c,0x07,0x0f,0x73,
    0x16,0xe8,0xcc,0x3d,0x42,0xcd,0xcb,0xcd,0xcc,0xad,0x00,0x6f,0x67,0xe6,0x5a,0xc0,
    0xea,0x7d,0xe4,0xc9,0xf9,0xb0,0x0a,0xde,0x4a,0x78,0xa2,0xe9,0x6a,0xf0,0x15,0xa1,
    0x0e,0x39,0xb7,0xd6,0x90,0xaf,0x85,0xb3,0x65,0xb5,0xd1,0xea,0x31,0xf8,0x6b,0x8d,
    0x56,0xeb,0xc0,0x55,0xab,0xc7,0xc1,0x54,0xab,0x56,0xa3,0x95,0xd8,0xd6,0x87,0xb5,
    0x85,0xfe,0xb7,0x98,0xd8,0xcf,0x11,0x7b,0xab,0x89,0xfd,0x3c,0xb8,0xc6,0x7e,0x01,
    0x4c,0x63,0xb7,0x99,0xd8,0x62,0xdb,0x96,0xcc,0x4a,0x8c,0xbd,0x8d,0x59,0xaa,0x4c,
    0x34,0x89,0x7d,0xc9,0xbb,0xbf,0x9f,0x58,0xdb,0xc1,0x67,0xf0,0x4c,0x94,0xd7,0xc6,
    0x33,0x29,0x4a,0xde,0xdf,0x98,0x73,0x0b,0xfe,0xdb,0xc8,0xdb,0x69,0xf2,0x8a,0x4f,
    0x47,0x58,0x9d,0xf0,0x3b,0x4c,0xde,0x97,0x4c,0xde,0x85,0xe1,0xa4,0x95,0x33,0xf8,
    0x65,0xb0,0x35,0xe6,0x6c,0x49,0x25,0xf3,0x95,0x49,0xec,0x3b,0xe1,0xe5,0x56,0x7e,
    0x82,0xef,0x82,0xbb,0x33,0x89,0x35,0x20,0x79,0x56,0xaf,0x10,0x67,0x17,0xe7,0x5b,
    0x3e,0xdf,0xa4,0x34,0x3d,0x69,0x4d,0x9d,0xf4,0x24,0x9c,0x59,0x3e,0x72,0xda,0xe0,
    0x77,0xe0,0xdb,0x8a,0xef,0x7a,0x53,0xff,0x53,0xff,0x51,0xff,0xc6,0xeb,0xd4,0xbf,
    0x09,0x9e,0xae,0x4e,0xea,0xdf,0x0c,0x77,0x93,0xa9,0xff,0x59,0xe2,0x6c,0xfe,0x9f,
    0xfa,0xb5,0xa6,0x56,0x53,0xff,0x4c,0x1f,0x7b,0xe8,0x84,0xbf,0x3e,0xc9,0x13,0xcf,
    0xf1,0x57,0xb1,0xef,0x08,0x91,0x64,0xff,0x3a,0x58,0xad,0xcf,0xcd,0xd9,0x1b,0xcc,
    0xd9,0x6e,0x33,0x67,0x6f,0x82,0xeb,0x9c,0xbd,0x05,0xa6,0x73,0xb6,0xd7,0x3c,0x6f,
    0xb1,0xed,0x91,0xdf,0x4b,0xd4,0xb6,0x07,0xbd,0xa4,0xee,0xb7,0xc9,0xe9,0xe0,0x5d,
    0xe2,0xfe,0xaf,0x70,0x2f,0xb1,0x7e,0x84,0x23,0xd7,0x4f,0xc9,0xf5,0x13,0xbc,0x21,
    0x70,0x7e,0x37,0xb9,0xc4,0x76,0x21,0xac,0x8b,0xf0,0x2e,0x26,0x73,0x18,0x73,0xfd,
    0x02,0x4f,0x7e,0xcb,0xed,0x00,0xfb,0x15,0x5c,0xbe,0x85,0x83,0x83,0x5e,0x82,0xfd,
    0xc6,0x33,0xba,0x11,0xfb,0x58,0xb4,0xbd,0x44,0xcc,0x0b,0x86,0xff,0x33,0x31,0xe5,
    0xdb,0x69,0x7d,0xa4,0xa6,0x6b,0x21,0xca,0x15,0xb0,0xcb,0xc4,0x9e,0xed,0x63,0xfc,
    0x8b,0x70,0x2f,0x70,0x36,0x8b,0xf6,0xe5,0x3e,0xda,0x55,0x0f,0xd5,0xe8,0x5d,0x34,
    0xf2,0xf4,0x9b,0xf1,0xff,0xd6,0xe8,0x2a,0x39,0xaf,0x1a,0x8d,0xfe,0x86,0xa7,0x1a,
    0xe5,0xfb,0x9c,0x46,0x62,0xeb,0x65,0x10,0x85,0x27,0x57,0xd5,0x28,0xe5,0x23,0xcf,
    0x6a,0x94,0xf6,0x11,0xb7,0x1a,0xe5,0xf9,0x9c,0x46,0x62,0x57,0x8d,0x32,0xc4,0xec,
    0x35,0xfc,0x6b,0xd4,0xa2,0x1a,0xa9,0x8f,0xd4,0xa4,0x1a,0x09,0xa6,0x1a,0xdd,0xed,
    0x63,0x7c,0xe7,0x23,0xb7,0xd7,0x68,0x54,0xe1,0xa3,0xbd,0x9c,0xfc,0xaa,0xd1,0xfb,
    0x68,0x94,0xa2,0xdf,0x92,0x7e,0x1a,0x0d,0x26,0xa7,0x5c,0x55,0xa3,0x22,0x1f,0x79,
    0xaa,0xd1,0x68,0xa3,0x91,0xd8,0x86,0x86,0x35,0x1c,0xde,0x70,0xa3,0xd1,0x08,0x78,
    0x56,0xa3,0x91,0x3e,0xe2,0x56,0xa3,0x51,0x46,0xa3,0x91,0x46,0xa3,0x12,0x62,0x0e,
    0xf5,0x39,0x7e,0x31,0x31,0x55,0x23,0xf5,0x19,0x6d,0x34,0x2a,0x31,0x1a,0xcd,0xf3,
    0x31,0xbe,0xd4,0x55,0x4c,0xad,0xaa,0x51,0xa5,0x8f,0x76,0xd1,0x2a,0x45,0x4e,0x7d,
    0xf7,0xf6,0x32,0x8b,0xe2,0xd7,0xc0,0xac,0xb5,0xc2,0x29,0x31,0xef,0xfc,0x7e,0xde,
    0xf9,0x7d,0xe6,0x9d,0xff,0x00,0x5c,0xdf,0xf9,0x03,0x60,0xfa,0xce,0x1f,0x32,0xef,
    0xa1,0xd8,0x0e,0x86,0x75,0x98,0xbc,0x87,0xcd,0x77,0xeb,0x23,0x62,0x1f,0x31,0xb1,
    0x3f,0x06,0xd7,0xd8,0x9f,0x80,0x69,0xec,0x2e,0x13,0x5b,0x6c,0x47,0xc3,0x3a,0x46,
    0xec,0x63,0x2e,0xf7,0xbd,0xfe,0x9c,0xd8,0xc7,0xcd,0xf7,0xfa,0x0b,0xf0,0x93,0xfc,
    0x4e,0xfa,0x12,0x6c,0xa5,0xc9,0x77,0x02,0x7c,0x39,0xf9,0x4e,0x99,0x7c,0x27,0x12,
    0xae,0x4b,0x30,0xc9,0x77,0xd2,0xcc,0x63,0x8d,0x8f,0xbf,0xe1,0x1b,0xcc,0xef,0x29,
    0xf5,0x3b,0x65,0xb4,0x6e,0xf4,0xd1,0xe7,0x18,0x9c,0x93,0xa6,0x9e,0xaf,0xa9,0xe7,
    0xb4,0xa9,0xe7,0x1b,0x70,0xad,0xa7,0xdb,0xd4,0x23,0xb6,0x33,0x61,0x75,0x93,0xe7,
    0x8c,0xa9,0x67,0x12,0xf5,0x34,0x9a,0x67,0xaf,0x7e,0xdd,0xa6,0x9e,0x26,0x1f,0x7d,
    0x4e,0xc1,0x39,0x63,0xea,0xf9,0x96,0x7a,0xb6,0x9a,0x7a,0xbe,0x03,0xd7,0x7a,0x7a,
    0x4c,0x3d,0x62,0x3b,0x1b,0x56,0x0f,0x79,0xce,0x9a,0x7a,0xa6,0xf8,0xf8,0x6f,0x18,
    0xc9,0xa7,0xdf,0x28,0xf5,0xeb,0x31,0xf5,0xcc,0xf7,0xd1,0xa7,0x1b,0xce,0x59,0x7c,
    0xbb,0xf0,0x3d,0x6a,0xde,0xf5,0xcf,0xd0,0x3b,0x6d,0xf2,0x54,0xfb,0x1c,0xee,0xfa,
    0x71,0xbb,0x4c,0x9e,0xfb,0x7c,0xcc,0xd5,0x03,0xe7,0x28,0xbe,0x87,0xf0,0x3d,0xc8,
    0xb7,0x56,0x7c,0x3f,0x24,0x9e,0x2c,0xfd,0xff,0x9b,0x94,0xf9,0xd6,0x2a,0xe7,0x90,
    0x89,0x7f,0xaf,0x8f,0x39,0xba,0xe0,0x4b,0xbc,0x99,0x81,0x71,0x1e,0x5b,0x6f,0x98,
    0x92,0x69,0x61,0xfd,0x03,0xa0,0x1c,0x96,0x93,0x70,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture2D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, params . srcOffset + srcSubImageCoords, params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
