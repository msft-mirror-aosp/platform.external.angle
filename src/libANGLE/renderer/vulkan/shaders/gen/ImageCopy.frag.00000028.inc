// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000028.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000028[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x98,0x6b,0x68,0x96,0x65,
    0x18,0xc7,0x9f,0xfb,0x7d,0xdf,0xbd,0xf3,0xb4,0xa5,0x78,0x68,0xab,0xe5,0xb6,0xd4,
    0x65,0x6d,0x4d,0xf3,0xac,0xf3,0xf5,0xb4,0x74,0x0b,0x75,0x73,0x1b,0x05,0x66,0x26,
    0x9a,0x95,0x9a,0xce,0xda,0x82,0x22,0x45,0x5f,0x75,0xeb,0xe0,0x88,0x94,0x3e,0x44,
    0x69,0xa6,0x10,0x44,0x14,0x06,0x56,0xfa,0x21,0xad,0x1c,0x61,0x16,0xe5,0x02,0xcb,
    0x41,0xb9,0xd0,0x2f,0x7d,0x8d,0xa4,0xa1,0x29,0x51,0xf7,0xf5,0xdc,0xbf,0xcb,0x5d,
    0x8e,0xc2,0xc1,0xcd,0xf3,0xdc,0xff,0xeb,0xfa,0x5f,0x87,0xff,0x7d,0x78,0xb6,0x25,
    0x13,0x63,0x72,0xa3,0xc8,0x45,0x83,0xa2,0x01,0x51,0x93,0x8b,0xe2,0x9f,0x61,0x51,
    0x22,0x92,0xd7,0xc1,0x51,0x3a,0x7e,0xd6,0x2c,0x69,0x5a,0x52,0xd9,0xfa,0xec,0xda,
    0xca,0x29,0x53,0x27,0x8a,0x3d,0x3f,0x4a,0xc6,0x7e,0x62,0xbb,0x25,0xca,0x8d,0x52,
    0xfe,0x29,0x63,0xd3,0xea,0xf5,0xcd,0x82,0x97,0xf9,0x71,0xd1,0x8f,0xa1,0xde,0x4f,
    0xf0,0x5c,0x89,0xe1,0xdf,0xca,0xe2,0x98,0xc2,0x89,0xa2,0xda,0x28,0x27,0xaa,0x08,
    0xe9,0xa2,0x31,0x3c,0x15,0x73,0x60,0x03,0x0c,0x96,0x00,0x1b,0x6a,0xb0,0x24,0xd8,
    0x08,0x83,0xa5,0xc0,0x0a,0x0c,0x96,0x03,0x56,0x64,0xb0,0x34,0x58,0x89,0xc1,0x72,
    0xc1,0xc6,0x1a,0x6c,0x00,0xd8,0x78,0x83,0x0d,0x04,0xab,0x30,0xd8,0x20,0xb0,0x89,
    0x06,0x1b,0x0c,0x36,0xc5,0x60,0x43,0xc0,0x66,0x18,0x2c,0x0f,0x6c,0xb6,0xc1,0xf2,
    0xc1,0xe6,0xc5,0xda,0x25,0xaf,0x6b,0x20,0x3a,0xae,0xf0,0xcf,0x3b,0xd1,0x4c,0xe7,
    0xa5,0x66,0x2e,0xda,0x8f,0x66,0x3e,0xdc,0xb3,0x12,0xb1,0x3d,0x19,0xeb,0x25,0xef,
    0xa3,0xfc,0x5b,0x9a,0xde,0xcb,0xbd,0x7f,0x9a,0x1a,0x7e,0x3b,0x3c,0x2e,0x33,0xc2,
    0x7b,0xe4,0x1b,0x5c,0x74,0x3c,0x5c,0xb3,0x3a,0xa3,0x73,0xd1,0xf0,0xad,0x37,0x0b,
    0xe7,0x8d,0xf4,0xf3,0x12,0x62,0xc8,0x7a,0xdd,0xea,0xe7,0xa5,0xcc,0x13,0xcc,0xc7,
    0xa2,0x73,0x2a,0xc6,0x53,0xd1,0x38,0x7c,0x05,0xaf,0x62,0x5e,0x66,0xf8,0x77,0xe1,
    0x2f,0x7c,0x89,0x5f,0x4e,0xbc,0x28,0xee,0x67,0x58,0xac,0x41,0x29,0xa3,0xc4,0x8c,
    0xf2,0x9b,0x8c,0x92,0xeb,0xcf,0x54,0x74,0x2f,0xeb,0x57,0x41,0x0d,0x32,0xaf,0x04,
    0x2b,0xa7,0xa7,0x09,0xd4,0x24,0xfe,0x13,0xb1,0x95,0x1a,0xfb,0x34,0xf6,0x94,0xd8,
    0xa7,0x5f,0xe7,0x06,0xbb,0x3c,0x67,0x51,0xb3,0xfa,0x57,0xd3,0x97,0xce,0xeb,0x58,
    0x5f,0xe9,0xf9,0x21,0xb8,0xa2,0x51,0xa1,0x8f,0xb4,0x9c,0x79,0x22,0xba,0xf1,0x87,
    0xa3,0x19,0xe7,0x7c,0x98,0xf7,0xe5,0xf4,0x20,0xf3,0x15,0xfd,0x72,0xae,0xec,0x37,
    0x5f,0xc3,0x79,0x11,0xfe,0x63,0xd4,0x5c,0x42,0x0d,0x4f,0xf0,0x9e,0x34,0xfe,0x1b,
    0xa8,0x41,0xe7,0xcd,0x9c,0x0f,0xf1,0x7f,0x9e,0x1a,0xad,0x7f,0x96,0xb3,0xa2,0xf3,
    0xfd,0xec,0x75,0x9d,0x1f,0xe9,0xa7,0xf1,0x09,0xce,0x8c,0xce,0x4f,0xb3,0x07,0x75,
    0x9f,0xfd,0xd0,0xaf,0xfe,0xb3,0x68,0xa4,0xf6,0x5f,0x63,0x6b,0x76,0xae,0xf4,0x73,
    0x81,0x5a,0x74,0x5f,0x5d,0xe0,0xfe,0x49,0x1a,0xff,0x8c,0x17,0x70,0x47,0x36,0x5b,
    0x55,0xe1,0xbb,0x10,0xbf,0x39,0x2e,0x60,0x76,0xa8,0xef,0x5c,0xff,0xbe,0xf9,0xbd,
    0x96,0xb9,0x3a,0x9f,0xe7,0xe7,0x7b,0x77,0x1d,0xc8,0x4c,0xf3,0xab,0x9e,0xa0,0x8e,
    0x88,0xf8,0x57,0x3c,0x22,0x7b,0x21,0xc3,0x7e,0x1f,0xcf,0x9e,0xae,0xf7,0x79,0x64,
    0x3f,0xdf,0x0d,0x36,0xde,0xac,0x63,0x33,0x67,0xe5,0x1e,0xec,0xf3,0x7d,0x04,0xd9,
    0x67,0xf7,0xb1,0x17,0x27,0x10,0x4f,0x7c,0x26,0x81,0xef,0xf4,0x3e,0x32,0x9f,0x0c,
    0x6f,0x12,0xbc,0xe9,0xdc,0x25,0x95,0xec,0xcb,0x0c,0x7b,0x70,0x26,0xf8,0x07,0xde,
    0x27,0x3f,0xd6,0x25,0x60,0xb2,0x37,0x2f,0xfb,0xca,0x33,0xd4,0x73,0xd5,0xfb,0x57,
    0x71,0xf7,0x64,0xe8,0x47,0xde,0x1b,0x3c,0xaf,0x84,0xfb,0x67,0x32,0xbe,0xdb,0x58,
    0x8b,0xf9,0xe0,0x8d,0x5e,0x1d,0xa9,0x69,0x8c,0x0b,0x98,0xfa,0xfd,0xe5,0x63,0x68,
    0x2c,0x79,0xf6,0x7a,0x2d,0xc4,0x6f,0xbe,0x0b,0x3e,0x39,0x70,0x66,0x9b,0x1e,0xee,
    0xa7,0x87,0x6a,0xd3,0xc3,0x42,0x70,0xed,0x61,0x11,0x98,0xf6,0x50,0x6b,0x7a,0x58,
    0x14,0xdf,0x7d,0x51,0x8c,0x49,0xde,0x1a,0xd3,0xc3,0x62,0x72,0x3b,0xd3,0xc3,0x12,
    0x70,0xed,0xa1,0xcc,0x05,0x4c,0xfd,0xa4,0x07,0x8d,0x55,0x6b,0x7a,0x58,0xe0,0x82,
    0x4f,0x06,0x4e,0x8d,0xe9,0xa1,0x9e,0x1e,0xea,0x4c,0x0f,0xcb,0xc0,0xb5,0x87,0x06,
    0x30,0xed,0xa1,0xc9,0xf4,0xd0,0x10,0xd7,0x13,0xc5,0x98,0xe4,0x6d,0x64,0x1f,0x49,
    0xde,0x07,0xc9,0xbd,0xc0,0xf5,0xdd,0x05,0x52,0xa3,0xfa,0x36,0x99,0x1a,0xab,0xf1,
    0xab,0x85,0xd7,0x48,0x3d,0x72,0x5f,0x3c,0xc2,0x5d,0xa1,0x7b,0xee,0x51,0x6a,0x5e,
    0x69,0xf6,0xdc,0x2a,0xf0,0x2c,0x7b,0x6e,0x35,0x58,0xb5,0x0b,0x3c,0xb9,0x3f,0xd6,
    0xc2,0x5b,0x03,0x4f,0x34,0x7d,0x1c,0x5c,0x75,0x7f,0x12,0x6e,0x64,0xb0,0x75,0x60,
    0x2e,0xd6,0x21,0x1d,0xdf,0x3d,0xeb,0xf1,0x5d,0x47,0x0c,0xcd,0xf1,0x14,0x39,0x36,
    0x98,0x1c,0x1b,0xc1,0x57,0xf9,0x5e,0xe5,0xee,0xdc,0x44,0x4f,0xeb,0xb9,0xaf,0x36,
    0x9a,0xf5,0xd8,0x0c,0xbf,0xd9,0xac,0xc7,0xd3,0xe0,0xba,0x1e,0xcf,0x80,0xe9,0x7a,
    0xb4,0x9a,0xf5,0x10,0x5b,0x8b,0x1f,0xdb,0xd1,0x78,0xbb,0x89,0xbd,0x83,0xd8,0x59,
    0x13,0x7b,0x27,0xb8,0xc6,0xde,0x05,0xa6,0xb1,0xdb,0x4d,0x6c,0xb1,0xb5,0xf9,0xd1,
    0x4e,0xec,0x36,0x34,0x92,0x38,0x2f,0xd1,0x97,0xdc,0x2f,0x1f,0x12,0xeb,0x65,0xf0,
    0x59,0xac,0xbb,0xf2,0xda,0x59,0x77,0xf1,0x79,0x85,0x9c,0xdb,0xf1,0x6f,0x23,0x6f,
    0x87,0xc9,0x2b,0x3e,0xbb,0xfd,0xe8,0x80,0xbf,0xdb,0xe4,0x7d,0xd5,0xe4,0xad,0xf7,
    0xb7,0xb9,0xdc,0xf3,0xaf,0x81,0x6d,0x32,0xf7,0x57,0x82,0xb5,0x13,0xfb,0x1e,0x78,
    0x3a,0x5e,0xf4,0xb1,0x04,0xdf,0x0b,0x77,0x4f,0x1c,0x6b,0x60,0xbc,0x56,0xaf,0x13,
    0x67,0x2f,0x77,0x68,0x0e,0xdf,0xc5,0x24,0x3d,0x69,0x4d,0x1d,0xf4,0x24,0x9c,0x45,
    0x2e,0x70,0xda,0xe1,0xef,0xc6,0xb7,0x15,0xdf,0x16,0x53,0xff,0x73,0xff,0x51,0xff,
    0x0b,0x37,0xa9,0x7f,0x0b,0x3c,0x1d,0x6d,0xd4,0xbf,0x15,0xee,0x16,0x53,0xff,0x36,
    0xe2,0x6c,0xfd,0x9f,0xfa,0xb5,0xa6,0x56,0x53,0xff,0x42,0x17,0x7a,0xe8,0x80,0xdf,
    0x12,0xef,0xb7,0xf0,0xad,0x78,0x03,0x7b,0xbb,0x8f,0x24,0xf3,0x7d,0x60,0x73,0x5c,
    0xdf,0x3e,0x7b,0x9b,0x7d,0xb6,0xdf,0xec,0xb3,0x03,0xe0,0xba,0xcf,0xde,0x01,0xd3,
    0x7d,0x76,0xc8,0xac,0xb7,0xd8,0x0e,0xfa,0x71,0x88,0xda,0x0e,0xa2,0x97,0xd4,0xfd,
    0x2e,0x39,0x23,0x78,0xd7,0x78,0xbf,0xe6,0xdf,0x25,0xd6,0xef,0x70,0xe4,0x79,0x9c,
    0x5c,0x7f,0xc0,0xcb,0x83,0x73,0xd5,0xe4,0x12,0xdb,0xa5,0xb8,0xf7,0xc0,0xeb,0x8d,
    0xcf,0x43,0xc8,0x75,0x19,0x5e,0x41,0x14,0xfa,0x4d,0xc7,0x3e,0x01,0x97,0xef,0xed,
    0x10,0xaf,0x57,0x3a,0xd6,0x31,0xac,0xd1,0x6d,0xd8,0x8b,0xd0,0xf6,0x1a,0x31,0x2f,
    0x19,0xfe,0x9f,0xc4,0x94,0xef,0xb3,0xf5,0x91,0x9a,0xfe,0xf1,0x51,0xae,0x80,0xf5,
    0x12,0xbb,0xc6,0x85,0xf8,0xbd,0x70,0x2f,0x71,0xff,0x8b,0xf6,0x15,0x2e,0xd8,0xf7,
    0x99,0xfb,0x4a,0x38,0xef,0xa3,0x91,0xa3,0xdf,0x3c,0x77,0xa3,0x46,0xce,0x85,0x9c,
    0xf2,0x54,0x8d,0x92,0x2e,0xf0,0x54,0xa3,0x21,0xae,0x4f,0x23,0xb1,0xa5,0xfc,0xc8,
    0x85,0x27,0x4f,0xd5,0x68,0x20,0x3c,0xab,0xd1,0x20,0x17,0x70,0xab,0xd1,0x60,0xd7,
    0xa7,0x91,0xd8,0x55,0xa3,0x3c,0x62,0xa6,0x5c,0x1f,0x3f,0x4d,0x4c,0xd5,0x48,0x7d,
    0xa4,0x26,0xd5,0x48,0x30,0xd5,0xe8,0x01,0x17,0xe2,0x4b,0x5d,0x69,0x6a,0x55,0x8d,
    0x26,0xb8,0x60,0xaf,0x20,0xbf,0x6a,0xf4,0x11,0x1a,0x25,0xe8,0xb7,0xb8,0x9f,0x46,
    0xc3,0xc9,0x39,0xdc,0x68,0x34,0xd2,0x05,0x9e,0x6a,0x34,0xda,0x68,0x24,0xb6,0x51,
    0x7e,0x14,0xc2,0x2b,0x34,0x1a,0xdd,0x0e,0xcf,0x6a,0x54,0xe4,0x02,0x6e,0x35,0xba,
    0xc3,0x68,0x54,0x64,0x34,0x2a,0x26,0xe6,0x28,0xa3,0x51,0x01,0x31,0x55,0x23,0xf5,
    0x19,0x6d,0x34,0x2a,0x36,0x1a,0x2d,0x76,0x21,0xbe,0xd4,0x55,0x40,0xad,0xaa,0xd1,
    0x24,0x17,0xec,0xa2,0x55,0x82,0x9c,0x7a,0xf6,0x0e,0xb1,0x17,0xc5,0x6f,0x29,0x7b,
    0xad,0x15,0x4e,0xb1,0x39,0xf3,0x1f,0x73,0xe6,0x8f,0x98,0x33,0xff,0x09,0xb8,0x9e,
    0xf9,0x4f,0xc1,0xf4,0xcc,0x1f,0x33,0xe7,0x50,0x6c,0x47,0xe3,0x33,0x1b,0xf2,0x1e,
    0x37,0xdf,0xad,0xcf,0x89,0x7d,0xc2,0xc4,0xfe,0x02,0x5c,0x63,0x7f,0x09,0xa6,0xb1,
    0x3b,0x4d,0x6c,0xb1,0x9d,0xf4,0xe3,0x14,0xb1,0x4f,0x99,0xef,0xf5,0x37,0xc4,0x3e,
    0x6d,0xbe,0xd7,0xdf,0x82,0x7f,0xcd,0xf7,0xff,0x3b,0xb0,0x0d,0x26,0xdf,0xf7,0xe0,
    0x2b,0xc9,0xd7,0x65,0xf2,0x89,0xed,0x8c,0x1f,0x5d,0xe4,0x3b,0x63,0xce,0xec,0x74,
    0x17,0xfe,0x4e,0x58,0x6a,0x7e,0x67,0x53,0xbf,0x2e,0xa3,0x75,0x9d,0x0b,0x3e,0xa7,
    0xe0,0x9c,0x31,0xf5,0xfc,0x48,0x3d,0x67,0x4d,0x3d,0x3f,0x81,0x6b,0x3d,0xdd,0xa6,
    0x1e,0xb1,0x9d,0xf3,0xa3,0x9b,0x3c,0xe7,0x4c,0x3d,0x33,0xa9,0xa7,0xce,0xac,0xbd,
    0xfa,0x75,0x9b,0x7a,0xea,0x5d,0xf0,0xe9,0x82,0x73,0xce,0xd4,0xf3,0x33,0xf5,0x64,
    0x4d,0x3d,0xbf,0x80,0x6b,0x3d,0x3d,0xa6,0x1e,0xb1,0x9d,0xf7,0xa3,0x87,0x3c,0xe7,
    0x4d,0x3d,0x55,0x2e,0xfc,0x9d,0x24,0xf9,0xf4,0x1b,0xa5,0x7e,0x3d,0xa6,0x9e,0x46,
    0x17,0x7c,0xba,0xe1,0x9c,0xc7,0xb7,0x13,0xdf,0x93,0xe6,0xac,0x7f,0x85,0xde,0x49,
    0x93,0x67,0xaa,0xeb,0xc3,0xa3,0x7e,0xdc,0x4e,0x93,0xa7,0xc1,0x85,0x5c,0x3d,0x70,
    0x4e,0xe2,0x7b,0x0c,0xdf,0xa3,0x7c,0x6b,0xc5,0xf7,0x33,0xe2,0xc9,0xd0,0xff,0x21,
    0x25,0xcc,0xb7,0x56,0x39,0xc7,0x4c,0xfc,0x65,0x2e,0xe4,0xe8,0x84,0x2f,0xf1,0xe6,
    0x78,0xc6,0x45,0x6c,0x7f,0xfb,0x5d,0x32,0xc3,0x8f,0x7f,0x01,0xc1,0x33,0x13,0x78,
    0xf4,0x12,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform utexture3D src;
// layout(location = 0)out vec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// float sRGBToLinear(float sRGB)
// {
//
//     if(sRGB <= 0.04045)
//     {
//         return sRGB / 12.92;
//     }
//     else
//     {
//         return pow((sRGB + 0.055f)/ 1.055f, 2.4f);
//     }
// }
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           uvec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            vec4 dstValue = vec4(srcValue);
//
//     dstValue /= 255.0;
//
//     if(params . dstIsSRGB)
//     {
//
//         dstValue . r = sRGBToLinear(dstValue . r);
//         dstValue . g = sRGBToLinear(dstValue . g);
//         dstValue . b = sRGBToLinear(dstValue . b);
//     }
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
