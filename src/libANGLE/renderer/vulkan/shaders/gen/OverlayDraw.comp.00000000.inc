// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/OverlayDraw.comp.00000000.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kOverlayDraw_comp_00000000[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x75,0x58,0x7d,0x90,0x97,0x55,
    0x15,0x7e,0xcf,0xdd,0x65,0x3f,0xd0,0x11,0x4a,0xf9,0xb2,0xe5,0x6b,0x19,0x14,0x62,
    0x67,0x5d,0x36,0xd8,0xa8,0x05,0x61,0x05,0x05,0x62,0x05,0x4d,0x99,0x8a,0x85,0x48,
    0x3e,0x46,0x8c,0x01,0xd6,0xc0,0xf8,0xda,0x08,0x08,0x42,0xc4,0x4c,0x76,0xa1,0x2d,
    0x31,0xaa,0x7f,0x2c,0x85,0x69,0xfc,0xa7,0xa6,0x4c,0x9a,0x89,0x76,0x35,0x41,0x14,
    0xa1,0x21,0x4a,0x88,0x0c,0x54,0x42,0xa8,0xc9,0x0f,0xbe,0xb4,0xb1,0xfb,0xbc,0xe7,
    0x39,0xbc,0x67,0xdf,0x59,0x7e,0x33,0x77,0xde,0xf7,0x3e,0xe7,0xdc,0x73,0x9e,0x7b,
    0xee,0xb9,0xf7,0x9e,0xdf,0x5b,0x10,0x06,0x15,0x27,0x89,0x24,0x5d,0x93,0x92,0xa4,
    0xb8,0x20,0x49,0x7f,0x9f,0x48,0x42,0x44,0x92,0xe4,0x9a,0xa4,0x28,0x7d,0x4e,0xac,
    0xbf,0xa7,0xbe,0x72,0xe9,0xb2,0x79,0x95,0x23,0x46,0x56,0x41,0x7e,0x5d,0xa2,0x8a,
    0x90,0x75,0x4b,0x8a,0x93,0x2e,0xf1,0x59,0x18,0xdb,0xa2,0xfb,0x1e,0x58,0x0c,0xfc,
    0x50,0x6c,0x67,0x62,0xeb,0x1e,0xc7,0x17,0xa6,0xf6,0x92,0x68,0x5d,0x75,0x52,0x7b,
    0xf1,0x6d,0x5c,0x7c,0x16,0xa5,0x3a,0x49,0x32,0x29,0x5a,0xa8,0x53,0xd7,0xc9,0x20,
    0x3e,0x0d,0x13,0x62,0x5e,0x2f,0x10,0x1b,0xe0,0xb0,0x02,0x62,0x55,0xb4,0x3f,0x9e,
    0xf6,0xab,0x44,0x75,0x26,0xe4,0xec,0x4f,0x8c,0x23,0x26,0xd0,0x16,0xf4,0xef,0x88,
    0xcf,0xf2,0x2b,0x32,0xed,0x0f,0x74,0x7c,0xd7,0xe4,0xe4,0x6b,0x28,0x2f,0x64,0xbf,
    0x39,0x37,0x9f,0x96,0x4e,0xe6,0xd3,0xd2,0xc9,0x7c,0x5a,0x3a,0x99,0x4f,0x4b,0x27,
    0xf3,0xd9,0x66,0xf3,0x29,0x54,0x9d,0xed,0x9d,0xcc,0x67,0xbb,0x9b,0x4f,0x6b,0x8e,
    0x6f,0x2b,0xf9,0x9a,0xfc,0x50,0xba,0xbe,0x49,0x52,0x46,0x9f,0x47,0x3a,0xe1,0x7b,
    0xc4,0xf1,0x2d,0xa1,0x8f,0x23,0xce,0xc6,0xe9,0x9c,0x8f,0xd3,0xf4,0x51,0xc0,0xfe,
    0x19,0xfa,0xb8,0x91,0xfd,0x37,0xa4,0xa3,0x3e,0xfa,0x03,0x5d,0xff,0x03,0x51,0xfd,
    0x3e,0xb1,0x5d,0x1f,0xbd,0x84,0xd4,0x5e,0x41,0x6a,0x0f,0xef,0x3d,0xa2,0x4e,0x11,
    0xe3,0x84,0x5f,0xaf,0xd8,0x2f,0x66,0x5c,0x02,0xfb,0x25,0xec,0x63,0x5d,0x6e,0x88,
    0x68,0x69,0x7c,0xf6,0x8c,0x16,0x7a,0x70,0x1c,0x74,0xca,0x53,0x5b,0xaa,0x83,0xfe,
    0xd0,0xf8,0x2c,0xa5,0x8d,0x61,0xf4,0x51,0x43,0x1f,0xd6,0xaf,0xa5,0xbe,0xf5,0xc7,
    0x72,0x0d,0xcb,0x98,0xcb,0x25,0xc4,0xfa,0x45,0x69,0x1d,0xfb,0xe5,0x7c,0x8e,0x73,
    0xe3,0x6e,0x23,0x8f,0x32,0xe6,0x68,0x1d,0xb1,0x7e,0xcc,0xc7,0xf1,0xa9,0xbc,0x30,
    0xb9,0x9d,0x7c,0x26,0xa4,0xbe,0xb5,0x7f,0x87,0x8b,0xc3,0x44,0xda,0x11,0xda,0x9e,
    0x98,0xae,0x59,0xc6,0x19,0xfd,0xc9,0x5c,0x0b,0xd8,0xab,0xe7,0xd8,0x12,0xc7,0xa5,
    0xc1,0x8d,0x47,0x7f,0x6e,0x2e,0x06,0x8d,0x39,0xfd,0x87,0x62,0xfb,0x38,0x5d,0x9f,
    0xd2,0xa4,0x89,0x31,0x14,0xfa,0xcc,0x3f,0xe1,0xf3,0x5b,0x7c,0x6f,0xe2,0x1c,0xd0,
    0x5f,0xe3,0xd6,0x6e,0x5d,0xba,0xee,0xd9,0xda,0x6d,0x60,0xbf,0xc0,0xf9,0xdc,0xca,
    0xf8,0x95,0x71,0x8f,0x95,0x10,0x43,0x9c,0x5b,0x72,0x71,0x6e,0xa6,0x1e,0xf6,0x4a,
    0x8b,0x8b,0x2b,0xf6,0xc5,0x36,0x72,0xfa,0x01,0xfd,0x6d,0x27,0x27,0xf4,0x5b,0x1d,
    0x87,0xdf,0x71,0x5e,0xc6,0x01,0xef,0x7b,0x52,0xc6,0x6b,0xc7,0x42,0x7e,0x90,0xf9,
    0x65,0x71,0x7d,0x8d,0x73,0x3e,0x48,0x7b,0xaf,0xf1,0xfc,0x93,0xd4,0x77,0x61,0xba,
    0x5f,0x2c,0x47,0xa1,0xff,0x17,0xe6,0xda,0x11,0xea,0xa3,0x7f,0x94,0x18,0xe4,0x7f,
    0xe5,0x7b,0xb1,0xf3,0x7f,0x92,0x31,0xab,0x88,0x28,0xe6,0x7a,0x8a,0x98,0xb5,0x3d,
    0x5c,0x93,0xb7,0xe8,0xc7,0xd6,0x20,0xe9,0x64,0x4d,0xde,0xe6,0xfb,0x5b,0xf4,0x8f,
    0xfe,0x69,0x62,0xc6,0xff,0x4c,0x2e,0xaf,0x44,0xb4,0x6f,0xfe,0x6b,0xa4,0xa3,0xff,
    0x93,0x4e,0x77,0xac,0x68,0x2c,0xe1,0x6b,0x1c,0xdf,0x6d,0xee,0xdf,0x60,0xbf,0xdc,
    0xad,0xef,0xd3,0x11,0x9b,0xed,0xe6,0xfa,0xab,0xd8,0x3f,0xf0,0xf2,0xcb,0xb7,0x9a,
    0xaf,0x5f,0xe7,0x7c,0x41,0x0e,0x5b,0x2f,0x88,0xc6,0xa9,0x88,0x73,0x3f,0x21,0x1d,
    0xf3,0xd1,0x7e,0x81,0x18,0xc6,0xfc,0x83,0x42,0xe8,0xd6,0xb2,0xff,0x86,0x58,0x6c,
    0x8b,0xd2,0x35,0xc4,0x19,0xd4,0xc8,0xfd,0x8e,0xfd,0x51,0x19,0x57,0x3a,0x5d,0xbf,
    0x02,0x9c,0x09,0x5d,0x52,0x7b,0x85,0xb4,0x8d,0x1c,0xb8,0x18,0x11,0xdc,0x7f,0x17,
    0x62,0xef,0x3c,0x6d,0x7d,0x18,0xdf,0x71,0x7e,0x5c,0x10,0x95,0xe3,0x39,0x86,0xb9,
    0x73,0x98,0xf9,0x31,0x2d,0x5a,0x85,0xdd,0x3f,0x13,0x3b,0xec,0xd6,0xaa,0x2e,0x5a,
    0x44,0x1e,0xfc,0x8d,0xb9,0x81,0x7d,0x3d,0x86,0x67,0xdd,0xeb,0xc4,0x7f,0x19,0x75,
    0x70,0x6e,0x1d,0xa3,0x0d,0xe0,0x4f,0x44,0x1d,0xc4,0xe4,0x38,0x71,0x70,0x3a,0x41,
    0xbb,0x97,0xa3,0x0c,0xf8,0xdf,0x31,0x7f,0xf2,0xc6,0xfb,0xa5,0xf8,0x3c,0x4f,0x9e,
    0x27,0xe8,0x07,0xb9,0xf1,0x2f,0xe6,0x85,0xf1,0x7e,0x87,0x79,0x61,0xbc,0xcf,0x12,
    0x7b,0xc7,0xf1,0x6e,0xe2,0x9e,0x3e,0x47,0xf9,0xec,0xa8,0x89,0x7d,0xf9,0x6f,0xda,
    0x3b,0xc7,0xf5,0xc0,0x7c,0xee,0x8e,0xfc,0xb1,0x76,0xef,0x52,0x9e,0x38,0xec,0x03,
    0x62,0x62,0xfc,0xc8,0xf7,0x7c,0x2a,0xd3,0xbc,0x68,0x0f,0xba,0x0f,0xd2,0xb9,0x04,
    0xe8,0xa9,0x0c,0xe3,0xff,0x10,0xd4,0x06,0x64,0x45,0xa2,0xb2,0x5d,0xd1,0x36,0x62,
    0xf3,0x11,0xe5,0x58,0x9f,0xf3,0x91,0xef,0xc5,0x44,0xe5,0x16,0xa3,0x8f,0xd2,0xb8,
    0x25,0x29,0x9e,0xae,0x5d,0x7c,0x5e,0x1b,0xad,0x4e,0xe4,0xd9,0x27,0x3c,0x57,0x61,
    0xa3,0x89,0x39,0x0c,0x10,0xb2,0xb6,0xe8,0x23,0x3d,0xbf,0x44,0xf7,0x0c,0x70,0xd3,
    0x29,0x14,0xc5,0x5f,0xe0,0x1c,0xc1,0x0b,0x36,0x80,0xd7,0x45,0xde,0x38,0x9f,0x4b,
    0x45,0xcf,0xa2,0x49,0xb4,0x69,0xeb,0x8e,0x18,0x76,0x15,0x95,0x5b,0xfc,0x43,0x50,
    0xac,0xab,0x64,0xf1,0xb7,0x9c,0x28,0x08,0x9a,0x13,0xd0,0xd9,0xc1,0x9c,0x28,0x0c,
    0x8a,0x23,0x27,0x4a,0x43,0x36,0x5f,0xe0,0x5d,0x62,0x03,0x96,0xe6,0x72,0xc8,0x7c,
    0x14,0x39,0x1f,0x81,0xf9,0xfe,0x2c,0x7d,0x14,0xd3,0x47,0x91,0xf3,0x51,0x12,0x14,
    0xc7,0x9a,0x99,0xbd,0xd2,0xa0,0xeb,0x02,0x79,0xd7,0xa0,0x3c,0x2e,0x50,0x17,0xbe,
    0x7e,0xc1,0xb1,0xd7,0x89,0xca,0xc1,0xaf,0xbb,0x64,0xfc,0x80,0x77,0x8b,0xad,0x3b,
    0x73,0xb4,0x9b,0xa8,0xfd,0x4b,0x5c,0x1f,0xe0,0x96,0x37,0xd7,0x4b,0xb6,0x8f,0x0c,
    0xeb,0xe1,0x62,0xf4,0x0c,0x73,0xa0,0xa7,0xa8,0x2e,0x64,0xe6,0xbf,0x97,0x28,0x0e,
    0xff,0x7d,0x9c,0x7f,0xe0,0xbd,0x63,0xeb,0x43,0xff,0xbd,0x9d,0xbf,0x4f,0xd1,0x9f,
    0x38,0x7f,0x7d,0xe9,0x4f,0x9c,0xbf,0x7e,0xa2,0xba,0x7d,0xc9,0xdd,0x6c,0xe1,0x69,
    0xb1,0xe9,0x4f,0xff,0x98,0x4f,0x3f,0xfa,0x34,0x6e,0x03,0x44,0xe5,0xe0,0x56,0xee,
    0xb8,0x01,0x1f,0x88,0x9a,0x8a,0xf6,0xf0,0xbe,0x96,0x3c,0x06,0x73,0x8e,0x0d,0x8e,
    0xdb,0xcd,0x6e,0x2d,0x8d,0xdb,0x10,0x51,0xdd,0x9b,0xc9,0xcd,0x6c,0x95,0x3b,0x6e,
    0x43,0xe9,0x1f,0x7c,0x87,0xd0,0xa7,0x71,0xfb,0xb4,0xa8,0x1c,0xdc,0x2a,0x1c,0x37,
    0xe0,0xc3,0x62,0xab,0xa0,0xbd,0x61,0x2e,0x6e,0x95,0x2e,0x6e,0xc6,0xf7,0x16,0x51,
    0xdc,0xf3,0x1d,0x4e,0xbe,0x05,0x8e,0x6f,0xb5,0xa8,0xee,0x70,0xf2,0x35,0xfb,0x15,
    0x8e,0xef,0x67,0xc8,0x09,0x73,0xa8,0x26,0x0f,0xf0,0x1b,0xe9,0xf8,0x41,0x67,0x44,
    0x6c,0x23,0x39,0x7e,0x44,0x2e,0xaf,0x80,0xaf,0x8f,0x3e,0xb1,0x0f,0x46,0x4b,0xb6,
    0x9f,0xea,0xe2,0x6e,0xc4,0xbd,0x56,0x97,0xdb,0xab,0xb8,0xf7,0x6a,0xb8,0x5f,0xd3,
    0x3a,0x8f,0x3a,0xf0,0x5b,0x1d,0x3a,0xde,0x0b,0x9f,0xe4,0xde,0xc0,0xf3,0x4a,0xee,
    0x06,0xf5,0x83,0xdf,0x77,0x89,0xdd,0x10,0x14,0x87,0x2d,0xc3,0x7a,0x06,0xc5,0x6b,
    0x13,0xe5,0x82,0x73,0xa3,0x57,0xe8,0xc8,0x65,0x32,0xf5,0xec,0xec,0xe8,0x1d,0x54,
    0x67,0x33,0x6d,0xdc,0xe8,0x6c,0x58,0x5c,0xcb,0x82,0xe2,0x35,0xbc,0x37,0x86,0xbb,
    0x33,0x02,0xb2,0xbe,0xb1,0x0d,0x20,0x6f,0x3c,0x6d,0x5c,0x39,0xc7,0x35,0x70,0x5c,
    0x95,0x1b,0x07,0xd9,0xa0,0xd8,0x6e,0xe2,0xb8,0x9b,0xdc,0xb8,0x21,0x1c,0x37,0x97,
    0xe3,0x6e,0x71,0xe3,0x20,0x1b,0x1a,0x5b,0x05,0xc7,0x55,0xb8,0x38,0x55,0x06,0x9d,
    0x4f,0x01,0xef,0x86,0x6a,0xea,0x0c,0x75,0x3a,0xc3,0xa8,0x13,0x72,0x3a,0xf0,0xf1,
    0x71,0x0c,0x10,0xde,0x07,0x39,0xfd,0xc1,0xd4,0x97,0x9c,0x7e,0x95,0xd3,0xef,0xeb,
    0xf4,0xfb,0x53,0x3f,0xc9,0xe9,0x0f,0x77,0xfa,0xd5,0xe9,0xb9,0x77,0x4d,0xaa,0x7f,
    0x34,0x28,0x6f,0xcc,0x63,0x18,0xe7,0x36,0x98,0xb1,0xe9,0xcf,0xd8,0x9a,0xed,0x29,
    0x2e,0xe7,0x0d,0xbb,0xd3,0x9d,0x29,0xeb,0x89,0x4d,0x15,0xd5,0x85,0x6c,0x37,0x63,
    0x7a,0x8f,0xa8,0xaf,0xa9,0xcc,0xbb,0xe9,0x2e,0xdf,0x21,0xbb,0x37,0xb6,0xe9,0xcc,
    0xf7,0x7b,0xdd,0x7e,0xfc,0x92,0x68,0xee,0xf9,0xfd,0xf8,0x65,0x51,0xbc,0x96,0xf7,
    0x0a,0xec,0xcf,0x10,0xc5,0xa7,0x72,0xaf,0x98,0xad,0xe9,0x6e,0xef,0x35,0x88,0xf2,
    0xc0,0xfc,0x67,0xd0,0x27,0xb8,0xcc,0x72,0x5c,0xa0,0x33,0x33,0xb6,0x59,0x1c,0x3f,
    0xd3,0x71,0xb9,0xcf,0x71,0xb1,0xbb,0x72,0x8e,0xe8,0x3e,0x80,0xec,0x45,0x62,0x73,
    0x45,0xf1,0x06,0x97,0xc3,0xf3,0x44,0xf1,0x1a,0xae,0x8b,0xd9,0x9f,0xe5,0xf8,0xcd,
    0x17,0xe5,0x08,0xce,0xf3,0xc8,0xc3,0x7c,0x2f,0x70,0xbe,0x2d,0xce,0x0f,0x70,0xbe,
    0x90,0x3d,0x4b,0x3f,0x0b,0x45,0xf1,0xa3,0xee,0xfe,0x5a,0x24,0x6a,0xfb,0xe7,0xd4,
    0x59,0x2c,0xaa,0xb7,0x88,0xf3,0x6f,0x74,0xf3,0x87,0x6c,0x09,0xea,0x4c,0xf2,0x5b,
    0xc2,0x1a,0x00,0xf5,0xf1,0xd2,0xdc,0xb9,0x22,0xac,0x1d,0x51,0xf3,0x2c,0xa3,0x7c,
    0x5a,0xdc,0xd5,0xf8,0x9f,0x52,0x13,0xb4,0x0e,0x6a,0x0f,0x59,0x0d,0x10,0x98,0x37,
    0xa8,0x85,0x3f,0x1b,0x74,0x0c,0x72,0xe9,0x3b,0xc4,0x46,0x05,0xfd,0xbf,0x00,0xd9,
    0x63,0x11,0x83,0x9d,0xcf,0x05,0xb5,0x35,0x2a,0x64,0xb6,0x3f,0xcf,0xb1,0xcb,0xa4,
    0xa3,0x6d,0x1b,0x33,0x3a,0xa8,0x0e,0xec,0xac,0x23,0x36,0x26,0xa8,0xad,0xd1,0x21,
    0xe3,0x70,0x2b,0xf9,0x81,0xc3,0x46,0x62,0x75,0x41,0xf1,0x51,0x4e,0xef,0xb6,0xa0,
    0xe3,0x13,0xc7,0x7f,0x3c,0x31,0x71,0xd8,0x04,0x62,0x50,0xbd,0x8b,0xb5,0xe0,0xed,
    0x41,0xc7,0x43,0x1f,0xf2,0x3a,0xd6,0x20,0x16,0xdf,0x46,0xc9,0xea,0xc6,0x4b,0xe4,
    0x83,0x9c,0xc0,0xb8,0x25,0xb9,0x73,0x5f,0xeb,0xc8,0xd2,0x54,0xf7,0x22,0x75,0x51,
    0x73,0xd4,0xf0,0xbe,0xc0,0xf8,0x46,0xe9,0x58,0x97,0x5e,0x64,0xbe,0xad,0xa0,0xbf,
    0x15,0xce,0x5f,0x1b,0x6d,0x40,0xe7,0x72,0x7c,0xae,0x96,0xac,0x4e,0xdd,0x1b,0xb4,
    0xfe,0x85,0x6c,0x93,0xa8,0xcc,0xea,0xd4,0x35,0xa2,0x72,0xab,0x53,0x57,0x51,0x6e,
    0x39,0x04,0xf9,0xca,0xd8,0x56,0xd1,0x27,0xde,0xad,0x4e,0x5d,0x27,0x59,0x9d,0xba,
    0xd7,0xd5,0xa9,0xeb,0x45,0x65,0x56,0xa7,0x6e,0x60,0x7e,0xad,0x77,0x75,0xea,0x46,
    0x51,0xdc,0xf6,0xde,0x26,0xf2,0xd8,0xe8,0xea,0xd4,0x47,0x44,0xbf,0x45,0x4c,0xa2,
    0x4d,0x5f,0xa7,0x6e,0x11,0x95,0x5b,0x0d,0x39,0x29,0x28,0xb6,0xa5,0x93,0x3a,0x75,
    0x32,0x6b,0xc8,0x49,0xae,0x86,0xfc,0x42,0x50,0x1c,0x7b,0x66,0x9a,0xbb,0x13,0x80,
    0x4f,0x41,0x7e,0xf2,0xac,0x9d,0xe2,0xea,0xd4,0x7a,0xe7,0x23,0x5f,0xa7,0xde,0x49,
    0x1f,0xf5,0xce,0xc7,0xd4,0xa0,0x38,0xd6,0xcc,0xec,0x4d,0x73,0x75,0xea,0x5d,0x41,
    0x79,0x20,0xa6,0x53,0xe9,0xd7,0xf6,0xf9,0xf7,0x45,0xe5,0xe0,0xb7,0xd5,0xad,0x07,
    0xf0,0xc7,0x63,0xdb,0xca,0xf5,0x78,0x9c,0x39,0xb2,0x9a,0xfd,0xad,0xae,0x9e,0x68,
    0x95,0x6c,0xde,0x16,0xd3,0x27,0x72,0x31,0x1d,0x2b,0x59,0x4c,0x77,0x88,0xca,0x6d,
    0xbe,0x3b,0x45,0xb1,0x1d,0x2e,0xa6,0x76,0x86,0xfd,0x8c,0x78,0x70,0xd8,0x53,0x4e,
    0xd7,0xb0,0xaf,0x04,0xe5,0xe1,0xeb,0x8d,0x19,0x41,0xf1,0xa7,0x5c,0xbd,0x31,0x33,
    0x28,0x5e,0xeb,0xf4,0xbe,0x1a,0x14,0xf7,0x35,0xc8,0xec,0xd0,0x91,0xff,0x64,0xea,
    0xd9,0x1c,0xbe,0x16,0x54,0xc7,0x6a,0x90,0x39,0xce,0xc6,0x95,0xf3,0x3b,0x28,0x6e,
    0x35,0xc8,0x4a,0xb7,0xfe,0x90,0xcd,0x8f,0x6d,0x01,0xd7,0x6b,0x81,0xab,0x25,0xbe,
    0xce,0x71,0x56,0x83,0xac,0x70,0xe3,0x20,0x5b,0x18,0xdb,0x62,0x8e,0x5b,0xec,0xc6,
    0x35,0x72,0x9c,0xd5,0x20,0xcb,0xdd,0x38,0xc8,0x1e,0xc4,0x19,0xc8,0x71,0xcb,0xdc,
    0x1d,0xfd,0xcd,0xa0,0xf3,0xb1,0x1a,0x64,0x39,0x75,0x1e,0x74,0x3a,0x4b,0xa9,0x13,
    0x72,0x3a,0xcb,0x43,0xb6,0xff,0x5f,0x0d,0x6a,0x0b,0xb6,0x97,0xd2,0x5f,0x7a,0x8e,
    0x50,0x77,0xa1,0xb3,0xb7,0x88,0xf6,0xac,0x46,0x31,0x9d,0x15,0xce,0xde,0x2b,0x41,
    0x6d,0xc2,0xc7,0x22,0xce,0x1b,0xba,0x2b,0xa9,0x3b,0xdf,0xd9,0xbb,0x9f,0xf6,0xac,
    0x86,0x31,0x9d,0x95,0xce,0xde,0x81,0xa0,0x36,0xe1,0xe3,0x7e,0xc6,0xdf,0xd6,0x6f,
    0xb5,0xcb,0x8b,0x0d,0xc4,0x9a,0x82,0xe2,0xf8,0x7e,0xb2,0x97,0xd8,0xb7,0x83,0xda,
    0x81,0xcc,0xee,0xee,0xb5,0x41,0xf1,0x87,0x92,0xec,0x4e,0x7d,0x46,0x14,0x7f,0x9a,
    0xf7,0xe5,0x6e,0xb7,0xb7,0x20,0xdb,0x85,0x3a,0x87,0x7b,0x09,0xef,0x9b,0xb9,0x97,
    0x36,0x30,0x8f,0x77,0x72,0xbf,0xe0,0x5b,0xe3,0xc6,0xa0,0xdf,0x19,0xed,0x7b,0xc4,
    0xa6,0xa0,0x7a,0x4d,0xfc,0x46,0xf5,0x70,0x50,0x5f,0x77,0xf3,0x1c,0xdc,0x1c,0x54,
    0xc7,0xf6,0x07,0xb0,0x47,0x88,0x49,0x7a,0xcf,0x14,0xa5,0xdf,0x26,0xb7,0x04,0xd5,
    0x85,0xec,0x61,0x67,0xef,0xd1,0xa0,0xfb,0x6e,0x36,0xcf,0xfc,0xef,0x05,0xe5,0xb0,
    0x85,0xeb,0xff,0xa8,0xbb,0xe7,0x1e,0x0b,0x2a,0x4f,0x92,0xec,0xce,0xff,0x6d,0x6e,
    0xef,0xfb,0x3b,0xff,0x39,0xca,0xed,0xae,0x7b,0x5e,0xd4,0x86,0x6f,0xd7,0xc6,0x1d,
    0x06,0xd9,0x1e,0x9e,0xfb,0x95,0xfc,0x6e,0x86,0xb1,0xcf,0xbb,0x7a,0x61,0x6b,0xd0,
    0xfb,0xa8,0xed,0x2a,0xf5,0x42,0x73,0x50,0x1b,0xbe,0x5e,0x68,0x61,0xbd,0xd0,0xec,
    0xea,0x85,0x6d,0x41,0x6d,0xb5,0xb8,0x7a,0x61,0x3b,0xc7,0xee,0xb9,0x4a,0xbd,0xd0,
    0x1a,0x54,0xa7,0xd9,0xd5,0x0b,0x3f,0x0c,0x6a,0xab,0xd5,0xc5,0xe7,0x47,0xe4,0xe7,
    0xeb,0x85,0x27,0x83,0xe2,0x2d,0x4e,0xef,0xc7,0x41,0xc7,0xfb,0x7a,0x61,0x27,0x31,
    0x5f,0x2f,0xfc,0x84,0x98,0xaf,0x17,0x7e,0x1a,0x74,0x3c,0xf4,0x21,0x7f,0x92,0xfb,
    0xc4,0xf2,0x6b,0xb7,0xbb,0xbf,0x3f,0x24,0x1f,0xec,0x0b,0x8c,0xdb,0x95,0x3b,0xd7,
    0x57,0x3b,0xdd,0xcb,0xd4,0xc5,0xd9,0x8f,0x71,0xbb,0xa5,0x63,0x5d,0xb0,0x4a,0x32,
    0x5e,0x7b,0x25,0x9b,0xe7,0x6f,0xb8,0x07,0xfe,0x28,0x8a,0xef,0xe1,0x79,0xd4,0xee,
    0xf6,0x00,0x64,0x6d,0xb1,0xb5,0xd3,0x56,0x9b,0xe8,0x77,0x42,0x7c,0x07,0x7d,0x51,
    0xf4,0x3b,0xa1,0xe5,0x0d,0xf6,0xd8,0x9f,0x88,0x5b,0x3d,0xf1,0x92,0x28,0x66,0x67,
    0xeb,0x7e,0x67,0x1b,0xb2,0x7d,0xb1,0xed,0xa7,0xed,0x7d,0xee,0xae,0x39,0xc0,0xff,
    0xea,0xf8,0xfe,0x69,0xdf,0x56,0xeb,0xa2,0x07,0xf8,0x7d,0x45,0xb2,0xef,0x93,0x0d,
    0xee,0xbf,0xef,0xab,0x94,0x59,0x0d,0x7d,0x50,0x14,0xf3,0xff,0xed,0x0f,0xb9,0x6f,
    0x00,0xa6,0x77,0x58,0x54,0x17,0xb2,0x2f,0x46,0x04,0xfe,0x7f,0x1f,0x14,0x3f,0x20,
    0xd9,0x59,0x65,0x3c,0xf7,0x33,0xf6,0xd0,0x7b,0x89,0xf7,0x3c,0xe2,0x82,0x31,0xfb,
    0x5c,0xde,0x1f,0x95,0xce,0xf3,0xfe,0x39,0xc6,0xe6,0x75,0xc6,0xfd,0x24,0x63,0x73,
    0xdc,0xc5,0x06,0xb2,0x63,0xb1,0x1d,0xa7,0xcf,0x63,0x8c,0x31,0xbe,0x21,0xff,0x93,
    0xdf,0x8f,0xed,0x9c,0x39,0x25,0xca,0x63,0x4e,0xb4,0x8b,0x7c,0x78,0x93,0x3a,0xa7,
    0x1c,0x97,0xb7,0x45,0xf1,0x37,0xaf,0xb2,0x4f,0xce,0x88,0xea,0x80,0x8f,0xed,0x93,
    0xb3,0xa2,0x73,0x38,0xc3,0x7c,0x32,0x2e,0xc7,0x39,0x7f,0xe8,0xec,0x0f,0xaa,0x83,
    0x98,0x9c,0x25,0x67,0xe3,0x79,0x2e,0xc7,0xf3,0x3f,0xe4,0x69,0xb9,0xf8,0x5f,0xd1,
    0xf1,0x7e,0x2f,0xbd,0x4b,0xcc,0xef,0xa5,0xf7,0x88,0xf9,0xbd,0xf4,0xbe,0xe8,0x78,
    0xe8,0xbf,0xc7,0xdc,0x9d,0x1b,0xfd,0xc0,0x27,0xfc,0xbc,0x4f,0xce,0x96,0xb7,0xed,
    0xd2,0xf1,0x9b,0x33,0x9e,0xff,0x8b,0x5e,0x46,0xc5,0xf6,0x7f,0xbb,0x6d,0x68,0xf0,
    0x8c,0x1e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(local_size_x = 8, local_size_y = 4, local_size_z = 1)in;
//
// struct TextWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 fontSize;
//     uvec4 text[256 / 16];
// };
//
// struct GraphWidgetData
// {
//     uvec4 coordinates;
//     vec4 color;
//     uvec4 valueWidth;
//     uvec4 values[256 / 4];
// };
//
// layout(set = 0, binding = 0, rgba32f)uniform image2D blendOutput;
//
// layout(set = 0, binding = 1)uniform TextWidgets
// {
//     TextWidgetData textWidgetsData[32];
// };
//
// layout(set = 0, binding = 2)uniform GraphWidgets
// {
//     GraphWidgetData graphWidgetsData[32];
// };
//
// layout(set = 0, binding = 3)uniform utexture2D culledWidgets;
// layout(set = 0, binding = 4)uniform texture2DArray font;
//
// layout(push_constant)uniform PushConstants
// {
//     uvec2 outputSize;
//
//     bool rotateXY;
// } params;
//
// bool intersects(const uvec2 imageCoords, const uvec4 widgetCoords)
// {
//     return all(greaterThanEqual(imageCoords, widgetCoords . xy))&&
//            all(lessThan(imageCoords, widgetCoords . zw));
// }
//
// uint getChar(const uint textWidget, const uvec2 coordInWidget, const uint fontGlyphWidth)
// {
//     const uint charIndex = coordInWidget . x / fontGlyphWidth;
//     const uint packIndex = charIndex / 4;
//     const uvec4 arrayItem = textWidgetsData[textWidget]. text[packIndex / 4];
//     const uint col = packIndex % 4;
//
//     uint packedChars;
//     if(col == 0)
//     {
//         packedChars = arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         packedChars = arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         packedChars = arrayItem[2];
//     }
//     else
//     {
//         packedChars = arrayItem[3];
//     }
//
//     const uint shift =(charIndex % 4)* 8;
//
//     return(packedChars >> shift)& 0xFF;
//
// }
//
// float sampleFont(const uint textChar,
//                  const uvec2 coordInWidget,
//                  const uvec2 fontGlyphSize,
//                  const uint fontMip)
// {
//     const uvec2 coordInGlyph = coordInWidget % fontGlyphSize;
//     return texelFetch(font, ivec3(coordInGlyph, textChar), int(fontMip)). x;
// }
//
// uint getValue(const uint graphWidget, const uvec2 coordInWidget, const uint valueWidth)
// {
//     const uint valueIndex = coordInWidget . x / valueWidth . x;
//     const uvec4 arrayItem = graphWidgetsData[graphWidget]. values[valueIndex / 4];
//     const uint col = valueIndex % 4;
//
//     if(col == 0)
//     {
//         return arrayItem[0];
//     }
//     else if(col == 1)
//     {
//         return arrayItem[1];
//     }
//     else if(col == 2)
//     {
//         return arrayItem[2];
//     }
//     else
//     {
//         return arrayItem[3];
//     }
// }
//
// vec4 blend(const vec4 blendedSoFar, const vec4 color)
// {
//
//     return vec4(blendedSoFar . rgb *(1 - color . a)+ color . rgb * color . a,
//                 blendedSoFar . a *(1 - color . a));
// }
//
// void main()
// {
//     uvec2 imageCoords = gl_GlobalInvocationID . xy;
//     if(any(greaterThanEqual(imageCoords, params . outputSize)))
//     {
//         return;
//     }
//
//     vec4 blendedWidgets = vec4(0, 0, 0, 1);
//
//     const uvec2 subgroupWidgets = texelFetch(culledWidgets, ivec2(gl_WorkGroupID . xy), 0). xy;
//     uint textWidgets = subgroupWidgets . x;
//     uint graphWidgets = subgroupWidgets . y;
//
//     while(graphWidgets != 0)
//     {
//         const uint graphWidget = findLSB(graphWidgets);
//         graphWidgets ^= 1 << graphWidget;
//
//         const uvec4 widgetCoords = graphWidgetsData[graphWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         if(imageCoords . x == widgetCoords . x || imageCoords . y == widgetCoords . y ||
//             imageCoords . x + 1 == widgetCoords . z || imageCoords . y + 1 == widgetCoords . w)
//         {
//
//             blendedWidgets = vec4(0);
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uint valueWidth = graphWidgetsData[graphWidget]. valueWidth . x;
//
//         const uint value = getValue(graphWidget, coordInWidget, valueWidth);
//
//         vec4 color = vec4(0);
//         const uint widgetHeight = widgetCoords . w - widgetCoords . y;
//
//         bool indicateOverflow = value > widgetHeight && coordInWidget . y + 4 >= widgetHeight
//                 &&((coordInWidget . x ^ coordInWidget . y)& 1)== 0;
//
//         if((widgetHeight - coordInWidget . y)< value && ! indicateOverflow)
//         {
//             color = graphWidgetsData[graphWidget]. color;
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     while(textWidgets != 0)
//     {
//         const uint textWidget = findLSB(textWidgets);
//         textWidgets ^= 1 << textWidget;
//
//         const uvec4 widgetCoords = textWidgetsData[textWidget]. coordinates;
//         if(! intersects(imageCoords, widgetCoords))
//         {
//             continue;
//         }
//
//         const uvec2 coordInWidget = imageCoords - widgetCoords . xy;
//         const uvec4 fontSizePacked = textWidgetsData[textWidget]. fontSize;
//         const uvec2 fontGlyphSize = fontSizePacked . xy;
//         const uint fontMip = fontSizePacked . z;
//
//         const uint textChar = getChar(textWidget, coordInWidget, fontGlyphSize . x);
//
//         if(textChar < 95)
//         {
//
//             const float sampleValue = sampleFont(textChar, coordInWidget, fontGlyphSize, fontMip);
//
//             vec4 color = vec4(0, 0, 0, 0.4);
//             color = mix(color, textWidgetsData[textWidget]. color, sampleValue);
//
//             blendedWidgets = blend(blendedWidgets, color);
//         }
//     }
//
//     if(blendedWidgets . a < 1)
//     {
//
//         if(params . rotateXY)
//         {
//
//             imageCoords . xy = imageCoords . yx;
//             imageCoords . x = params . outputSize . y - 1 - imageCoords . x;
//         }
//
//         vec3 blendedColor = blendedWidgets . rgb;
//         if(blendedWidgets . a > 0)
//         {
//             const vec4 color = imageLoad(blendOutput, ivec2(imageCoords));
//
//             blendedColor += color . rgb * blendedWidgets . a;
//         }
//
//         imageStore(blendOutput, ivec2(imageCoords), vec4(blendedColor, 1));
//     }
// }
