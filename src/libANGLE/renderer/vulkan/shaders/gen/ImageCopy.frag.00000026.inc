// GENERATED FILE - DO NOT EDIT.
// Generated by gen_vk_internal_shaders.py.
//
// Copyright 2018 The ANGLE Project Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
//
// shaders/gen/ImageCopy.frag.00000026.inc:
//   Pre-generated shader for the ANGLE Vulkan back-end.

#pragma once
constexpr uint8_t kImageCopy_frag_00000026[] = {
    0x1f,0x8b,0x08,0x00,0x00,0x00,0x00,0x00,0x02,0xff,0x85,0x96,0xfd,0x4f,0x96,0x65,
    0x14,0xc7,0xef,0xe7,0x85,0xe7,0x41,0x08,0x90,0x17,0x25,0x5c,0x5a,0xa6,0x6c,0x35,
    0x0c,0x9e,0x16,0x19,0x41,0xba,0xc8,0xc8,0x32,0x4a,0xc1,0x97,0x0a,0xb6,0x0a,0x27,
    0x94,0x30,0x09,0x66,0xe9,0x72,0x0d,0x4d,0xd8,0x5a,0x5a,0xc1,0xe6,0x98,0xb5,0x82,
    0xcd,0x82,0x1f,0x12,0xd2,0x1f,0xda,0xfa,0xa9,0xb5,0x56,0x3a,0xd3,0xca,0xff,0xc6,
    0xf5,0xb2,0xb5,0x75,0x9d,0x8b,0xcf,0x71,0xdf,0x3d,0xab,0xc9,0x76,0xed,0xbe,0xaf,
    0xef,0x39,0xe7,0x3a,0xdf,0xef,0x39,0xe7,0xbe,0x1e,0x32,0xe9,0x4d,0xf9,0x24,0x49,
    0x25,0x65,0x49,0x69,0x72,0x33,0x59,0xf9,0xab,0x4e,0xd2,0x01,0x49,0x92,0xf2,0x24,
    0x17,0x9f,0x3b,0xbb,0xf7,0x76,0x37,0x1f,0x7d,0xfb,0x50,0x73,0xeb,0xa3,0x05,0xb3,
    0x57,0x26,0x99,0xe8,0x67,0xb6,0xaa,0x24,0x9f,0x64,0xc3,0xd3,0xd6,0x91,0x81,0xc3,
    0xa3,0x86,0x57,0x84,0x75,0x39,0xac,0xd5,0xc1,0xcf,0xf0,0xbc,0x9d,0x11,0xde,0x2a,
    0xe2,0x99,0x16,0x93,0x24,0xcf,0x26,0x25,0x49,0x2d,0xf9,0x36,0xf1,0x74,0x2c,0x05,
    0x56,0x2a,0x58,0x1a,0x6c,0xb5,0x60,0x19,0xb0,0x3a,0xc1,0xb2,0x60,0x77,0x0b,0x56,
    0x02,0x76,0x8f,0x60,0x39,0xb0,0xfb,0x04,0xcb,0x83,0x6d,0x16,0xac,0x14,0xec,0x01,
    0xc1,0x56,0x81,0x6d,0x11,0xac,0x0c,0xac,0x20,0x58,0x39,0x58,0xab,0x60,0x77,0x81,
    0xb5,0x09,0x56,0x01,0xf6,0x84,0x60,0x95,0x60,0x4f,0xc6,0xda,0x65,0x6e,0xd7,0xc0,
    0xea,0xb8,0x23,0x3c,0xef,0xa7,0x66,0xbe,0xdf,0x28,0x7b,0xab,0xfd,0x06,0xf6,0xb5,
    0x21,0x2a,0x1d,0xed,0x99,0x58,0x2f,0x7b,0x5f,0x13,0x7c,0x72,0x68,0xb7,0x5a,0xd7,
    0x87,0x7d,0x9e,0x9a,0x98,0x7d,0x6d,0xf0,0x2c,0xc3,0x6e,0xb6,0x72,0xf4,0x65,0x23,
    0x96,0x8d,0x1a,0x52,0xe8,0xeb,0x60,0x5f,0x21,0x67,0x55,0xe2,0xef,0xb9,0x6a,0x38,
    0x2b,0x89,0xbc,0xaa,0x6f,0xd7,0xda,0x73,0xfa,0xaa,0xb9,0xc3,0x72,0x1f,0xe3,0x50,
    0x47,0x1f,0x6a,0xe1,0x50,0x17,0x73,0xad,0x60,0x4d,0xe8,0x5b,0x0b,0x27,0xf3,0xaf,
    0xc7,0x96,0x17,0xfb,0x7a,0x66,0xc3,0xec,0x1b,0xb0,0xd7,0xc4,0x79,0x4a,0xc7,0x7a,
    0x36,0xc1,0xdd,0x6b,0xed,0x71,0x4d,0x70,0x71,0xfb,0xc3,0xe4,0x71,0xfb,0x56,0xfa,
    0x67,0xb5,0xd8,0x8e,0xaf,0xd5,0xae,0x21,0x64,0xe8,0x94,0x3a,0xeb,0x5f,0x8a,0xa7,
    0x71,0x79,0x8a,0xf7,0x4e,0xb4,0xd9,0x7e,0x47,0x11,0x87,0xae,0xa2,0xfd,0x2e,0xbe,
    0x07,0x8b,0x7f,0x1e,0x2d,0x39,0x38,0xbc,0xc8,0x7b,0x46,0xfc,0x7b,0xe1,0xe0,0xfb,
    0x03,0x45,0xb5,0x19,0x62,0xf6,0x2d,0xfe,0x04,0x75,0xc9,0x8a,0xfd,0x64,0x51,0xad,
    0xcf,0xd2,0x73,0xdf,0x9f,0x67,0x26,0x7c,0x7f,0x41,0xe6,0xe7,0x12,0x5c,0x4e,0xa0,
    0xef,0x12,0xf7,0x45,0x26,0xd6,0xae,0x24,0xf2,0xca,0xa2,0xcf,0xb0,0x3f,0x03,0x62,
    0x7d,0xda,0xc6,0x2c,0x56,0x71,0xf6,0xee,0xc0,0xb8,0x92,0x3b,0xa1,0x8a,0xe5,0xb5,
    0x1c,0x65,0xa6,0xab,0xb1,0x77,0x86,0x13,0xea,0xb9,0x17,0xd6,0x30,0x1b,0xdb,0xf0,
    0x69,0x00,0x3f,0x1d,0x7c,0x6c,0xbf,0x8e,0xb8,0x06,0xe2,0x6c,0x36,0xee,0x25,0x6e,
    0x3d,0x71,0x3e,0xd3,0x86,0x2f,0x05,0x9f,0x8d,0x72,0x9f,0xd8,0xbc,0xfc,0x11,0x98,
    0x37,0xc2,0xe7,0xef,0xe0,0xef,0xf7,0x4a,0x23,0x7a,0xec,0xbd,0x27,0xc4,0xe5,0xb8,
    0x5b,0xd6,0xe1,0x3b,0x41,0xbd,0x1e,0x04,0xef,0x0d,0x3b,0xe3,0xf4,0x2d,0x98,0xfb,
    0xfd,0x15,0xce,0xf0,0xb3,0xec,0x79,0x2b,0x78,0x99,0xdf,0xcf,0xf8,0x94,0x10,0xb3,
    0x59,0x34,0x6c,0x41,0x43,0x93,0x68,0x78,0x08,0xdc,0x35,0x34,0x83,0xb9,0x86,0x82,
    0x68,0x30,0x5b,0x0b,0x77,0x9c,0xe5,0x6d,0x11,0x0d,0x8f,0x90,0x3b,0x25,0x1a,0x5a,
    0xc1,0x5d,0xc3,0x77,0x60,0xee,0x67,0x1a,0xfc,0xac,0x82,0x68,0xb8,0x82,0x4f,0x23,
    0x31,0x2d,0xa2,0xe1,0x31,0x34,0x6c,0x15,0x0d,0x6d,0xe0,0xae,0xe1,0x71,0x30,0xd7,
    0xd0,0x21,0x1a,0xcc,0xd6,0x1e,0xe7,0x6e,0x25,0x6f,0x3b,0x73,0x94,0x8f,0xe7,0xad,
    0xe4,0xbe,0x22,0xdf,0xa3,0x71,0x74,0xdf,0x0e,0xe1,0x78,0x15,0xbf,0x02,0x71,0xed,
    0xf0,0xb1,0x6f,0xf6,0x69,0xbe,0x57,0x9f,0xb9,0x67,0xe0,0xdc,0x25,0x33,0xb7,0x13,
    0xfc,0x14,0x33,0xf7,0x1c,0xd8,0x55,0xe2,0xec,0x1b,0xee,0x26,0x6e,0x17,0x71,0x56,
    0xd3,0x17,0xc0,0xbd,0xee,0xbb,0x89,0x4d,0x04,0xdb,0x03,0x96,0x8a,0xef,0xb9,0xf8,
    0xfd,0xf7,0xe0,0xbb,0x87,0x33,0x3c,0xc7,0x5e,0x72,0xf4,0x4a,0x8e,0x7d,0xe0,0xaf,
    0x05,0x66,0x76,0x7f,0xed,0x47,0x53,0x0f,0x77,0xc6,0x3e,0xe9,0xc7,0x4b,0xc4,0x1f,
    0x90,0x7e,0xbc,0x0c,0xee,0xfd,0x78,0x05,0xcc,0xfb,0xd1,0x2f,0xfd,0x30,0x5b,0x5f,
    0x58,0x83,0xd4,0xb8,0x4f,0x74,0xbc,0x4a,0xee,0x4c,0xe4,0x5e,0x1a,0x75,0xbc,0x0e,
    0xb6,0x5f,0xbe,0xf5,0xb4,0xe8,0x1c,0x20,0xce,0xd7,0x54,0x38,0xcb,0xf0,0x83,0xc4,
    0x0e,0xc4,0xb3,0x56,0x45,0x5d,0x87,0x38,0xe7,0x20,0xf7,0x4d,0x89,0xdc,0x93,0xd6,
    0xf7,0x7e,0x38,0x0d,0x8a,0xde,0x37,0xd0,0x3b,0x24,0x7a,0xdf,0x04,0x77,0xbd,0x87,
    0xc1,0x5c,0xef,0x88,0xe8,0x35,0xdb,0x70,0x58,0x23,0x9c,0x3d,0x2c,0x7a,0x8f,0x88,
    0xde,0x6f,0x38,0x6b,0x14,0xbc,0x0b,0x4e,0x1e,0x37,0xc2,0x2c,0x9a,0xcf,0x5b,0xe4,
    0x1c,0xc4,0x7f,0x98,0xbc,0xe3,0x92,0xd7,0x7c,0xc6,0xc2,0x1a,0x27,0x7e,0x4c,0xf2,
    0x1e,0xfd,0x8f,0x3a,0xbf,0x73,0x87,0x3a,0x1f,0x23,0xce,0xd7,0x07,0xd4,0xf9,0x38,
    0xb1,0xc7,0xa4,0xce,0xef,0x72,0xce,0xf1,0xff,0xa9,0xb3,0x73,0x1a,0x47,0x93,0xc5,
    0xfc,0x42,0xcc,0x08,0xf1,0x63,0x45,0x3d,0xe9,0x17,0xdf,0x6b,0xf4,0xb2,0x8f,0x38,
    0x3b,0xe7,0x3d,0x7e,0xb7,0x26,0xb0,0x7b,0xff,0x4e,0xd1,0xbf,0x93,0xd2,0xbf,0xf7,
    0xc1,0xbd,0x7f,0xa7,0xc1,0xbc,0x7f,0x53,0x52,0x47,0xb3,0x4d,0x86,0x75,0x06,0x1e,
    0x93,0xe8,0xb4,0x5c,0x1f,0x92,0x6f,0x02,0x9d,0x79,0x6a,0xe6,0x3a,0xa7,0x88,0x39,
    0x23,0x7c,0x3e,0x82,0xcf,0x59,0xe1,0xf3,0x31,0xb8,0xf3,0xf9,0x04,0xcc,0xf9,0xcc,
    0x08,0x1f,0xb3,0x4d,0x87,0x35,0xcb,0xd9,0xd3,0xf4,0xd5,0xce,0x39,0x07,0x97,0x0c,
    0x77,0xb0,0x71,0xfc,0x5e,0x70,0xbf,0xdf,0x66,0x88,0x9d,0x95,0x7b,0xe1,0x53,0x78,
    0x9d,0x97,0x7b,0xe1,0x33,0xf0,0x6b,0xcc,0xcd,0xe7,0x60,0xbd,0xc2,0xf5,0x0b,0xf0,
    0x2e,0xb8,0xce,0x0b,0x57,0xb3,0xcd,0x85,0x35,0x4f,0xbe,0x39,0xe1,0xf5,0x03,0xfa,
    0x26,0xe4,0xb7,0xc1,0xfd,0xe6,0xe9,0xb5,0xf9,0x5d,0xc7,0x67,0x96,0x98,0x39,0xe1,
    0xf3,0x25,0x7c,0x2e,0x08,0x9f,0xaf,0xc0,0x9d,0xcf,0xa2,0xf0,0x31,0xdb,0x42,0x58,
    0x8b,0xe4,0x59,0x10,0x3e,0x3f,0xc2,0xe7,0x3a,0x3d,0x34,0x3e,0xee,0xb7,0x28,0x7c,
    0x6e,0xe0,0x33,0x4f,0xcc,0x82,0xf0,0xf9,0x1a,0x3e,0x43,0xc2,0xe7,0x22,0xb8,0xf3,
    0x59,0x16,0x3e,0x17,0xa3,0x5f,0x12,0x31,0xcb,0xb3,0x24,0x7c,0x7e,0xe2,0xff,0xcc,
    0x1b,0x32,0x4f,0xee,0xb7,0x2c,0x7c,0x7e,0xc7,0x67,0x91,0x98,0xa5,0xa2,0x1e,0xcf,
    0x88,0xef,0x6f,0xcc,0xc3,0x34,0x71,0xcb,0x45,0x73,0x3a,0x25,0xbe,0xbf,0x32,0xdf,
    0x93,0xc4,0xd9,0x39,0xdb,0x03,0x93,0xcb,0xd8,0xfe,0x09,0x5d,0x6b,0x0b,0xeb,0x5f,
    0xf8,0x98,0x07,0xc1,0x50,0x0e,0x00,0x00
};

// Generated from:
//
// #version 450 core
//
// #extension GL_EXT_samplerless_texture_functions : require
//
// layout(set = 0, binding = 0)uniform itexture3D src;
// layout(location = 0)out uvec4 dst;
//
// layout(push_constant)uniform PushConstants {
//
//     ivec2 srcOffset;
//     ivec2 dstOffset;
//     int srcMip;
//     int srcLayer;
//     int srcSampleCount;
//
//     bool flipX;
//     bool flipY;
//
//     bool premultiplyAlpha;
//     bool unmultiplyAlpha;
//
//     bool dstHasLuminance;
//     bool dstIsAlpha;
//
//     bool srcIsSRGB;
//     bool dstIsSRGB;
//
//     int dstDefaultChannelsMask;
//     bool rotateXY;
// } params;
//
// void main()
// {
//     ivec2 dstSubImageCoords = ivec2(gl_FragCoord . xy)- params . dstOffset;
//
//     ivec2 srcSubImageCoords = dstSubImageCoords;
//
//     if(params . flipX)
//     {
//         srcSubImageCoords . x = - srcSubImageCoords . x;
//     }
//     if(params . flipY)
//     {
//         srcSubImageCoords . y = - srcSubImageCoords . y;
//     }
//     if(params . rotateXY)
//     {
//         srcSubImageCoords . xy = srcSubImageCoords . yx;
//     }
//
//           ivec4 srcValue = texelFetch(src, ivec3(params . srcOffset + srcSubImageCoords, params . srcLayer), params . srcMip);
//
//     if(params . premultiplyAlpha)
//     {
//         srcValue . rgb *= srcValue . a;
//     }
//     else if(params . unmultiplyAlpha && srcValue . a > 0)
//     {
//         srcValue . rgb /= srcValue . a;
//     }
//
//            uvec4 dstValue = uvec4(srcValue);
//
//     if(params . dstHasLuminance)
//     {
//         dstValue . rg = dstValue . ra;
//     }
//     else if(params . dstIsAlpha)
//     {
//         dstValue . r = dstValue . a;
//     }
//     else
//     {
//         int defaultChannelsMask = params . dstDefaultChannelsMask;
//         if((defaultChannelsMask & 2)!= 0)
//         {
//             dstValue . g = 0;
//         }
//         if((defaultChannelsMask & 4)!= 0)
//         {
//             dstValue . b = 0;
//         }
//         if((defaultChannelsMask & 8)!= 0)
//         {
//             dstValue . a = 1;
//         }
//     }
//
//     dst = dstValue;
// }
